// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fusion_od.proto

#include "fusion_od.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_fusion_5fod_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fusion_5fod_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fusion_5fod_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PredictTrajectory_Intention;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fusion_5fod_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PredictTrajectory_TrajPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fusion_5fod_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3d;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fusion_5fod_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Object;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fusion_5fod_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PredictTrajectory;
}  // namespace protobuf_fusion_5fod_2eproto
namespace calmpilot {
namespace fusion {
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class Vector3dDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector3d>
      _instance;
} _Vector3d_default_instance_;
class PredictTrajectory_IntentionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PredictTrajectory_Intention>
      _instance;
} _PredictTrajectory_Intention_default_instance_;
class PredictTrajectory_TrajPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PredictTrajectory_TrajPoint>
      _instance;
} _PredictTrajectory_TrajPoint_default_instance_;
class PredictTrajectoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PredictTrajectory>
      _instance;
} _PredictTrajectory_default_instance_;
class ObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Object>
      _instance;
} _Object_default_instance_;
class ObjFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjFrame>
      _instance;
} _ObjFrame_default_instance_;
}  // namespace fusion
}  // namespace calmpilot
namespace protobuf_fusion_5fod_2eproto {
static void InitDefaultsHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmpilot::fusion::_Header_default_instance_;
    new (ptr) ::calmpilot::fusion::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmpilot::fusion::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeader}, {}};

static void InitDefaultsVector3d() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmpilot::fusion::_Vector3d_default_instance_;
    new (ptr) ::calmpilot::fusion::Vector3d();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmpilot::fusion::Vector3d::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Vector3d =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVector3d}, {}};

static void InitDefaultsPredictTrajectory_Intention() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmpilot::fusion::_PredictTrajectory_Intention_default_instance_;
    new (ptr) ::calmpilot::fusion::PredictTrajectory_Intention();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmpilot::fusion::PredictTrajectory_Intention::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PredictTrajectory_Intention =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPredictTrajectory_Intention}, {}};

static void InitDefaultsPredictTrajectory_TrajPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmpilot::fusion::_PredictTrajectory_TrajPoint_default_instance_;
    new (ptr) ::calmpilot::fusion::PredictTrajectory_TrajPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmpilot::fusion::PredictTrajectory_TrajPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PredictTrajectory_TrajPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPredictTrajectory_TrajPoint}, {}};

static void InitDefaultsPredictTrajectory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmpilot::fusion::_PredictTrajectory_default_instance_;
    new (ptr) ::calmpilot::fusion::PredictTrajectory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmpilot::fusion::PredictTrajectory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PredictTrajectory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPredictTrajectory}, {
      &protobuf_fusion_5fod_2eproto::scc_info_PredictTrajectory_Intention.base,
      &protobuf_fusion_5fod_2eproto::scc_info_PredictTrajectory_TrajPoint.base,}};

static void InitDefaultsObject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmpilot::fusion::_Object_default_instance_;
    new (ptr) ::calmpilot::fusion::Object();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmpilot::fusion::Object::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Object =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsObject}, {
      &protobuf_fusion_5fod_2eproto::scc_info_Vector3d.base,
      &protobuf_fusion_5fod_2eproto::scc_info_PredictTrajectory.base,}};

static void InitDefaultsObjFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmpilot::fusion::_ObjFrame_default_instance_;
    new (ptr) ::calmpilot::fusion::ObjFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmpilot::fusion::ObjFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ObjFrame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsObjFrame}, {
      &protobuf_fusion_5fod_2eproto::scc_info_Header.base,
      &protobuf_fusion_5fod_2eproto::scc_info_Object.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Header.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Vector3d.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PredictTrajectory_Intention.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PredictTrajectory_TrajPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PredictTrajectory.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Object.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObjFrame.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Header, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Header, rolling_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Header, obj_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Vector3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Vector3d, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Vector3d, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Vector3d, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::PredictTrajectory_Intention, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::PredictTrajectory_Intention, lat_intention_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::PredictTrajectory_Intention, long_intention_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::PredictTrajectory_TrajPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::PredictTrajectory_TrajPoint, dist_long_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::PredictTrajectory_TrajPoint, dist_lat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::PredictTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::PredictTrajectory, intention_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::PredictTrajectory, traj_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::PredictTrajectory, prob_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, obj_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, life_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, class_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, class_type_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, center_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, vrel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, vrel_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, arel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, arel_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, abs_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, abs_vel_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, size_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, corner_left_front_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, corner_right_front_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, corner_left_rear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, corner_right_rear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, orientation_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, orientation_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, motion_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, motion_status_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, measured_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, meas_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::Object, trajectories_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::ObjFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::ObjFrame, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmpilot::fusion::ObjFrame, objects_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::calmpilot::fusion::Header)},
  { 8, -1, sizeof(::calmpilot::fusion::Vector3d)},
  { 16, -1, sizeof(::calmpilot::fusion::PredictTrajectory_Intention)},
  { 23, -1, sizeof(::calmpilot::fusion::PredictTrajectory_TrajPoint)},
  { 30, -1, sizeof(::calmpilot::fusion::PredictTrajectory)},
  { 38, -1, sizeof(::calmpilot::fusion::Object)},
  { 69, -1, sizeof(::calmpilot::fusion::ObjFrame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmpilot::fusion::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmpilot::fusion::_Vector3d_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmpilot::fusion::_PredictTrajectory_Intention_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmpilot::fusion::_PredictTrajectory_TrajPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmpilot::fusion::_PredictTrajectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmpilot::fusion::_Object_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmpilot::fusion::_ObjFrame_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "fusion_od.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017fusion_od.proto\022\020calmpilot.fusion\"E\n\006H"
      "eader\022\021\n\ttimestamp\030\001 \001(\004\022\027\n\017rolling_coun"
      "ter\030\002 \001(\r\022\017\n\007obj_num\030\003 \001(\r\"+\n\010Vector3d\022\t"
      "\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\326\002\n\021Pred"
      "ictTrajectory\022@\n\tintention\030\001 \001(\0132-.calmp"
      "ilot.fusion.PredictTrajectory.Intention\022"
      "B\n\013traj_points\030\002 \003(\0132-.calmpilot.fusion."
      "PredictTrajectory.TrajPoint\022\014\n\004prob\030\003 \001("
      "\001\032{\n\tIntention\0225\n\rlat_intention\030\001 \001(\0162\036."
      "calmpilot.fusion.LatIntention\0227\n\016long_in"
      "tention\030\002 \001(\0162\037.calmpilot.fusion.LongInt"
      "ention\0320\n\tTrajPoint\022\021\n\tdist_long\030\001 \001(\001\022\020"
      "\n\010dist_lat\030\002 \001(\001\"\205\014\n\006Object\022\016\n\006obj_id\030\001 "
      "\001(\r\022\021\n\tlife_time\030\002 \001(\004\022\022\n\nconfidence\030\003 \001"
      "(\001\0226\n\nclass_type\030\004 \001(\0162\".calmpilot.fusio"
      "n.Object.ClassType\022\035\n\025class_type_confide"
      "nce\030\005 \001(\001\022*\n\006center\030\006 \001(\0132\032.calmpilot.fu"
      "sion.Vector3d\022.\n\ncenter_rms\030\007 \001(\0132\032.calm"
      "pilot.fusion.Vector3d\022(\n\004vrel\030\010 \001(\0132\032.ca"
      "lmpilot.fusion.Vector3d\022,\n\010vrel_rms\030\t \001("
      "\0132\032.calmpilot.fusion.Vector3d\022(\n\004arel\030\n "
      "\001(\0132\032.calmpilot.fusion.Vector3d\022,\n\010arel_"
      "rms\030\013 \001(\0132\032.calmpilot.fusion.Vector3d\022+\n"
      "\007abs_vel\030\014 \001(\0132\032.calmpilot.fusion.Vector"
      "3d\022/\n\013abs_vel_rms\030\r \001(\0132\032.calmpilot.fusi"
      "on.Vector3d\022(\n\004size\030\016 \001(\0132\032.calmpilot.fu"
      "sion.Vector3d\022,\n\010size_rms\030\017 \001(\0132\032.calmpi"
      "lot.fusion.Vector3d\0225\n\021corner_left_front"
      "\030\020 \001(\0132\032.calmpilot.fusion.Vector3d\0226\n\022co"
      "rner_right_front\030\021 \001(\0132\032.calmpilot.fusio"
      "n.Vector3d\0224\n\020corner_left_rear\030\022 \001(\0132\032.c"
      "almpilot.fusion.Vector3d\0225\n\021corner_right"
      "_rear\030\023 \001(\0132\032.calmpilot.fusion.Vector3d\022"
      "\031\n\021orientation_angle\030\024 \001(\001\022\027\n\017orientatio"
      "n_rms\030\025 \001(\001\022<\n\rmotion_status\030\026 \003(\0162%.cal"
      "mpilot.fusion.Object.MotionStatus\022 \n\030mot"
      "ion_status_confidence\030\027 \003(\001\022@\n\017measured_"
      "source\030\030 \001(\0162\'.calmpilot.fusion.Object.M"
      "easuredSource\0226\n\nmeas_state\030\031 \001(\0162\".calm"
      "pilot.fusion.Object.MeasState\0229\n\014traject"
      "ories\030\032 \003(\0132#.calmpilot.fusion.PredictTr"
      "ajectory\"e\n\tClassType\022\013\n\007UNKNOWN\020\000\022\007\n\003CA"
      "R\020\001\022\017\n\013BIG_VEHICLE\020\002\022\016\n\nPEDESTRIAN\020\003\022\013\n\007"
      "BICYCLE\020\004\022\010\n\004CONE\020\005\022\n\n\006ANIMAL\020\006\"Y\n\014Motio"
      "nStatus\022\022\n\016UNKNOWN_MOTION\020\000\022\n\n\006MOVING\020\001\022"
      "\016\n\nSTATIONARY\020\002\022\014\n\010ONCOMING\020\003\022\013\n\007STOPPED"
      "\020\004\"\207\001\n\016MeasuredSource\022\022\n\016UNKNOWN_SOURCE\020"
      "\000\022\n\n\006FUSION\020\001\022\020\n\014LIDAR_CAMERA\020\002\022\017\n\013LIDAR"
      "_RADAR\020\003\022\020\n\014CAMERA_RADAR\020\004\022\t\n\005LIDAR\020\005\022\n\n"
      "\006CAMERA\020\006\022\t\n\005RADAR\020\007\":\n\tMeasState\022\013\n\007DEL"
      "ETED\020\000\022\007\n\003NEW\020\001\022\n\n\006UPDATE\020\002\022\013\n\007PREDICT\020\003"
      "\"_\n\010ObjFrame\022(\n\006header\030\001 \001(\0132\030.calmpilot"
      ".fusion.Header\022)\n\007objects\030\002 \003(\0132\030.calmpi"
      "lot.fusion.Object*M\n\014LatIntention\022\020\n\014LAN"
      "E_KEEPING\020\000\022\024\n\020LEFT_LANE_CHANGE\020\001\022\025\n\021RIG"
      "HT_LANE_CHANGE\020\002*B\n\rLongIntention\022\022\n\016NOR"
      "MAL_DRIVING\020\000\022\013\n\007BRAKING\020\001\022\020\n\014ACCELERATI"
      "NG\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fusion_od.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_fusion_5fod_2eproto
namespace calmpilot {
namespace fusion {
const ::google::protobuf::EnumDescriptor* Object_ClassType_descriptor() {
  protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fusion_5fod_2eproto::file_level_enum_descriptors[0];
}
bool Object_ClassType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Object_ClassType Object::UNKNOWN;
const Object_ClassType Object::CAR;
const Object_ClassType Object::BIG_VEHICLE;
const Object_ClassType Object::PEDESTRIAN;
const Object_ClassType Object::BICYCLE;
const Object_ClassType Object::CONE;
const Object_ClassType Object::ANIMAL;
const Object_ClassType Object::ClassType_MIN;
const Object_ClassType Object::ClassType_MAX;
const int Object::ClassType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Object_MotionStatus_descriptor() {
  protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fusion_5fod_2eproto::file_level_enum_descriptors[1];
}
bool Object_MotionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Object_MotionStatus Object::UNKNOWN_MOTION;
const Object_MotionStatus Object::MOVING;
const Object_MotionStatus Object::STATIONARY;
const Object_MotionStatus Object::ONCOMING;
const Object_MotionStatus Object::STOPPED;
const Object_MotionStatus Object::MotionStatus_MIN;
const Object_MotionStatus Object::MotionStatus_MAX;
const int Object::MotionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Object_MeasuredSource_descriptor() {
  protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fusion_5fod_2eproto::file_level_enum_descriptors[2];
}
bool Object_MeasuredSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Object_MeasuredSource Object::UNKNOWN_SOURCE;
const Object_MeasuredSource Object::FUSION;
const Object_MeasuredSource Object::LIDAR_CAMERA;
const Object_MeasuredSource Object::LIDAR_RADAR;
const Object_MeasuredSource Object::CAMERA_RADAR;
const Object_MeasuredSource Object::LIDAR;
const Object_MeasuredSource Object::CAMERA;
const Object_MeasuredSource Object::RADAR;
const Object_MeasuredSource Object::MeasuredSource_MIN;
const Object_MeasuredSource Object::MeasuredSource_MAX;
const int Object::MeasuredSource_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Object_MeasState_descriptor() {
  protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fusion_5fod_2eproto::file_level_enum_descriptors[3];
}
bool Object_MeasState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Object_MeasState Object::DELETED;
const Object_MeasState Object::NEW;
const Object_MeasState Object::UPDATE;
const Object_MeasState Object::PREDICT;
const Object_MeasState Object::MeasState_MIN;
const Object_MeasState Object::MeasState_MAX;
const int Object::MeasState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LatIntention_descriptor() {
  protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fusion_5fod_2eproto::file_level_enum_descriptors[4];
}
bool LatIntention_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LongIntention_descriptor() {
  protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fusion_5fod_2eproto::file_level_enum_descriptors[5];
}
bool LongIntention_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kTimestampFieldNumber;
const int Header::kRollingCounterFieldNumber;
const int Header::kObjNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fusion_5fod_2eproto::scc_info_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmpilot.fusion.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&obj_num_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(obj_num_));
  // @@protoc_insertion_point(copy_constructor:calmpilot.fusion.Header)
}

void Header::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_num_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(obj_num_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:calmpilot.fusion.Header)
  SharedDtor();
}

void Header::SharedDtor() {
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fod_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fusion_5fod_2eproto::scc_info_Header.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:calmpilot.fusion.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_num_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(obj_num_));
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmpilot.fusion.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rolling_counter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolling_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 obj_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmpilot.fusion.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmpilot.fusion.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmpilot.fusion.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rolling_counter(), output);
  }

  // uint32 obj_num = 3;
  if (this->obj_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->obj_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmpilot.fusion.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmpilot.fusion.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rolling_counter(), target);
  }

  // uint32 obj_num = 3;
  if (this->obj_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->obj_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmpilot.fusion.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmpilot.fusion.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rolling_counter());
  }

  // uint32 obj_num = 3;
  if (this->obj_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->obj_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmpilot.fusion.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmpilot.fusion.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmpilot.fusion.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmpilot.fusion.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.rolling_counter() != 0) {
    set_rolling_counter(from.rolling_counter());
  }
  if (from.obj_num() != 0) {
    set_obj_num(from.obj_num());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmpilot.fusion.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmpilot.fusion.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(rolling_counter_, other->rolling_counter_);
  swap(obj_num_, other->obj_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fod_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vector3d::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3d::kXFieldNumber;
const int Vector3d::kYFieldNumber;
const int Vector3d::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3d::Vector3d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fusion_5fod_2eproto::scc_info_Vector3d.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmpilot.fusion.Vector3d)
}
Vector3d::Vector3d(const Vector3d& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:calmpilot.fusion.Vector3d)
}

void Vector3d::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3d::~Vector3d() {
  // @@protoc_insertion_point(destructor:calmpilot.fusion.Vector3d)
  SharedDtor();
}

void Vector3d::SharedDtor() {
}

void Vector3d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Vector3d::descriptor() {
  ::protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fod_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector3d& Vector3d::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fusion_5fod_2eproto::scc_info_Vector3d.base);
  return *internal_default_instance();
}


void Vector3d::Clear() {
// @@protoc_insertion_point(message_clear_start:calmpilot.fusion.Vector3d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Vector3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmpilot.fusion.Vector3d)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmpilot.fusion.Vector3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmpilot.fusion.Vector3d)
  return false;
#undef DO_
}

void Vector3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmpilot.fusion.Vector3d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmpilot.fusion.Vector3d)
}

::google::protobuf::uint8* Vector3d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmpilot.fusion.Vector3d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmpilot.fusion.Vector3d)
  return target;
}

size_t Vector3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmpilot.fusion.Vector3d)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmpilot.fusion.Vector3d)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3d* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmpilot.fusion.Vector3d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmpilot.fusion.Vector3d)
    MergeFrom(*source);
  }
}

void Vector3d::MergeFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmpilot.fusion.Vector3d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmpilot.fusion.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3d::CopyFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmpilot.fusion.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3d::IsInitialized() const {
  return true;
}

void Vector3d::Swap(Vector3d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3d::InternalSwap(Vector3d* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Vector3d::GetMetadata() const {
  protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fod_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PredictTrajectory_Intention::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictTrajectory_Intention::kLatIntentionFieldNumber;
const int PredictTrajectory_Intention::kLongIntentionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictTrajectory_Intention::PredictTrajectory_Intention()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fusion_5fod_2eproto::scc_info_PredictTrajectory_Intention.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmpilot.fusion.PredictTrajectory.Intention)
}
PredictTrajectory_Intention::PredictTrajectory_Intention(const PredictTrajectory_Intention& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lat_intention_, &from.lat_intention_,
    static_cast<size_t>(reinterpret_cast<char*>(&long_intention_) -
    reinterpret_cast<char*>(&lat_intention_)) + sizeof(long_intention_));
  // @@protoc_insertion_point(copy_constructor:calmpilot.fusion.PredictTrajectory.Intention)
}

void PredictTrajectory_Intention::SharedCtor() {
  ::memset(&lat_intention_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&long_intention_) -
      reinterpret_cast<char*>(&lat_intention_)) + sizeof(long_intention_));
}

PredictTrajectory_Intention::~PredictTrajectory_Intention() {
  // @@protoc_insertion_point(destructor:calmpilot.fusion.PredictTrajectory.Intention)
  SharedDtor();
}

void PredictTrajectory_Intention::SharedDtor() {
}

void PredictTrajectory_Intention::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PredictTrajectory_Intention::descriptor() {
  ::protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fod_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PredictTrajectory_Intention& PredictTrajectory_Intention::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fusion_5fod_2eproto::scc_info_PredictTrajectory_Intention.base);
  return *internal_default_instance();
}


void PredictTrajectory_Intention::Clear() {
// @@protoc_insertion_point(message_clear_start:calmpilot.fusion.PredictTrajectory.Intention)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_intention_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&long_intention_) -
      reinterpret_cast<char*>(&lat_intention_)) + sizeof(long_intention_));
  _internal_metadata_.Clear();
}

bool PredictTrajectory_Intention::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmpilot.fusion.PredictTrajectory.Intention)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmpilot.fusion.LatIntention lat_intention = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lat_intention(static_cast< ::calmpilot::fusion::LatIntention >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.LongIntention long_intention = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_long_intention(static_cast< ::calmpilot::fusion::LongIntention >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmpilot.fusion.PredictTrajectory.Intention)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmpilot.fusion.PredictTrajectory.Intention)
  return false;
#undef DO_
}

void PredictTrajectory_Intention::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmpilot.fusion.PredictTrajectory.Intention)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmpilot.fusion.LatIntention lat_intention = 1;
  if (this->lat_intention() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->lat_intention(), output);
  }

  // .calmpilot.fusion.LongIntention long_intention = 2;
  if (this->long_intention() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->long_intention(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmpilot.fusion.PredictTrajectory.Intention)
}

::google::protobuf::uint8* PredictTrajectory_Intention::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmpilot.fusion.PredictTrajectory.Intention)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmpilot.fusion.LatIntention lat_intention = 1;
  if (this->lat_intention() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->lat_intention(), target);
  }

  // .calmpilot.fusion.LongIntention long_intention = 2;
  if (this->long_intention() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->long_intention(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmpilot.fusion.PredictTrajectory.Intention)
  return target;
}

size_t PredictTrajectory_Intention::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmpilot.fusion.PredictTrajectory.Intention)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .calmpilot.fusion.LatIntention lat_intention = 1;
  if (this->lat_intention() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lat_intention());
  }

  // .calmpilot.fusion.LongIntention long_intention = 2;
  if (this->long_intention() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->long_intention());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictTrajectory_Intention::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmpilot.fusion.PredictTrajectory.Intention)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictTrajectory_Intention* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictTrajectory_Intention>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmpilot.fusion.PredictTrajectory.Intention)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmpilot.fusion.PredictTrajectory.Intention)
    MergeFrom(*source);
  }
}

void PredictTrajectory_Intention::MergeFrom(const PredictTrajectory_Intention& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmpilot.fusion.PredictTrajectory.Intention)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lat_intention() != 0) {
    set_lat_intention(from.lat_intention());
  }
  if (from.long_intention() != 0) {
    set_long_intention(from.long_intention());
  }
}

void PredictTrajectory_Intention::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmpilot.fusion.PredictTrajectory.Intention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictTrajectory_Intention::CopyFrom(const PredictTrajectory_Intention& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmpilot.fusion.PredictTrajectory.Intention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictTrajectory_Intention::IsInitialized() const {
  return true;
}

void PredictTrajectory_Intention::Swap(PredictTrajectory_Intention* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictTrajectory_Intention::InternalSwap(PredictTrajectory_Intention* other) {
  using std::swap;
  swap(lat_intention_, other->lat_intention_);
  swap(long_intention_, other->long_intention_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PredictTrajectory_Intention::GetMetadata() const {
  protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fod_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PredictTrajectory_TrajPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictTrajectory_TrajPoint::kDistLongFieldNumber;
const int PredictTrajectory_TrajPoint::kDistLatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictTrajectory_TrajPoint::PredictTrajectory_TrajPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fusion_5fod_2eproto::scc_info_PredictTrajectory_TrajPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmpilot.fusion.PredictTrajectory.TrajPoint)
}
PredictTrajectory_TrajPoint::PredictTrajectory_TrajPoint(const PredictTrajectory_TrajPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dist_long_, &from.dist_long_,
    static_cast<size_t>(reinterpret_cast<char*>(&dist_lat_) -
    reinterpret_cast<char*>(&dist_long_)) + sizeof(dist_lat_));
  // @@protoc_insertion_point(copy_constructor:calmpilot.fusion.PredictTrajectory.TrajPoint)
}

void PredictTrajectory_TrajPoint::SharedCtor() {
  ::memset(&dist_long_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dist_lat_) -
      reinterpret_cast<char*>(&dist_long_)) + sizeof(dist_lat_));
}

PredictTrajectory_TrajPoint::~PredictTrajectory_TrajPoint() {
  // @@protoc_insertion_point(destructor:calmpilot.fusion.PredictTrajectory.TrajPoint)
  SharedDtor();
}

void PredictTrajectory_TrajPoint::SharedDtor() {
}

void PredictTrajectory_TrajPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PredictTrajectory_TrajPoint::descriptor() {
  ::protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fod_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PredictTrajectory_TrajPoint& PredictTrajectory_TrajPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fusion_5fod_2eproto::scc_info_PredictTrajectory_TrajPoint.base);
  return *internal_default_instance();
}


void PredictTrajectory_TrajPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:calmpilot.fusion.PredictTrajectory.TrajPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dist_long_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dist_lat_) -
      reinterpret_cast<char*>(&dist_long_)) + sizeof(dist_lat_));
  _internal_metadata_.Clear();
}

bool PredictTrajectory_TrajPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmpilot.fusion.PredictTrajectory.TrajPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double dist_long = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_long_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dist_lat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmpilot.fusion.PredictTrajectory.TrajPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmpilot.fusion.PredictTrajectory.TrajPoint)
  return false;
#undef DO_
}

void PredictTrajectory_TrajPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmpilot.fusion.PredictTrajectory.TrajPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dist_long = 1;
  if (this->dist_long() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dist_long(), output);
  }

  // double dist_lat = 2;
  if (this->dist_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dist_lat(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmpilot.fusion.PredictTrajectory.TrajPoint)
}

::google::protobuf::uint8* PredictTrajectory_TrajPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmpilot.fusion.PredictTrajectory.TrajPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dist_long = 1;
  if (this->dist_long() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dist_long(), target);
  }

  // double dist_lat = 2;
  if (this->dist_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dist_lat(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmpilot.fusion.PredictTrajectory.TrajPoint)
  return target;
}

size_t PredictTrajectory_TrajPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmpilot.fusion.PredictTrajectory.TrajPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double dist_long = 1;
  if (this->dist_long() != 0) {
    total_size += 1 + 8;
  }

  // double dist_lat = 2;
  if (this->dist_lat() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictTrajectory_TrajPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmpilot.fusion.PredictTrajectory.TrajPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictTrajectory_TrajPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictTrajectory_TrajPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmpilot.fusion.PredictTrajectory.TrajPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmpilot.fusion.PredictTrajectory.TrajPoint)
    MergeFrom(*source);
  }
}

void PredictTrajectory_TrajPoint::MergeFrom(const PredictTrajectory_TrajPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmpilot.fusion.PredictTrajectory.TrajPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dist_long() != 0) {
    set_dist_long(from.dist_long());
  }
  if (from.dist_lat() != 0) {
    set_dist_lat(from.dist_lat());
  }
}

void PredictTrajectory_TrajPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmpilot.fusion.PredictTrajectory.TrajPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictTrajectory_TrajPoint::CopyFrom(const PredictTrajectory_TrajPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmpilot.fusion.PredictTrajectory.TrajPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictTrajectory_TrajPoint::IsInitialized() const {
  return true;
}

void PredictTrajectory_TrajPoint::Swap(PredictTrajectory_TrajPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictTrajectory_TrajPoint::InternalSwap(PredictTrajectory_TrajPoint* other) {
  using std::swap;
  swap(dist_long_, other->dist_long_);
  swap(dist_lat_, other->dist_lat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PredictTrajectory_TrajPoint::GetMetadata() const {
  protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fod_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PredictTrajectory::InitAsDefaultInstance() {
  ::calmpilot::fusion::_PredictTrajectory_default_instance_._instance.get_mutable()->intention_ = const_cast< ::calmpilot::fusion::PredictTrajectory_Intention*>(
      ::calmpilot::fusion::PredictTrajectory_Intention::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictTrajectory::kIntentionFieldNumber;
const int PredictTrajectory::kTrajPointsFieldNumber;
const int PredictTrajectory::kProbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictTrajectory::PredictTrajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fusion_5fod_2eproto::scc_info_PredictTrajectory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmpilot.fusion.PredictTrajectory)
}
PredictTrajectory::PredictTrajectory(const PredictTrajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      traj_points_(from.traj_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_intention()) {
    intention_ = new ::calmpilot::fusion::PredictTrajectory_Intention(*from.intention_);
  } else {
    intention_ = NULL;
  }
  prob_ = from.prob_;
  // @@protoc_insertion_point(copy_constructor:calmpilot.fusion.PredictTrajectory)
}

void PredictTrajectory::SharedCtor() {
  ::memset(&intention_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prob_) -
      reinterpret_cast<char*>(&intention_)) + sizeof(prob_));
}

PredictTrajectory::~PredictTrajectory() {
  // @@protoc_insertion_point(destructor:calmpilot.fusion.PredictTrajectory)
  SharedDtor();
}

void PredictTrajectory::SharedDtor() {
  if (this != internal_default_instance()) delete intention_;
}

void PredictTrajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PredictTrajectory::descriptor() {
  ::protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fod_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PredictTrajectory& PredictTrajectory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fusion_5fod_2eproto::scc_info_PredictTrajectory.base);
  return *internal_default_instance();
}


void PredictTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:calmpilot.fusion.PredictTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traj_points_.Clear();
  if (GetArenaNoVirtual() == NULL && intention_ != NULL) {
    delete intention_;
  }
  intention_ = NULL;
  prob_ = 0;
  _internal_metadata_.Clear();
}

bool PredictTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmpilot.fusion.PredictTrajectory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmpilot.fusion.PredictTrajectory.Intention intention = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intention()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmpilot.fusion.PredictTrajectory.TrajPoint traj_points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_traj_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double prob = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmpilot.fusion.PredictTrajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmpilot.fusion.PredictTrajectory)
  return false;
#undef DO_
}

void PredictTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmpilot.fusion.PredictTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmpilot.fusion.PredictTrajectory.Intention intention = 1;
  if (this->has_intention()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_intention(), output);
  }

  // repeated .calmpilot.fusion.PredictTrajectory.TrajPoint traj_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traj_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->traj_points(static_cast<int>(i)),
      output);
  }

  // double prob = 3;
  if (this->prob() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->prob(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmpilot.fusion.PredictTrajectory)
}

::google::protobuf::uint8* PredictTrajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmpilot.fusion.PredictTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmpilot.fusion.PredictTrajectory.Intention intention = 1;
  if (this->has_intention()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_intention(), deterministic, target);
  }

  // repeated .calmpilot.fusion.PredictTrajectory.TrajPoint traj_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traj_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->traj_points(static_cast<int>(i)), deterministic, target);
  }

  // double prob = 3;
  if (this->prob() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->prob(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmpilot.fusion.PredictTrajectory)
  return target;
}

size_t PredictTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmpilot.fusion.PredictTrajectory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmpilot.fusion.PredictTrajectory.TrajPoint traj_points = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->traj_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traj_points(static_cast<int>(i)));
    }
  }

  // .calmpilot.fusion.PredictTrajectory.Intention intention = 1;
  if (this->has_intention()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *intention_);
  }

  // double prob = 3;
  if (this->prob() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmpilot.fusion.PredictTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictTrajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictTrajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmpilot.fusion.PredictTrajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmpilot.fusion.PredictTrajectory)
    MergeFrom(*source);
  }
}

void PredictTrajectory::MergeFrom(const PredictTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmpilot.fusion.PredictTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traj_points_.MergeFrom(from.traj_points_);
  if (from.has_intention()) {
    mutable_intention()->::calmpilot::fusion::PredictTrajectory_Intention::MergeFrom(from.intention());
  }
  if (from.prob() != 0) {
    set_prob(from.prob());
  }
}

void PredictTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmpilot.fusion.PredictTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictTrajectory::CopyFrom(const PredictTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmpilot.fusion.PredictTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictTrajectory::IsInitialized() const {
  return true;
}

void PredictTrajectory::Swap(PredictTrajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictTrajectory::InternalSwap(PredictTrajectory* other) {
  using std::swap;
  CastToBase(&traj_points_)->InternalSwap(CastToBase(&other->traj_points_));
  swap(intention_, other->intention_);
  swap(prob_, other->prob_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PredictTrajectory::GetMetadata() const {
  protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fod_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Object::InitAsDefaultInstance() {
  ::calmpilot::fusion::_Object_default_instance_._instance.get_mutable()->center_ = const_cast< ::calmpilot::fusion::Vector3d*>(
      ::calmpilot::fusion::Vector3d::internal_default_instance());
  ::calmpilot::fusion::_Object_default_instance_._instance.get_mutable()->center_rms_ = const_cast< ::calmpilot::fusion::Vector3d*>(
      ::calmpilot::fusion::Vector3d::internal_default_instance());
  ::calmpilot::fusion::_Object_default_instance_._instance.get_mutable()->vrel_ = const_cast< ::calmpilot::fusion::Vector3d*>(
      ::calmpilot::fusion::Vector3d::internal_default_instance());
  ::calmpilot::fusion::_Object_default_instance_._instance.get_mutable()->vrel_rms_ = const_cast< ::calmpilot::fusion::Vector3d*>(
      ::calmpilot::fusion::Vector3d::internal_default_instance());
  ::calmpilot::fusion::_Object_default_instance_._instance.get_mutable()->arel_ = const_cast< ::calmpilot::fusion::Vector3d*>(
      ::calmpilot::fusion::Vector3d::internal_default_instance());
  ::calmpilot::fusion::_Object_default_instance_._instance.get_mutable()->arel_rms_ = const_cast< ::calmpilot::fusion::Vector3d*>(
      ::calmpilot::fusion::Vector3d::internal_default_instance());
  ::calmpilot::fusion::_Object_default_instance_._instance.get_mutable()->abs_vel_ = const_cast< ::calmpilot::fusion::Vector3d*>(
      ::calmpilot::fusion::Vector3d::internal_default_instance());
  ::calmpilot::fusion::_Object_default_instance_._instance.get_mutable()->abs_vel_rms_ = const_cast< ::calmpilot::fusion::Vector3d*>(
      ::calmpilot::fusion::Vector3d::internal_default_instance());
  ::calmpilot::fusion::_Object_default_instance_._instance.get_mutable()->size_ = const_cast< ::calmpilot::fusion::Vector3d*>(
      ::calmpilot::fusion::Vector3d::internal_default_instance());
  ::calmpilot::fusion::_Object_default_instance_._instance.get_mutable()->size_rms_ = const_cast< ::calmpilot::fusion::Vector3d*>(
      ::calmpilot::fusion::Vector3d::internal_default_instance());
  ::calmpilot::fusion::_Object_default_instance_._instance.get_mutable()->corner_left_front_ = const_cast< ::calmpilot::fusion::Vector3d*>(
      ::calmpilot::fusion::Vector3d::internal_default_instance());
  ::calmpilot::fusion::_Object_default_instance_._instance.get_mutable()->corner_right_front_ = const_cast< ::calmpilot::fusion::Vector3d*>(
      ::calmpilot::fusion::Vector3d::internal_default_instance());
  ::calmpilot::fusion::_Object_default_instance_._instance.get_mutable()->corner_left_rear_ = const_cast< ::calmpilot::fusion::Vector3d*>(
      ::calmpilot::fusion::Vector3d::internal_default_instance());
  ::calmpilot::fusion::_Object_default_instance_._instance.get_mutable()->corner_right_rear_ = const_cast< ::calmpilot::fusion::Vector3d*>(
      ::calmpilot::fusion::Vector3d::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kObjIdFieldNumber;
const int Object::kLifeTimeFieldNumber;
const int Object::kConfidenceFieldNumber;
const int Object::kClassTypeFieldNumber;
const int Object::kClassTypeConfidenceFieldNumber;
const int Object::kCenterFieldNumber;
const int Object::kCenterRmsFieldNumber;
const int Object::kVrelFieldNumber;
const int Object::kVrelRmsFieldNumber;
const int Object::kArelFieldNumber;
const int Object::kArelRmsFieldNumber;
const int Object::kAbsVelFieldNumber;
const int Object::kAbsVelRmsFieldNumber;
const int Object::kSizeFieldNumber;
const int Object::kSizeRmsFieldNumber;
const int Object::kCornerLeftFrontFieldNumber;
const int Object::kCornerRightFrontFieldNumber;
const int Object::kCornerLeftRearFieldNumber;
const int Object::kCornerRightRearFieldNumber;
const int Object::kOrientationAngleFieldNumber;
const int Object::kOrientationRmsFieldNumber;
const int Object::kMotionStatusFieldNumber;
const int Object::kMotionStatusConfidenceFieldNumber;
const int Object::kMeasuredSourceFieldNumber;
const int Object::kMeasStateFieldNumber;
const int Object::kTrajectoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fusion_5fod_2eproto::scc_info_Object.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmpilot.fusion.Object)
}
Object::Object(const Object& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      motion_status_(from.motion_status_),
      motion_status_confidence_(from.motion_status_confidence_),
      trajectories_(from.trajectories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center()) {
    center_ = new ::calmpilot::fusion::Vector3d(*from.center_);
  } else {
    center_ = NULL;
  }
  if (from.has_center_rms()) {
    center_rms_ = new ::calmpilot::fusion::Vector3d(*from.center_rms_);
  } else {
    center_rms_ = NULL;
  }
  if (from.has_vrel()) {
    vrel_ = new ::calmpilot::fusion::Vector3d(*from.vrel_);
  } else {
    vrel_ = NULL;
  }
  if (from.has_vrel_rms()) {
    vrel_rms_ = new ::calmpilot::fusion::Vector3d(*from.vrel_rms_);
  } else {
    vrel_rms_ = NULL;
  }
  if (from.has_arel()) {
    arel_ = new ::calmpilot::fusion::Vector3d(*from.arel_);
  } else {
    arel_ = NULL;
  }
  if (from.has_arel_rms()) {
    arel_rms_ = new ::calmpilot::fusion::Vector3d(*from.arel_rms_);
  } else {
    arel_rms_ = NULL;
  }
  if (from.has_abs_vel()) {
    abs_vel_ = new ::calmpilot::fusion::Vector3d(*from.abs_vel_);
  } else {
    abs_vel_ = NULL;
  }
  if (from.has_abs_vel_rms()) {
    abs_vel_rms_ = new ::calmpilot::fusion::Vector3d(*from.abs_vel_rms_);
  } else {
    abs_vel_rms_ = NULL;
  }
  if (from.has_size()) {
    size_ = new ::calmpilot::fusion::Vector3d(*from.size_);
  } else {
    size_ = NULL;
  }
  if (from.has_size_rms()) {
    size_rms_ = new ::calmpilot::fusion::Vector3d(*from.size_rms_);
  } else {
    size_rms_ = NULL;
  }
  if (from.has_corner_left_front()) {
    corner_left_front_ = new ::calmpilot::fusion::Vector3d(*from.corner_left_front_);
  } else {
    corner_left_front_ = NULL;
  }
  if (from.has_corner_right_front()) {
    corner_right_front_ = new ::calmpilot::fusion::Vector3d(*from.corner_right_front_);
  } else {
    corner_right_front_ = NULL;
  }
  if (from.has_corner_left_rear()) {
    corner_left_rear_ = new ::calmpilot::fusion::Vector3d(*from.corner_left_rear_);
  } else {
    corner_left_rear_ = NULL;
  }
  if (from.has_corner_right_rear()) {
    corner_right_rear_ = new ::calmpilot::fusion::Vector3d(*from.corner_right_rear_);
  } else {
    corner_right_rear_ = NULL;
  }
  ::memcpy(&life_time_, &from.life_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&meas_state_) -
    reinterpret_cast<char*>(&life_time_)) + sizeof(meas_state_));
  // @@protoc_insertion_point(copy_constructor:calmpilot.fusion.Object)
}

void Object::SharedCtor() {
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meas_state_) -
      reinterpret_cast<char*>(&center_)) + sizeof(meas_state_));
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:calmpilot.fusion.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete center_rms_;
  if (this != internal_default_instance()) delete vrel_;
  if (this != internal_default_instance()) delete vrel_rms_;
  if (this != internal_default_instance()) delete arel_;
  if (this != internal_default_instance()) delete arel_rms_;
  if (this != internal_default_instance()) delete abs_vel_;
  if (this != internal_default_instance()) delete abs_vel_rms_;
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete size_rms_;
  if (this != internal_default_instance()) delete corner_left_front_;
  if (this != internal_default_instance()) delete corner_right_front_;
  if (this != internal_default_instance()) delete corner_left_rear_;
  if (this != internal_default_instance()) delete corner_right_rear_;
}

void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  ::protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fod_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Object& Object::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fusion_5fod_2eproto::scc_info_Object.base);
  return *internal_default_instance();
}


void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:calmpilot.fusion.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  motion_status_.Clear();
  motion_status_confidence_.Clear();
  trajectories_.Clear();
  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
  if (GetArenaNoVirtual() == NULL && center_rms_ != NULL) {
    delete center_rms_;
  }
  center_rms_ = NULL;
  if (GetArenaNoVirtual() == NULL && vrel_ != NULL) {
    delete vrel_;
  }
  vrel_ = NULL;
  if (GetArenaNoVirtual() == NULL && vrel_rms_ != NULL) {
    delete vrel_rms_;
  }
  vrel_rms_ = NULL;
  if (GetArenaNoVirtual() == NULL && arel_ != NULL) {
    delete arel_;
  }
  arel_ = NULL;
  if (GetArenaNoVirtual() == NULL && arel_rms_ != NULL) {
    delete arel_rms_;
  }
  arel_rms_ = NULL;
  if (GetArenaNoVirtual() == NULL && abs_vel_ != NULL) {
    delete abs_vel_;
  }
  abs_vel_ = NULL;
  if (GetArenaNoVirtual() == NULL && abs_vel_rms_ != NULL) {
    delete abs_vel_rms_;
  }
  abs_vel_rms_ = NULL;
  if (GetArenaNoVirtual() == NULL && size_ != NULL) {
    delete size_;
  }
  size_ = NULL;
  if (GetArenaNoVirtual() == NULL && size_rms_ != NULL) {
    delete size_rms_;
  }
  size_rms_ = NULL;
  if (GetArenaNoVirtual() == NULL && corner_left_front_ != NULL) {
    delete corner_left_front_;
  }
  corner_left_front_ = NULL;
  if (GetArenaNoVirtual() == NULL && corner_right_front_ != NULL) {
    delete corner_right_front_;
  }
  corner_right_front_ = NULL;
  if (GetArenaNoVirtual() == NULL && corner_left_rear_ != NULL) {
    delete corner_left_rear_;
  }
  corner_left_rear_ = NULL;
  if (GetArenaNoVirtual() == NULL && corner_right_rear_ != NULL) {
    delete corner_right_rear_;
  }
  corner_right_rear_ = NULL;
  ::memset(&life_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meas_state_) -
      reinterpret_cast<char*>(&life_time_)) + sizeof(meas_state_));
  _internal_metadata_.Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmpilot.fusion.Object)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 obj_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 life_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &life_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double confidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.Object.ClassType class_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_class_type(static_cast< ::calmpilot::fusion::Object_ClassType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double class_type_confidence = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &class_type_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.Vector3d center = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.Vector3d center_rms = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center_rms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.Vector3d vrel = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vrel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.Vector3d vrel_rms = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vrel_rms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.Vector3d arel = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_arel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.Vector3d arel_rms = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_arel_rms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.Vector3d abs_vel = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_abs_vel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.Vector3d abs_vel_rms = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_abs_vel_rms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.Vector3d size = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.Vector3d size_rms = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_size_rms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.Vector3d corner_left_front = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_corner_left_front()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.Vector3d corner_right_front = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_corner_right_front()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.Vector3d corner_left_rear = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_corner_left_rear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.Vector3d corner_right_rear = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_corner_right_rear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double orientation_angle = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientation_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double orientation_rms = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientation_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmpilot.fusion.Object.MotionStatus motion_status = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_motion_status(static_cast< ::calmpilot::fusion::Object_MotionStatus >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_motion_status(static_cast< ::calmpilot::fusion::Object_MotionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double motion_status_confidence = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_motion_status_confidence())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 186u, input, this->mutable_motion_status_confidence())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.Object.MeasuredSource measured_source = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_measured_source(static_cast< ::calmpilot::fusion::Object_MeasuredSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmpilot.fusion.Object.MeasState meas_state = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_meas_state(static_cast< ::calmpilot::fusion::Object_MeasState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmpilot.fusion.PredictTrajectory trajectories = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trajectories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmpilot.fusion.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmpilot.fusion.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmpilot.fusion.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 obj_id = 1;
  if (this->obj_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->obj_id(), output);
  }

  // uint64 life_time = 2;
  if (this->life_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->life_time(), output);
  }

  // double confidence = 3;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->confidence(), output);
  }

  // .calmpilot.fusion.Object.ClassType class_type = 4;
  if (this->class_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->class_type(), output);
  }

  // double class_type_confidence = 5;
  if (this->class_type_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->class_type_confidence(), output);
  }

  // .calmpilot.fusion.Vector3d center = 6;
  if (this->has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_center(), output);
  }

  // .calmpilot.fusion.Vector3d center_rms = 7;
  if (this->has_center_rms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_center_rms(), output);
  }

  // .calmpilot.fusion.Vector3d vrel = 8;
  if (this->has_vrel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_vrel(), output);
  }

  // .calmpilot.fusion.Vector3d vrel_rms = 9;
  if (this->has_vrel_rms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_vrel_rms(), output);
  }

  // .calmpilot.fusion.Vector3d arel = 10;
  if (this->has_arel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_arel(), output);
  }

  // .calmpilot.fusion.Vector3d arel_rms = 11;
  if (this->has_arel_rms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_arel_rms(), output);
  }

  // .calmpilot.fusion.Vector3d abs_vel = 12;
  if (this->has_abs_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_abs_vel(), output);
  }

  // .calmpilot.fusion.Vector3d abs_vel_rms = 13;
  if (this->has_abs_vel_rms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_abs_vel_rms(), output);
  }

  // .calmpilot.fusion.Vector3d size = 14;
  if (this->has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_size(), output);
  }

  // .calmpilot.fusion.Vector3d size_rms = 15;
  if (this->has_size_rms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_size_rms(), output);
  }

  // .calmpilot.fusion.Vector3d corner_left_front = 16;
  if (this->has_corner_left_front()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_corner_left_front(), output);
  }

  // .calmpilot.fusion.Vector3d corner_right_front = 17;
  if (this->has_corner_right_front()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_corner_right_front(), output);
  }

  // .calmpilot.fusion.Vector3d corner_left_rear = 18;
  if (this->has_corner_left_rear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_corner_left_rear(), output);
  }

  // .calmpilot.fusion.Vector3d corner_right_rear = 19;
  if (this->has_corner_right_rear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_corner_right_rear(), output);
  }

  // double orientation_angle = 20;
  if (this->orientation_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->orientation_angle(), output);
  }

  // double orientation_rms = 21;
  if (this->orientation_rms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->orientation_rms(), output);
  }

  // repeated .calmpilot.fusion.Object.MotionStatus motion_status = 22;
  if (this->motion_status_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      22,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_motion_status_cached_byte_size_));
  }
  for (int i = 0, n = this->motion_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->motion_status(i), output);
  }

  // repeated double motion_status_confidence = 23;
  if (this->motion_status_confidence_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(23, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _motion_status_confidence_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->motion_status_confidence().data(), this->motion_status_confidence_size(), output);
  }

  // .calmpilot.fusion.Object.MeasuredSource measured_source = 24;
  if (this->measured_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->measured_source(), output);
  }

  // .calmpilot.fusion.Object.MeasState meas_state = 25;
  if (this->meas_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->meas_state(), output);
  }

  // repeated .calmpilot.fusion.PredictTrajectory trajectories = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectories_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26,
      this->trajectories(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmpilot.fusion.Object)
}

::google::protobuf::uint8* Object::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmpilot.fusion.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 obj_id = 1;
  if (this->obj_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->obj_id(), target);
  }

  // uint64 life_time = 2;
  if (this->life_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->life_time(), target);
  }

  // double confidence = 3;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->confidence(), target);
  }

  // .calmpilot.fusion.Object.ClassType class_type = 4;
  if (this->class_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->class_type(), target);
  }

  // double class_type_confidence = 5;
  if (this->class_type_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->class_type_confidence(), target);
  }

  // .calmpilot.fusion.Vector3d center = 6;
  if (this->has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_center(), deterministic, target);
  }

  // .calmpilot.fusion.Vector3d center_rms = 7;
  if (this->has_center_rms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_center_rms(), deterministic, target);
  }

  // .calmpilot.fusion.Vector3d vrel = 8;
  if (this->has_vrel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_vrel(), deterministic, target);
  }

  // .calmpilot.fusion.Vector3d vrel_rms = 9;
  if (this->has_vrel_rms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_vrel_rms(), deterministic, target);
  }

  // .calmpilot.fusion.Vector3d arel = 10;
  if (this->has_arel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_arel(), deterministic, target);
  }

  // .calmpilot.fusion.Vector3d arel_rms = 11;
  if (this->has_arel_rms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_arel_rms(), deterministic, target);
  }

  // .calmpilot.fusion.Vector3d abs_vel = 12;
  if (this->has_abs_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_abs_vel(), deterministic, target);
  }

  // .calmpilot.fusion.Vector3d abs_vel_rms = 13;
  if (this->has_abs_vel_rms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_abs_vel_rms(), deterministic, target);
  }

  // .calmpilot.fusion.Vector3d size = 14;
  if (this->has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_size(), deterministic, target);
  }

  // .calmpilot.fusion.Vector3d size_rms = 15;
  if (this->has_size_rms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_size_rms(), deterministic, target);
  }

  // .calmpilot.fusion.Vector3d corner_left_front = 16;
  if (this->has_corner_left_front()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_corner_left_front(), deterministic, target);
  }

  // .calmpilot.fusion.Vector3d corner_right_front = 17;
  if (this->has_corner_right_front()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_corner_right_front(), deterministic, target);
  }

  // .calmpilot.fusion.Vector3d corner_left_rear = 18;
  if (this->has_corner_left_rear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_corner_left_rear(), deterministic, target);
  }

  // .calmpilot.fusion.Vector3d corner_right_rear = 19;
  if (this->has_corner_right_rear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_corner_right_rear(), deterministic, target);
  }

  // double orientation_angle = 20;
  if (this->orientation_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->orientation_angle(), target);
  }

  // double orientation_rms = 21;
  if (this->orientation_rms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->orientation_rms(), target);
  }

  // repeated .calmpilot.fusion.Object.MotionStatus motion_status = 22;
  if (this->motion_status_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      22,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _motion_status_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->motion_status_, target);
  }

  // repeated double motion_status_confidence = 23;
  if (this->motion_status_confidence_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      23,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _motion_status_confidence_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->motion_status_confidence_, target);
  }

  // .calmpilot.fusion.Object.MeasuredSource measured_source = 24;
  if (this->measured_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->measured_source(), target);
  }

  // .calmpilot.fusion.Object.MeasState meas_state = 25;
  if (this->meas_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->meas_state(), target);
  }

  // repeated .calmpilot.fusion.PredictTrajectory trajectories = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectories_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, this->trajectories(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmpilot.fusion.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmpilot.fusion.Object)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmpilot.fusion.Object.MotionStatus motion_status = 22;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->motion_status_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->motion_status(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _motion_status_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double motion_status_confidence = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->motion_status_confidence_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _motion_status_confidence_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .calmpilot.fusion.PredictTrajectory trajectories = 26;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectories_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trajectories(static_cast<int>(i)));
    }
  }

  // .calmpilot.fusion.Vector3d center = 6;
  if (this->has_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // .calmpilot.fusion.Vector3d center_rms = 7;
  if (this->has_center_rms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_rms_);
  }

  // .calmpilot.fusion.Vector3d vrel = 8;
  if (this->has_vrel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vrel_);
  }

  // .calmpilot.fusion.Vector3d vrel_rms = 9;
  if (this->has_vrel_rms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vrel_rms_);
  }

  // .calmpilot.fusion.Vector3d arel = 10;
  if (this->has_arel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *arel_);
  }

  // .calmpilot.fusion.Vector3d arel_rms = 11;
  if (this->has_arel_rms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *arel_rms_);
  }

  // .calmpilot.fusion.Vector3d abs_vel = 12;
  if (this->has_abs_vel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *abs_vel_);
  }

  // .calmpilot.fusion.Vector3d abs_vel_rms = 13;
  if (this->has_abs_vel_rms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *abs_vel_rms_);
  }

  // .calmpilot.fusion.Vector3d size = 14;
  if (this->has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .calmpilot.fusion.Vector3d size_rms = 15;
  if (this->has_size_rms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *size_rms_);
  }

  // .calmpilot.fusion.Vector3d corner_left_front = 16;
  if (this->has_corner_left_front()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *corner_left_front_);
  }

  // .calmpilot.fusion.Vector3d corner_right_front = 17;
  if (this->has_corner_right_front()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *corner_right_front_);
  }

  // .calmpilot.fusion.Vector3d corner_left_rear = 18;
  if (this->has_corner_left_rear()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *corner_left_rear_);
  }

  // .calmpilot.fusion.Vector3d corner_right_rear = 19;
  if (this->has_corner_right_rear()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *corner_right_rear_);
  }

  // uint64 life_time = 2;
  if (this->life_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->life_time());
  }

  // uint32 obj_id = 1;
  if (this->obj_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->obj_id());
  }

  // .calmpilot.fusion.Object.ClassType class_type = 4;
  if (this->class_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->class_type());
  }

  // double confidence = 3;
  if (this->confidence() != 0) {
    total_size += 1 + 8;
  }

  // double class_type_confidence = 5;
  if (this->class_type_confidence() != 0) {
    total_size += 1 + 8;
  }

  // double orientation_angle = 20;
  if (this->orientation_angle() != 0) {
    total_size += 2 + 8;
  }

  // double orientation_rms = 21;
  if (this->orientation_rms() != 0) {
    total_size += 2 + 8;
  }

  // .calmpilot.fusion.Object.MeasuredSource measured_source = 24;
  if (this->measured_source() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->measured_source());
  }

  // .calmpilot.fusion.Object.MeasState meas_state = 25;
  if (this->meas_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->meas_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmpilot.fusion.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Object>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmpilot.fusion.Object)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmpilot.fusion.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmpilot.fusion.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  motion_status_.MergeFrom(from.motion_status_);
  motion_status_confidence_.MergeFrom(from.motion_status_confidence_);
  trajectories_.MergeFrom(from.trajectories_);
  if (from.has_center()) {
    mutable_center()->::calmpilot::fusion::Vector3d::MergeFrom(from.center());
  }
  if (from.has_center_rms()) {
    mutable_center_rms()->::calmpilot::fusion::Vector3d::MergeFrom(from.center_rms());
  }
  if (from.has_vrel()) {
    mutable_vrel()->::calmpilot::fusion::Vector3d::MergeFrom(from.vrel());
  }
  if (from.has_vrel_rms()) {
    mutable_vrel_rms()->::calmpilot::fusion::Vector3d::MergeFrom(from.vrel_rms());
  }
  if (from.has_arel()) {
    mutable_arel()->::calmpilot::fusion::Vector3d::MergeFrom(from.arel());
  }
  if (from.has_arel_rms()) {
    mutable_arel_rms()->::calmpilot::fusion::Vector3d::MergeFrom(from.arel_rms());
  }
  if (from.has_abs_vel()) {
    mutable_abs_vel()->::calmpilot::fusion::Vector3d::MergeFrom(from.abs_vel());
  }
  if (from.has_abs_vel_rms()) {
    mutable_abs_vel_rms()->::calmpilot::fusion::Vector3d::MergeFrom(from.abs_vel_rms());
  }
  if (from.has_size()) {
    mutable_size()->::calmpilot::fusion::Vector3d::MergeFrom(from.size());
  }
  if (from.has_size_rms()) {
    mutable_size_rms()->::calmpilot::fusion::Vector3d::MergeFrom(from.size_rms());
  }
  if (from.has_corner_left_front()) {
    mutable_corner_left_front()->::calmpilot::fusion::Vector3d::MergeFrom(from.corner_left_front());
  }
  if (from.has_corner_right_front()) {
    mutable_corner_right_front()->::calmpilot::fusion::Vector3d::MergeFrom(from.corner_right_front());
  }
  if (from.has_corner_left_rear()) {
    mutable_corner_left_rear()->::calmpilot::fusion::Vector3d::MergeFrom(from.corner_left_rear());
  }
  if (from.has_corner_right_rear()) {
    mutable_corner_right_rear()->::calmpilot::fusion::Vector3d::MergeFrom(from.corner_right_rear());
  }
  if (from.life_time() != 0) {
    set_life_time(from.life_time());
  }
  if (from.obj_id() != 0) {
    set_obj_id(from.obj_id());
  }
  if (from.class_type() != 0) {
    set_class_type(from.class_type());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.class_type_confidence() != 0) {
    set_class_type_confidence(from.class_type_confidence());
  }
  if (from.orientation_angle() != 0) {
    set_orientation_angle(from.orientation_angle());
  }
  if (from.orientation_rms() != 0) {
    set_orientation_rms(from.orientation_rms());
  }
  if (from.measured_source() != 0) {
    set_measured_source(from.measured_source());
  }
  if (from.meas_state() != 0) {
    set_meas_state(from.meas_state());
  }
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmpilot.fusion.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmpilot.fusion.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  using std::swap;
  motion_status_.InternalSwap(&other->motion_status_);
  motion_status_confidence_.InternalSwap(&other->motion_status_confidence_);
  CastToBase(&trajectories_)->InternalSwap(CastToBase(&other->trajectories_));
  swap(center_, other->center_);
  swap(center_rms_, other->center_rms_);
  swap(vrel_, other->vrel_);
  swap(vrel_rms_, other->vrel_rms_);
  swap(arel_, other->arel_);
  swap(arel_rms_, other->arel_rms_);
  swap(abs_vel_, other->abs_vel_);
  swap(abs_vel_rms_, other->abs_vel_rms_);
  swap(size_, other->size_);
  swap(size_rms_, other->size_rms_);
  swap(corner_left_front_, other->corner_left_front_);
  swap(corner_right_front_, other->corner_right_front_);
  swap(corner_left_rear_, other->corner_left_rear_);
  swap(corner_right_rear_, other->corner_right_rear_);
  swap(life_time_, other->life_time_);
  swap(obj_id_, other->obj_id_);
  swap(class_type_, other->class_type_);
  swap(confidence_, other->confidence_);
  swap(class_type_confidence_, other->class_type_confidence_);
  swap(orientation_angle_, other->orientation_angle_);
  swap(orientation_rms_, other->orientation_rms_);
  swap(measured_source_, other->measured_source_);
  swap(meas_state_, other->meas_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fod_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjFrame::InitAsDefaultInstance() {
  ::calmpilot::fusion::_ObjFrame_default_instance_._instance.get_mutable()->header_ = const_cast< ::calmpilot::fusion::Header*>(
      ::calmpilot::fusion::Header::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjFrame::kHeaderFieldNumber;
const int ObjFrame::kObjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjFrame::ObjFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fusion_5fod_2eproto::scc_info_ObjFrame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmpilot.fusion.ObjFrame)
}
ObjFrame::ObjFrame(const ObjFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::calmpilot::fusion::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:calmpilot.fusion.ObjFrame)
}

void ObjFrame::SharedCtor() {
  header_ = NULL;
}

ObjFrame::~ObjFrame() {
  // @@protoc_insertion_point(destructor:calmpilot.fusion.ObjFrame)
  SharedDtor();
}

void ObjFrame::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ObjFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObjFrame::descriptor() {
  ::protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fod_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjFrame& ObjFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fusion_5fod_2eproto::scc_info_ObjFrame.base);
  return *internal_default_instance();
}


void ObjFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:calmpilot.fusion.ObjFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool ObjFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmpilot.fusion.ObjFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmpilot.fusion.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmpilot.fusion.Object objects = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmpilot.fusion.ObjFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmpilot.fusion.ObjFrame)
  return false;
#undef DO_
}

void ObjFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmpilot.fusion.ObjFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmpilot.fusion.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // repeated .calmpilot.fusion.Object objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->objects(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmpilot.fusion.ObjFrame)
}

::google::protobuf::uint8* ObjFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmpilot.fusion.ObjFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmpilot.fusion.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // repeated .calmpilot.fusion.Object objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->objects(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmpilot.fusion.ObjFrame)
  return target;
}

size_t ObjFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmpilot.fusion.ObjFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmpilot.fusion.Object objects = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objects(static_cast<int>(i)));
    }
  }

  // .calmpilot.fusion.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmpilot.fusion.ObjFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmpilot.fusion.ObjFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmpilot.fusion.ObjFrame)
    MergeFrom(*source);
  }
}

void ObjFrame::MergeFrom(const ObjFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmpilot.fusion.ObjFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  if (from.has_header()) {
    mutable_header()->::calmpilot::fusion::Header::MergeFrom(from.header());
  }
}

void ObjFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmpilot.fusion.ObjFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjFrame::CopyFrom(const ObjFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmpilot.fusion.ObjFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjFrame::IsInitialized() const {
  return true;
}

void ObjFrame::Swap(ObjFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjFrame::InternalSwap(ObjFrame* other) {
  using std::swap;
  CastToBase(&objects_)->InternalSwap(CastToBase(&other->objects_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObjFrame::GetMetadata() const {
  protobuf_fusion_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fod_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fusion
}  // namespace calmpilot
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmpilot::fusion::Header* Arena::CreateMaybeMessage< ::calmpilot::fusion::Header >(Arena* arena) {
  return Arena::CreateInternal< ::calmpilot::fusion::Header >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmpilot::fusion::Vector3d* Arena::CreateMaybeMessage< ::calmpilot::fusion::Vector3d >(Arena* arena) {
  return Arena::CreateInternal< ::calmpilot::fusion::Vector3d >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmpilot::fusion::PredictTrajectory_Intention* Arena::CreateMaybeMessage< ::calmpilot::fusion::PredictTrajectory_Intention >(Arena* arena) {
  return Arena::CreateInternal< ::calmpilot::fusion::PredictTrajectory_Intention >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmpilot::fusion::PredictTrajectory_TrajPoint* Arena::CreateMaybeMessage< ::calmpilot::fusion::PredictTrajectory_TrajPoint >(Arena* arena) {
  return Arena::CreateInternal< ::calmpilot::fusion::PredictTrajectory_TrajPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmpilot::fusion::PredictTrajectory* Arena::CreateMaybeMessage< ::calmpilot::fusion::PredictTrajectory >(Arena* arena) {
  return Arena::CreateInternal< ::calmpilot::fusion::PredictTrajectory >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmpilot::fusion::Object* Arena::CreateMaybeMessage< ::calmpilot::fusion::Object >(Arena* arena) {
  return Arena::CreateInternal< ::calmpilot::fusion::Object >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmpilot::fusion::ObjFrame* Arena::CreateMaybeMessage< ::calmpilot::fusion::ObjFrame >(Arena* arena) {
  return Arena::CreateInternal< ::calmpilot::fusion::ObjFrame >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
