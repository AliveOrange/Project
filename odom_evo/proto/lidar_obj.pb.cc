// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lidar_obj.proto

#include "lidar_obj.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_lidar_5fobj_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_lidar_5fobj_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HEADER;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_lidar_5fobj_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_obj_info;
}  // namespace protobuf_lidar_5fobj_2eproto
namespace lidar_obj {
namespace proto {
class HEADERDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HEADER>
      _instance;
} _HEADER_default_instance_;
class obj_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<obj_info>
      _instance;
} _obj_info_default_instance_;
class lidar_objDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<lidar_obj>
      _instance;
} _lidar_obj_default_instance_;
}  // namespace proto
}  // namespace lidar_obj
namespace protobuf_lidar_5fobj_2eproto {
static void InitDefaultsHEADER() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lidar_obj::proto::_HEADER_default_instance_;
    new (ptr) ::lidar_obj::proto::HEADER();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lidar_obj::proto::HEADER::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HEADER =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHEADER}, {}};

static void InitDefaultsobj_info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lidar_obj::proto::_obj_info_default_instance_;
    new (ptr) ::lidar_obj::proto::obj_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lidar_obj::proto::obj_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_obj_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsobj_info}, {}};

static void InitDefaultslidar_obj() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lidar_obj::proto::_lidar_obj_default_instance_;
    new (ptr) ::lidar_obj::proto::lidar_obj();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lidar_obj::proto::lidar_obj::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_lidar_obj =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultslidar_obj}, {
      &protobuf_lidar_5fobj_2eproto::scc_info_HEADER.base,
      &protobuf_lidar_5fobj_2eproto::scc_info_obj_info.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_HEADER.base);
  ::google::protobuf::internal::InitSCC(&scc_info_obj_info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_lidar_obj.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::HEADER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::HEADER, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::HEADER, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::HEADER, rolling_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::HEADER, num_of_obj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::HEADER, id_liar_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::obj_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::obj_info, class_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::obj_info, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::obj_info, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::obj_info, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::obj_info, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::obj_info, loc_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::obj_info, loc_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::obj_info, loc_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::obj_info, orientation_angle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::lidar_obj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::lidar_obj, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj::proto::lidar_obj, obj_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lidar_obj::proto::HEADER)},
  { 10, -1, sizeof(::lidar_obj::proto::obj_info)},
  { 24, -1, sizeof(::lidar_obj::proto::lidar_obj)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::lidar_obj::proto::_HEADER_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lidar_obj::proto::_obj_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lidar_obj::proto::_lidar_obj_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "lidar_obj.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017lidar_obj.proto\022\017lidar_obj.proto\"k\n\006HE"
      "ADER\022\021\n\ttimestamp\030\001 \001(\003\022\020\n\010frame_id\030\002 \001("
      "\003\022\027\n\017rolling_counter\030\003 \001(\003\022\022\n\nnum_of_obj"
      "\030\004 \001(\005\022\017\n\007id_liar\030\005 \001(\005\"\251\001\n\010obj_info\022\022\n\n"
      "class_type\030\001 \001(\005\022\022\n\nconfidence\030\002 \001(\002\022\016\n\006"
      "length\030\003 \001(\002\022\r\n\005width\030\004 \001(\002\022\016\n\006height\030\005 "
      "\001(\002\022\r\n\005loc_x\030\006 \001(\002\022\r\n\005loc_y\030\007 \001(\002\022\r\n\005loc"
      "_z\030\010 \001(\002\022\031\n\021orientation_angle\030\t \001(\002\"\\\n\tl"
      "idar_obj\022\'\n\006header\030\001 \001(\0132\027.lidar_obj.pro"
      "to.HEADER\022&\n\003obj\030\002 \003(\0132\031.lidar_obj.proto"
      ".obj_infob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 417);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lidar_obj.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_lidar_5fobj_2eproto
namespace lidar_obj {
namespace proto {

// ===================================================================

void HEADER::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HEADER::kTimestampFieldNumber;
const int HEADER::kFrameIdFieldNumber;
const int HEADER::kRollingCounterFieldNumber;
const int HEADER::kNumOfObjFieldNumber;
const int HEADER::kIdLiarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HEADER::HEADER()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_lidar_5fobj_2eproto::scc_info_HEADER.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:lidar_obj.proto.HEADER)
}
HEADER::HEADER(const HEADER& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_liar_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(id_liar_));
  // @@protoc_insertion_point(copy_constructor:lidar_obj.proto.HEADER)
}

void HEADER::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_liar_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(id_liar_));
}

HEADER::~HEADER() {
  // @@protoc_insertion_point(destructor:lidar_obj.proto.HEADER)
  SharedDtor();
}

void HEADER::SharedDtor() {
}

void HEADER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HEADER::descriptor() {
  ::protobuf_lidar_5fobj_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5fobj_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HEADER& HEADER::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_lidar_5fobj_2eproto::scc_info_HEADER.base);
  return *internal_default_instance();
}


void HEADER::Clear() {
// @@protoc_insertion_point(message_clear_start:lidar_obj.proto.HEADER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_liar_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(id_liar_));
  _internal_metadata_.Clear();
}

bool HEADER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lidar_obj.proto.HEADER)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 frame_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rolling_counter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rolling_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_of_obj = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_of_obj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id_liar = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_liar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lidar_obj.proto.HEADER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lidar_obj.proto.HEADER)
  return false;
#undef DO_
}

void HEADER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lidar_obj.proto.HEADER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // int64 frame_id = 2;
  if (this->frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->frame_id(), output);
  }

  // int64 rolling_counter = 3;
  if (this->rolling_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->rolling_counter(), output);
  }

  // int32 num_of_obj = 4;
  if (this->num_of_obj() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_of_obj(), output);
  }

  // int32 id_liar = 5;
  if (this->id_liar() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->id_liar(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lidar_obj.proto.HEADER)
}

::google::protobuf::uint8* HEADER::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lidar_obj.proto.HEADER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // int64 frame_id = 2;
  if (this->frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->frame_id(), target);
  }

  // int64 rolling_counter = 3;
  if (this->rolling_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->rolling_counter(), target);
  }

  // int32 num_of_obj = 4;
  if (this->num_of_obj() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_of_obj(), target);
  }

  // int32 id_liar = 5;
  if (this->id_liar() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->id_liar(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lidar_obj.proto.HEADER)
  return target;
}

size_t HEADER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lidar_obj.proto.HEADER)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 frame_id = 2;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->frame_id());
  }

  // int64 rolling_counter = 3;
  if (this->rolling_counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rolling_counter());
  }

  // int32 num_of_obj = 4;
  if (this->num_of_obj() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_of_obj());
  }

  // int32 id_liar = 5;
  if (this->id_liar() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id_liar());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HEADER::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lidar_obj.proto.HEADER)
  GOOGLE_DCHECK_NE(&from, this);
  const HEADER* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HEADER>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lidar_obj.proto.HEADER)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lidar_obj.proto.HEADER)
    MergeFrom(*source);
  }
}

void HEADER::MergeFrom(const HEADER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lidar_obj.proto.HEADER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.frame_id() != 0) {
    set_frame_id(from.frame_id());
  }
  if (from.rolling_counter() != 0) {
    set_rolling_counter(from.rolling_counter());
  }
  if (from.num_of_obj() != 0) {
    set_num_of_obj(from.num_of_obj());
  }
  if (from.id_liar() != 0) {
    set_id_liar(from.id_liar());
  }
}

void HEADER::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lidar_obj.proto.HEADER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HEADER::CopyFrom(const HEADER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lidar_obj.proto.HEADER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HEADER::IsInitialized() const {
  return true;
}

void HEADER::Swap(HEADER* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HEADER::InternalSwap(HEADER* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(frame_id_, other->frame_id_);
  swap(rolling_counter_, other->rolling_counter_);
  swap(num_of_obj_, other->num_of_obj_);
  swap(id_liar_, other->id_liar_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HEADER::GetMetadata() const {
  protobuf_lidar_5fobj_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5fobj_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void obj_info::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int obj_info::kClassTypeFieldNumber;
const int obj_info::kConfidenceFieldNumber;
const int obj_info::kLengthFieldNumber;
const int obj_info::kWidthFieldNumber;
const int obj_info::kHeightFieldNumber;
const int obj_info::kLocXFieldNumber;
const int obj_info::kLocYFieldNumber;
const int obj_info::kLocZFieldNumber;
const int obj_info::kOrientationAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

obj_info::obj_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_lidar_5fobj_2eproto::scc_info_obj_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:lidar_obj.proto.obj_info)
}
obj_info::obj_info(const obj_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&class_type_, &from.class_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&orientation_angle_) -
    reinterpret_cast<char*>(&class_type_)) + sizeof(orientation_angle_));
  // @@protoc_insertion_point(copy_constructor:lidar_obj.proto.obj_info)
}

void obj_info::SharedCtor() {
  ::memset(&class_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_angle_) -
      reinterpret_cast<char*>(&class_type_)) + sizeof(orientation_angle_));
}

obj_info::~obj_info() {
  // @@protoc_insertion_point(destructor:lidar_obj.proto.obj_info)
  SharedDtor();
}

void obj_info::SharedDtor() {
}

void obj_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* obj_info::descriptor() {
  ::protobuf_lidar_5fobj_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5fobj_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const obj_info& obj_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_lidar_5fobj_2eproto::scc_info_obj_info.base);
  return *internal_default_instance();
}


void obj_info::Clear() {
// @@protoc_insertion_point(message_clear_start:lidar_obj.proto.obj_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&class_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_angle_) -
      reinterpret_cast<char*>(&class_type_)) + sizeof(orientation_angle_));
  _internal_metadata_.Clear();
}

bool obj_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lidar_obj.proto.obj_info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 class_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float loc_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &loc_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float loc_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &loc_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float loc_z = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &loc_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float orientation_angle = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orientation_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lidar_obj.proto.obj_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lidar_obj.proto.obj_info)
  return false;
#undef DO_
}

void obj_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lidar_obj.proto.obj_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 class_type = 1;
  if (this->class_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->class_type(), output);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // float length = 3;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->length(), output);
  }

  // float width = 4;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->width(), output);
  }

  // float height = 5;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->height(), output);
  }

  // float loc_x = 6;
  if (this->loc_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->loc_x(), output);
  }

  // float loc_y = 7;
  if (this->loc_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->loc_y(), output);
  }

  // float loc_z = 8;
  if (this->loc_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->loc_z(), output);
  }

  // float orientation_angle = 9;
  if (this->orientation_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->orientation_angle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lidar_obj.proto.obj_info)
}

::google::protobuf::uint8* obj_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lidar_obj.proto.obj_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 class_type = 1;
  if (this->class_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->class_type(), target);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // float length = 3;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->length(), target);
  }

  // float width = 4;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->width(), target);
  }

  // float height = 5;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->height(), target);
  }

  // float loc_x = 6;
  if (this->loc_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->loc_x(), target);
  }

  // float loc_y = 7;
  if (this->loc_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->loc_y(), target);
  }

  // float loc_z = 8;
  if (this->loc_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->loc_z(), target);
  }

  // float orientation_angle = 9;
  if (this->orientation_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->orientation_angle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lidar_obj.proto.obj_info)
  return target;
}

size_t obj_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lidar_obj.proto.obj_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 class_type = 1;
  if (this->class_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->class_type());
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // float length = 3;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // float width = 4;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float height = 5;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // float loc_x = 6;
  if (this->loc_x() != 0) {
    total_size += 1 + 4;
  }

  // float loc_y = 7;
  if (this->loc_y() != 0) {
    total_size += 1 + 4;
  }

  // float loc_z = 8;
  if (this->loc_z() != 0) {
    total_size += 1 + 4;
  }

  // float orientation_angle = 9;
  if (this->orientation_angle() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void obj_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lidar_obj.proto.obj_info)
  GOOGLE_DCHECK_NE(&from, this);
  const obj_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const obj_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lidar_obj.proto.obj_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lidar_obj.proto.obj_info)
    MergeFrom(*source);
  }
}

void obj_info::MergeFrom(const obj_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lidar_obj.proto.obj_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.class_type() != 0) {
    set_class_type(from.class_type());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.loc_x() != 0) {
    set_loc_x(from.loc_x());
  }
  if (from.loc_y() != 0) {
    set_loc_y(from.loc_y());
  }
  if (from.loc_z() != 0) {
    set_loc_z(from.loc_z());
  }
  if (from.orientation_angle() != 0) {
    set_orientation_angle(from.orientation_angle());
  }
}

void obj_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lidar_obj.proto.obj_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void obj_info::CopyFrom(const obj_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lidar_obj.proto.obj_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool obj_info::IsInitialized() const {
  return true;
}

void obj_info::Swap(obj_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void obj_info::InternalSwap(obj_info* other) {
  using std::swap;
  swap(class_type_, other->class_type_);
  swap(confidence_, other->confidence_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(loc_x_, other->loc_x_);
  swap(loc_y_, other->loc_y_);
  swap(loc_z_, other->loc_z_);
  swap(orientation_angle_, other->orientation_angle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata obj_info::GetMetadata() const {
  protobuf_lidar_5fobj_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5fobj_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void lidar_obj::InitAsDefaultInstance() {
  ::lidar_obj::proto::_lidar_obj_default_instance_._instance.get_mutable()->header_ = const_cast< ::lidar_obj::proto::HEADER*>(
      ::lidar_obj::proto::HEADER::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lidar_obj::kHeaderFieldNumber;
const int lidar_obj::kObjFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lidar_obj::lidar_obj()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_lidar_5fobj_2eproto::scc_info_lidar_obj.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:lidar_obj.proto.lidar_obj)
}
lidar_obj::lidar_obj(const lidar_obj& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      obj_(from.obj_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::lidar_obj::proto::HEADER(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:lidar_obj.proto.lidar_obj)
}

void lidar_obj::SharedCtor() {
  header_ = NULL;
}

lidar_obj::~lidar_obj() {
  // @@protoc_insertion_point(destructor:lidar_obj.proto.lidar_obj)
  SharedDtor();
}

void lidar_obj::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void lidar_obj::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* lidar_obj::descriptor() {
  ::protobuf_lidar_5fobj_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5fobj_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const lidar_obj& lidar_obj::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_lidar_5fobj_2eproto::scc_info_lidar_obj.base);
  return *internal_default_instance();
}


void lidar_obj::Clear() {
// @@protoc_insertion_point(message_clear_start:lidar_obj.proto.lidar_obj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obj_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool lidar_obj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lidar_obj.proto.lidar_obj)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .lidar_obj.proto.HEADER header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .lidar_obj.proto.obj_info obj = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_obj()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lidar_obj.proto.lidar_obj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lidar_obj.proto.lidar_obj)
  return false;
#undef DO_
}

void lidar_obj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lidar_obj.proto.lidar_obj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lidar_obj.proto.HEADER header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // repeated .lidar_obj.proto.obj_info obj = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obj_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->obj(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lidar_obj.proto.lidar_obj)
}

::google::protobuf::uint8* lidar_obj::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lidar_obj.proto.lidar_obj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lidar_obj.proto.HEADER header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // repeated .lidar_obj.proto.obj_info obj = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obj_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->obj(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lidar_obj.proto.lidar_obj)
  return target;
}

size_t lidar_obj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lidar_obj.proto.lidar_obj)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .lidar_obj.proto.obj_info obj = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->obj_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obj(static_cast<int>(i)));
    }
  }

  // .lidar_obj.proto.HEADER header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lidar_obj::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lidar_obj.proto.lidar_obj)
  GOOGLE_DCHECK_NE(&from, this);
  const lidar_obj* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const lidar_obj>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lidar_obj.proto.lidar_obj)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lidar_obj.proto.lidar_obj)
    MergeFrom(*source);
  }
}

void lidar_obj::MergeFrom(const lidar_obj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lidar_obj.proto.lidar_obj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obj_.MergeFrom(from.obj_);
  if (from.has_header()) {
    mutable_header()->::lidar_obj::proto::HEADER::MergeFrom(from.header());
  }
}

void lidar_obj::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lidar_obj.proto.lidar_obj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lidar_obj::CopyFrom(const lidar_obj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lidar_obj.proto.lidar_obj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lidar_obj::IsInitialized() const {
  return true;
}

void lidar_obj::Swap(lidar_obj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lidar_obj::InternalSwap(lidar_obj* other) {
  using std::swap;
  CastToBase(&obj_)->InternalSwap(CastToBase(&other->obj_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata lidar_obj::GetMetadata() const {
  protobuf_lidar_5fobj_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5fobj_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace lidar_obj
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::lidar_obj::proto::HEADER* Arena::CreateMaybeMessage< ::lidar_obj::proto::HEADER >(Arena* arena) {
  return Arena::CreateInternal< ::lidar_obj::proto::HEADER >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::lidar_obj::proto::obj_info* Arena::CreateMaybeMessage< ::lidar_obj::proto::obj_info >(Arena* arena) {
  return Arena::CreateInternal< ::lidar_obj::proto::obj_info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::lidar_obj::proto::lidar_obj* Arena::CreateMaybeMessage< ::lidar_obj::proto::lidar_obj >(Arena* arena) {
  return Arena::CreateInternal< ::lidar_obj::proto::lidar_obj >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
