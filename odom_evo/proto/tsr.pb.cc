// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tsr.proto

#include "tsr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_header_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_header_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header;
}  // namespace protobuf_header_2eproto
namespace protobuf_tsr_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tsr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Aftermarket_ext_669;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tsr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Aws_700;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tsr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Signal_car_760;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tsr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Tsr_detail_1_720;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tsr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Tsr_detail_2_721;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tsr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Tsr_detail_3_722;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tsr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Tsr_detail_4_723;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tsr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Tsr_detail_5_724;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tsr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Tsr_detail_6_725;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tsr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Tsr_detail_7_726;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tsr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vision_only_tsr_727;
}  // namespace protobuf_tsr_2eproto
namespace Calmcar {
namespace drivers {
namespace TSR {
class Aftermarket_ext_669DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Aftermarket_ext_669>
      _instance;
} _Aftermarket_ext_669_default_instance_;
class Signal_car_760DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signal_car_760>
      _instance;
} _Signal_car_760_default_instance_;
class Aws_700DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Aws_700>
      _instance;
} _Aws_700_default_instance_;
class Tsr_detail_7_726DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tsr_detail_7_726>
      _instance;
} _Tsr_detail_7_726_default_instance_;
class Vision_only_tsr_727DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vision_only_tsr_727>
      _instance;
} _Vision_only_tsr_727_default_instance_;
class Tsr_detail_5_724DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tsr_detail_5_724>
      _instance;
} _Tsr_detail_5_724_default_instance_;
class Tsr_detail_6_725DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tsr_detail_6_725>
      _instance;
} _Tsr_detail_6_725_default_instance_;
class Tsr_detail_3_722DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tsr_detail_3_722>
      _instance;
} _Tsr_detail_3_722_default_instance_;
class Tsr_detail_4_723DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tsr_detail_4_723>
      _instance;
} _Tsr_detail_4_723_default_instance_;
class Tsr_detail_1_720DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tsr_detail_1_720>
      _instance;
} _Tsr_detail_1_720_default_instance_;
class Tsr_detail_2_721DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tsr_detail_2_721>
      _instance;
} _Tsr_detail_2_721_default_instance_;
class TsrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tsr>
      _instance;
} _Tsr_default_instance_;
}  // namespace TSR
}  // namespace drivers
}  // namespace Calmcar
namespace protobuf_tsr_2eproto {
static void InitDefaultsAftermarket_ext_669() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::TSR::_Aftermarket_ext_669_default_instance_;
    new (ptr) ::Calmcar::drivers::TSR::Aftermarket_ext_669();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::TSR::Aftermarket_ext_669::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Aftermarket_ext_669 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAftermarket_ext_669}, {}};

static void InitDefaultsSignal_car_760() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::TSR::_Signal_car_760_default_instance_;
    new (ptr) ::Calmcar::drivers::TSR::Signal_car_760();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::TSR::Signal_car_760::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Signal_car_760 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignal_car_760}, {}};

static void InitDefaultsAws_700() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::TSR::_Aws_700_default_instance_;
    new (ptr) ::Calmcar::drivers::TSR::Aws_700();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::TSR::Aws_700::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Aws_700 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAws_700}, {}};

static void InitDefaultsTsr_detail_7_726() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::TSR::_Tsr_detail_7_726_default_instance_;
    new (ptr) ::Calmcar::drivers::TSR::Tsr_detail_7_726();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::TSR::Tsr_detail_7_726::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Tsr_detail_7_726 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTsr_detail_7_726}, {}};

static void InitDefaultsVision_only_tsr_727() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::TSR::_Vision_only_tsr_727_default_instance_;
    new (ptr) ::Calmcar::drivers::TSR::Vision_only_tsr_727();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::TSR::Vision_only_tsr_727::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Vision_only_tsr_727 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVision_only_tsr_727}, {}};

static void InitDefaultsTsr_detail_5_724() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::TSR::_Tsr_detail_5_724_default_instance_;
    new (ptr) ::Calmcar::drivers::TSR::Tsr_detail_5_724();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::TSR::Tsr_detail_5_724::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Tsr_detail_5_724 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTsr_detail_5_724}, {}};

static void InitDefaultsTsr_detail_6_725() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::TSR::_Tsr_detail_6_725_default_instance_;
    new (ptr) ::Calmcar::drivers::TSR::Tsr_detail_6_725();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::TSR::Tsr_detail_6_725::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Tsr_detail_6_725 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTsr_detail_6_725}, {}};

static void InitDefaultsTsr_detail_3_722() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::TSR::_Tsr_detail_3_722_default_instance_;
    new (ptr) ::Calmcar::drivers::TSR::Tsr_detail_3_722();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::TSR::Tsr_detail_3_722::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Tsr_detail_3_722 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTsr_detail_3_722}, {}};

static void InitDefaultsTsr_detail_4_723() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::TSR::_Tsr_detail_4_723_default_instance_;
    new (ptr) ::Calmcar::drivers::TSR::Tsr_detail_4_723();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::TSR::Tsr_detail_4_723::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Tsr_detail_4_723 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTsr_detail_4_723}, {}};

static void InitDefaultsTsr_detail_1_720() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::TSR::_Tsr_detail_1_720_default_instance_;
    new (ptr) ::Calmcar::drivers::TSR::Tsr_detail_1_720();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::TSR::Tsr_detail_1_720::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Tsr_detail_1_720 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTsr_detail_1_720}, {}};

static void InitDefaultsTsr_detail_2_721() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::TSR::_Tsr_detail_2_721_default_instance_;
    new (ptr) ::Calmcar::drivers::TSR::Tsr_detail_2_721();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::TSR::Tsr_detail_2_721::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Tsr_detail_2_721 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTsr_detail_2_721}, {}};

static void InitDefaultsTsr() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::TSR::_Tsr_default_instance_;
    new (ptr) ::Calmcar::drivers::TSR::Tsr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::TSR::Tsr::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<12> scc_info_Tsr =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsTsr}, {
      &protobuf_header_2eproto::scc_info_Header.base,
      &protobuf_tsr_2eproto::scc_info_Aftermarket_ext_669.base,
      &protobuf_tsr_2eproto::scc_info_Signal_car_760.base,
      &protobuf_tsr_2eproto::scc_info_Aws_700.base,
      &protobuf_tsr_2eproto::scc_info_Tsr_detail_7_726.base,
      &protobuf_tsr_2eproto::scc_info_Vision_only_tsr_727.base,
      &protobuf_tsr_2eproto::scc_info_Tsr_detail_5_724.base,
      &protobuf_tsr_2eproto::scc_info_Tsr_detail_6_725.base,
      &protobuf_tsr_2eproto::scc_info_Tsr_detail_3_722.base,
      &protobuf_tsr_2eproto::scc_info_Tsr_detail_4_723.base,
      &protobuf_tsr_2eproto::scc_info_Tsr_detail_1_720.base,
      &protobuf_tsr_2eproto::scc_info_Tsr_detail_2_721.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Aftermarket_ext_669.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Signal_car_760.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Aws_700.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tsr_detail_7_726.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Vision_only_tsr_727.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tsr_detail_5_724.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tsr_detail_6_725.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tsr_detail_3_722.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tsr_detail_4_723.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tsr_detail_1_720.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tsr_detail_2_721.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tsr.base);
}

}  // namespace protobuf_tsr_2eproto
namespace Calmcar {
namespace drivers {
namespace TSR {
bool Aftermarket_ext_669_Ldw_availability_rightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aftermarket_ext_669_Ldw_availability_rightType Aftermarket_ext_669::LDW_AVAILABILITY_RIGHT_UNAVALABLE;
const Aftermarket_ext_669_Ldw_availability_rightType Aftermarket_ext_669::LDW_AVAILABILITY_RIGHT_AVAILABLE;
const Aftermarket_ext_669_Ldw_availability_rightType Aftermarket_ext_669::Ldw_availability_rightType_MIN;
const Aftermarket_ext_669_Ldw_availability_rightType Aftermarket_ext_669::Ldw_availability_rightType_MAX;
const int Aftermarket_ext_669::Ldw_availability_rightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aftermarket_ext_669_Ldw_availability_leftType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aftermarket_ext_669_Ldw_availability_leftType Aftermarket_ext_669::LDW_AVAILABILITY_LEFT_UNAVALABLE;
const Aftermarket_ext_669_Ldw_availability_leftType Aftermarket_ext_669::LDW_AVAILABILITY_LEFT_AVAILABLE;
const Aftermarket_ext_669_Ldw_availability_leftType Aftermarket_ext_669::Ldw_availability_leftType_MIN;
const Aftermarket_ext_669_Ldw_availability_leftType Aftermarket_ext_669::Ldw_availability_leftType_MAX;
const int Aftermarket_ext_669::Ldw_availability_leftType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aftermarket_ext_669_Lane_type_rightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aftermarket_ext_669_Lane_type_rightType Aftermarket_ext_669::LANE_TYPE_RIGHT_DASHED;
const Aftermarket_ext_669_Lane_type_rightType Aftermarket_ext_669::LANE_TYPE_RIGHT_SOLID;
const Aftermarket_ext_669_Lane_type_rightType Aftermarket_ext_669::LANE_TYPE_RIGHT_NONE;
const Aftermarket_ext_669_Lane_type_rightType Aftermarket_ext_669::LANE_TYPE_RIGHT_ROAD_EDGE;
const Aftermarket_ext_669_Lane_type_rightType Aftermarket_ext_669::LANE_TYPE_RIGHT_DOUBLE_LANE_MARK;
const Aftermarket_ext_669_Lane_type_rightType Aftermarket_ext_669::LANE_TYPE_RIGHT_BOTT_S_DOTS;
const Aftermarket_ext_669_Lane_type_rightType Aftermarket_ext_669::LANE_TYPE_RIGHT_INVALID;
const Aftermarket_ext_669_Lane_type_rightType Aftermarket_ext_669::Lane_type_rightType_MIN;
const Aftermarket_ext_669_Lane_type_rightType Aftermarket_ext_669::Lane_type_rightType_MAX;
const int Aftermarket_ext_669::Lane_type_rightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aftermarket_ext_669_Lane_type_leftType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aftermarket_ext_669_Lane_type_leftType Aftermarket_ext_669::LANE_TYPE_LEFT_DASHED;
const Aftermarket_ext_669_Lane_type_leftType Aftermarket_ext_669::LANE_TYPE_LEFT_SOLID;
const Aftermarket_ext_669_Lane_type_leftType Aftermarket_ext_669::LANE_TYPE_LEFT_NONE;
const Aftermarket_ext_669_Lane_type_leftType Aftermarket_ext_669::LANE_TYPE_LEFT_ROAD_EDGE;
const Aftermarket_ext_669_Lane_type_leftType Aftermarket_ext_669::LANE_TYPE_LEFT_DOUBLE_LANE_MARK;
const Aftermarket_ext_669_Lane_type_leftType Aftermarket_ext_669::LANE_TYPE_LEFT_BOTT_S_DOTS;
const Aftermarket_ext_669_Lane_type_leftType Aftermarket_ext_669::LANE_TYPE_LEFT_INVALID;
const Aftermarket_ext_669_Lane_type_leftType Aftermarket_ext_669::Lane_type_leftType_MIN;
const Aftermarket_ext_669_Lane_type_leftType Aftermarket_ext_669::Lane_type_leftType_MAX;
const int Aftermarket_ext_669::Lane_type_leftType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aftermarket_ext_669_Lane_conf_rightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aftermarket_ext_669_Lane_conf_rightType Aftermarket_ext_669::LANE_CONF_RIGHT_NO_LANE_CONF;
const Aftermarket_ext_669_Lane_conf_rightType Aftermarket_ext_669::LANE_CONF_RIGHT_BAD_LANE_CONF;
const Aftermarket_ext_669_Lane_conf_rightType Aftermarket_ext_669::LANE_CONF_RIGHT_GODD_LANE_CONF;
const Aftermarket_ext_669_Lane_conf_rightType Aftermarket_ext_669::LANE_CONF_RIGHT_VERY_GOOD_LANE_CONF;
const Aftermarket_ext_669_Lane_conf_rightType Aftermarket_ext_669::Lane_conf_rightType_MIN;
const Aftermarket_ext_669_Lane_conf_rightType Aftermarket_ext_669::Lane_conf_rightType_MAX;
const int Aftermarket_ext_669::Lane_conf_rightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aftermarket_ext_669_Lane_conf_leftType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aftermarket_ext_669_Lane_conf_leftType Aftermarket_ext_669::LANE_CONF_LEFT_NO_LANE_CONF;
const Aftermarket_ext_669_Lane_conf_leftType Aftermarket_ext_669::LANE_CONF_LEFT_BAD_LANE_CONF;
const Aftermarket_ext_669_Lane_conf_leftType Aftermarket_ext_669::LANE_CONF_LEFT_GODD_LANE_CONF;
const Aftermarket_ext_669_Lane_conf_leftType Aftermarket_ext_669::LANE_CONF_LEFT_VERY_GOOD_LANE_CONF;
const Aftermarket_ext_669_Lane_conf_leftType Aftermarket_ext_669::Lane_conf_leftType_MIN;
const Aftermarket_ext_669_Lane_conf_leftType Aftermarket_ext_669::Lane_conf_leftType_MAX;
const int Aftermarket_ext_669::Lane_conf_leftType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Signal_car_760_Wipers_availabledType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_car_760_Wipers_availabledType Signal_car_760::WIPERS_AVAILABLED_OFF;
const Signal_car_760_Wipers_availabledType Signal_car_760::WIPERS_AVAILABLED_ON;
const Signal_car_760_Wipers_availabledType Signal_car_760::Wipers_availabledType_MIN;
const Signal_car_760_Wipers_availabledType Signal_car_760::Wipers_availabledType_MAX;
const int Signal_car_760::Wipers_availabledType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Signal_car_760_Highbeam_availabledType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_car_760_Highbeam_availabledType Signal_car_760::HIGHBEAM_AVAILABLED_OFF;
const Signal_car_760_Highbeam_availabledType Signal_car_760::HIGHBEAM_AVAILABLED_ON;
const Signal_car_760_Highbeam_availabledType Signal_car_760::Highbeam_availabledType_MIN;
const Signal_car_760_Highbeam_availabledType Signal_car_760::Highbeam_availabledType_MAX;
const int Signal_car_760::Highbeam_availabledType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Signal_car_760_Lowbeam_availabledType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_car_760_Lowbeam_availabledType Signal_car_760::LOWBEAM_AVAILABLED_OFF;
const Signal_car_760_Lowbeam_availabledType Signal_car_760::LOWBEAM_AVAILABLED_ON;
const Signal_car_760_Lowbeam_availabledType Signal_car_760::Lowbeam_availabledType_MIN;
const Signal_car_760_Lowbeam_availabledType Signal_car_760::Lowbeam_availabledType_MAX;
const int Signal_car_760::Lowbeam_availabledType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Signal_car_760_BrakesType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_car_760_BrakesType Signal_car_760::BRAKES_OFF;
const Signal_car_760_BrakesType Signal_car_760::BRAKES_ON;
const Signal_car_760_BrakesType Signal_car_760::BrakesType_MIN;
const Signal_car_760_BrakesType Signal_car_760::BrakesType_MAX;
const int Signal_car_760::BrakesType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Signal_car_760_Left_blinkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_car_760_Left_blinkType Signal_car_760::LEFT_BLINK_OFF;
const Signal_car_760_Left_blinkType Signal_car_760::LEFT_BLINK_ON;
const Signal_car_760_Left_blinkType Signal_car_760::Left_blinkType_MIN;
const Signal_car_760_Left_blinkType Signal_car_760::Left_blinkType_MAX;
const int Signal_car_760::Left_blinkType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Signal_car_760_Right_blinkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_car_760_Right_blinkType Signal_car_760::RIGHT_BLINK_OFF;
const Signal_car_760_Right_blinkType Signal_car_760::RIGHT_BLINK_ON;
const Signal_car_760_Right_blinkType Signal_car_760::Right_blinkType_MIN;
const Signal_car_760_Right_blinkType Signal_car_760::Right_blinkType_MAX;
const int Signal_car_760::Right_blinkType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Signal_car_760_WippersType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_car_760_WippersType Signal_car_760::WIPPERS_OFF;
const Signal_car_760_WippersType Signal_car_760::WIPPERS_ON;
const Signal_car_760_WippersType Signal_car_760::WippersType_MIN;
const Signal_car_760_WippersType Signal_car_760::WippersType_MAX;
const int Signal_car_760::WippersType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Signal_car_760_LowbeamType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_car_760_LowbeamType Signal_car_760::LOWBEAM_OFF;
const Signal_car_760_LowbeamType Signal_car_760::LOWBEAM_ON;
const Signal_car_760_LowbeamType Signal_car_760::LowbeamType_MIN;
const Signal_car_760_LowbeamType Signal_car_760::LowbeamType_MAX;
const int Signal_car_760::LowbeamType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Signal_car_760_HighbeamType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_car_760_HighbeamType Signal_car_760::HIGHBEAM_OFF;
const Signal_car_760_HighbeamType Signal_car_760::HIGHBEAM_ON;
const Signal_car_760_HighbeamType Signal_car_760::HighbeamType_MIN;
const Signal_car_760_HighbeamType Signal_car_760::HighbeamType_MAX;
const int Signal_car_760::HighbeamType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Tsr_warning_levelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Tsr_warning_levelType Aws_700::TSR_WARNING_LEVEL_SPEED_VEHICLE_ROAD_LESS_EQUAL_SPEED_10;
const Aws_700_Tsr_warning_levelType Aws_700::TSR_WARNING_LEVEL_SPEED_VEHICLE_ROAD_MORE_SPEED_10;
const Aws_700_Tsr_warning_levelType Aws_700::TSR_WARNING_LEVEL_SPEED_VEHICLE_ROAD_MORE_SPEED_20;
const Aws_700_Tsr_warning_levelType Aws_700::TSR_WARNING_LEVEL_SPEED_VEHICLE_ROAD_MORE_SPEED_30;
const Aws_700_Tsr_warning_levelType Aws_700::Tsr_warning_levelType_MIN;
const Aws_700_Tsr_warning_levelType Aws_700::Tsr_warning_levelType_MAX;
const int Aws_700::Tsr_warning_levelType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Tsr_enabbledType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Tsr_enabbledType Aws_700::TSR_ENABBLED_OFF;
const Aws_700_Tsr_enabbledType Aws_700::TSR_ENABBLED_ON;
const Aws_700_Tsr_enabbledType Aws_700::Tsr_enabbledType_MIN;
const Aws_700_Tsr_enabbledType Aws_700::Tsr_enabbledType_MAX;
const int Aws_700::Tsr_enabbledType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Rainy_hw_enabledType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Rainy_hw_enabledType Aws_700::RAINY_HW_ENABLED_OFF;
const Aws_700_Rainy_hw_enabledType Aws_700::RAINY_HW_ENABLED_ON;
const Aws_700_Rainy_hw_enabledType Aws_700::Rainy_hw_enabledType_MIN;
const Aws_700_Rainy_hw_enabledType Aws_700::Rainy_hw_enabledType_MAX;
const int Aws_700::Rainy_hw_enabledType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Rain_hwType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Rain_hwType Aws_700::RAIN_HW_OFF;
const Aws_700_Rain_hwType Aws_700::RAIN_HW_ON;
const Aws_700_Rain_hwType Aws_700::Rain_hwType_MIN;
const Aws_700_Rain_hwType Aws_700::Rain_hwType_MAX;
const int Aws_700::Rain_hwType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Pcw_peddzType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Pcw_peddzType Aws_700::PCW_PEDDZ_NO_PEDESTRIAN;
const Aws_700_Pcw_peddzType Aws_700::PCW_PEDDZ_PEDESTRIAN_IN_DANGER_ZONE;
const Aws_700_Pcw_peddzType Aws_700::PCW_PEDDZ_PCW;
const Aws_700_Pcw_peddzType Aws_700::Pcw_peddzType_MIN;
const Aws_700_Pcw_peddzType Aws_700::Pcw_peddzType_MAX;
const int Aws_700::Pcw_peddzType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Hw_warning_levelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Hw_warning_levelType Aws_700::HW_WARNING_LEVEL_NO_CIPV_IN_FRAME;
const Aws_700_Hw_warning_levelType Aws_700::HW_WARNING_LEVEL_CIPV_HW_CONFIGURATION;
const Aws_700_Hw_warning_levelType Aws_700::HW_WARNING_LEVEL_CIPV_HW_COFIGURATION;
const Aws_700_Hw_warning_levelType Aws_700::Hw_warning_levelType_MIN;
const Aws_700_Hw_warning_levelType Aws_700::Hw_warning_levelType_MAX;
const int Aws_700::Hw_warning_levelType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Hw_repeatable_enabledType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Hw_repeatable_enabledType Aws_700::HW_REPEATABLE_ENABLED_OFF;
const Aws_700_Hw_repeatable_enabledType Aws_700::HW_REPEATABLE_ENABLED_ON;
const Aws_700_Hw_repeatable_enabledType Aws_700::Hw_repeatable_enabledType_MIN;
const Aws_700_Hw_repeatable_enabledType Aws_700::Hw_repeatable_enabledType_MAX;
const int Aws_700::Hw_repeatable_enabledType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_General_pedestrianType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_General_pedestrianType Aws_700::GENERAL_PEDESTRIAN_OFF;
const Aws_700_General_pedestrianType Aws_700::GENERAL_PEDESTRIAN_ON;
const Aws_700_General_pedestrianType Aws_700::General_pedestrianType_MIN;
const Aws_700_General_pedestrianType Aws_700::General_pedestrianType_MAX;
const int Aws_700::General_pedestrianType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Blinker_reminder_enabledType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Blinker_reminder_enabledType Aws_700::BLINKER_REMINDER_ENABLED_OFF;
const Aws_700_Blinker_reminder_enabledType Aws_700::BLINKER_REMINDER_ENABLED_ON;
const Aws_700_Blinker_reminder_enabledType Aws_700::Blinker_reminder_enabledType_MIN;
const Aws_700_Blinker_reminder_enabledType Aws_700::Blinker_reminder_enabledType_MAX;
const int Aws_700::Blinker_reminder_enabledType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Blinker_reminderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Blinker_reminderType Aws_700::BLINKER_REMINDER_OFF;
const Aws_700_Blinker_reminderType Aws_700::BLINKER_REMINDER_ON;
const Aws_700_Blinker_reminderType Aws_700::Blinker_reminderType_MIN;
const Aws_700_Blinker_reminderType Aws_700::Blinker_reminderType_MAX;
const int Aws_700::Blinker_reminderType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Fcw_onType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Fcw_onType Aws_700::FCW_ON_OFF;
const Aws_700_Fcw_onType Aws_700::FCW_ON_ON;
const Aws_700_Fcw_onType Aws_700::Fcw_onType_MIN;
const Aws_700_Fcw_onType Aws_700::Fcw_onType_MAX;
const int Aws_700::Fcw_onType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Rldw_onType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Rldw_onType Aws_700::RLDW_ON_OFF;
const Aws_700_Rldw_onType Aws_700::RLDW_ON_ON;
const Aws_700_Rldw_onType Aws_700::Rldw_onType_MIN;
const Aws_700_Rldw_onType Aws_700::Rldw_onType_MAX;
const int Aws_700::Rldw_onType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Lldw_onType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Lldw_onType Aws_700::LLDW_ON_OFF;
const Aws_700_Lldw_onType Aws_700::LLDW_ON_ON;
const Aws_700_Lldw_onType Aws_700::Lldw_onType_MIN;
const Aws_700_Lldw_onType Aws_700::Lldw_onType_MAX;
const int Aws_700::Lldw_onType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Ldw_offType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Ldw_offType Aws_700::LDW_OFF_OFF;
const Aws_700_Ldw_offType Aws_700::LDW_OFF_ON;
const Aws_700_Ldw_offType Aws_700::Ldw_offType_MIN;
const Aws_700_Ldw_offType Aws_700::Ldw_offType_MAX;
const int Aws_700::Ldw_offType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_MaintenanceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_MaintenanceType Aws_700::MAINTENANCE_OFF;
const Aws_700_MaintenanceType Aws_700::MAINTENANCE_ON;
const Aws_700_MaintenanceType Aws_700::MaintenanceType_MIN;
const Aws_700_MaintenanceType Aws_700::MaintenanceType_MAX;
const int Aws_700::MaintenanceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Fail_safeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Fail_safeType Aws_700::FAIL_SAFE_OFF;
const Aws_700_Fail_safeType Aws_700::FAIL_SAFE_ON;
const Aws_700_Fail_safeType Aws_700::Fail_safeType_MIN;
const Aws_700_Fail_safeType Aws_700::Fail_safeType_MAX;
const int Aws_700::Fail_safeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Error_activeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Error_activeType Aws_700::ERROR_ACTIVE_OFF;
const Aws_700_Error_activeType Aws_700::ERROR_ACTIVE_ON;
const Aws_700_Error_activeType Aws_700::Error_activeType_MIN;
const Aws_700_Error_activeType Aws_700::Error_activeType_MAX;
const int Aws_700::Error_activeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Headway_validType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Headway_validType Aws_700::HEADWAY_VALID_OFF;
const Aws_700_Headway_validType Aws_700::HEADWAY_VALID_ON;
const Aws_700_Headway_validType Aws_700::Headway_validType_MIN;
const Aws_700_Headway_validType Aws_700::Headway_validType_MAX;
const int Aws_700::Headway_validType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Fla_armedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Fla_armedType Aws_700::FLA_ARMED_OFF;
const Aws_700_Fla_armedType Aws_700::FLA_ARMED_ON;
const Aws_700_Fla_armedType Aws_700::Fla_armedType_MIN;
const Aws_700_Fla_armedType Aws_700::Fla_armedType_MAX;
const int Aws_700::Fla_armedType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Hi_low_beamcontrolType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Hi_low_beamcontrolType Aws_700::HI_LOW_BEAMCONTROL_OFF;
const Aws_700_Hi_low_beamcontrolType Aws_700::HI_LOW_BEAMCONTROL_ON;
const Aws_700_Hi_low_beamcontrolType Aws_700::Hi_low_beamcontrolType_MIN;
const Aws_700_Hi_low_beamcontrolType Aws_700::Hi_low_beamcontrolType_MAX;
const int Aws_700::Hi_low_beamcontrolType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Zero_speedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Zero_speedType Aws_700::ZERO_SPEED_OFF;
const Aws_700_Zero_speedType Aws_700::ZERO_SPEED_ON;
const Aws_700_Zero_speedType Aws_700::Zero_speedType_MIN;
const Aws_700_Zero_speedType Aws_700::Zero_speedType_MAX;
const int Aws_700::Zero_speedType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Time_indicatorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Time_indicatorType Aws_700::TIME_INDICATOR_DAY;
const Aws_700_Time_indicatorType Aws_700::TIME_INDICATOR_DUSK;
const Aws_700_Time_indicatorType Aws_700::TIME_INDICATOR_NIGHT;
const Aws_700_Time_indicatorType Aws_700::TIME_INDICATOR_NOT_IN_USE;
const Aws_700_Time_indicatorType Aws_700::Time_indicatorType_MIN;
const Aws_700_Time_indicatorType Aws_700::Time_indicatorType_MAX;
const int Aws_700::Time_indicatorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Aws_700_Sound_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Aws_700_Sound_typeType Aws_700::SOUND_TYPE_NO_SOUND;
const Aws_700_Sound_typeType Aws_700::SOUND_TYPE_LEFT_LDW;
const Aws_700_Sound_typeType Aws_700::SOUND_TYPE_RIGHT_LDW;
const Aws_700_Sound_typeType Aws_700::SOUND_TYPE_HW;
const Aws_700_Sound_typeType Aws_700::SOUND_TYPE_TSR_WARNING;
const Aws_700_Sound_typeType Aws_700::SOUND_TYPE_SOFT_FCW_VIRTUAL_BUMPER;
const Aws_700_Sound_typeType Aws_700::SOUND_TYPE_FCW_PCW;
const Aws_700_Sound_typeType Aws_700::SOUND_TYPE_PEDESTRIAN_IN_DZ;
const Aws_700_Sound_typeType Aws_700::Sound_typeType_MIN;
const Aws_700_Sound_typeType Aws_700::Sound_typeType_MAX;
const int Aws_700::Sound_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_7_726_Vision_only_sign_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 50:
    case 64:
    case 65:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 200:
    case 201:
    case 220:
    case 221:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_10_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_20_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_30_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_40_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_50_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_60_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_70_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_80_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_90_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_100_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_110_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_120_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_130_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_140_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_END_OF_NUMBER_STANDARD_REGULAR;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_10_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_20_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_30_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_40_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_50_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_60_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_70_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_80_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_90_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_100_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_110_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_120_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_130_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_140_KM_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_END_OF_NUMBER_STANDARD_ELECTRONI;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_END_ALL_RESTRICTION_REGULAR;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_END_ALL_RESTRICTION_ELECTRONIC;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_5_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_15_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_25_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_35_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_45_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_55_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_65_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_75_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_85_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_95_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_105_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_115_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_125_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_135_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_145_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_5_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_15_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_25_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_35_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_45_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_55_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_65_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_75_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_85_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_95_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_105_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_115_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_125_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_135_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_145_KM_H_MP_H;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_MOTORWAY_BEGIN;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_MOTORWAY_END;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_EXPRESSWAY_BEGIN;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_EXPRESSWAY_END;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_PLAYFROUND_AREA_BEGIN;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_PLAYGROUND_AREA_END;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_NO_PASSING_START_REGULAR;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_END_OF_NO_PASSING;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_NO_PASSING_START_ELECTRONIC;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_END_OF_NO_PASSING_ELECTRONIC;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_NO_SIGN_DETECTED;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::VISION_ONLY_SIGN_TYPE_E_INVALID_SIGN;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::Vision_only_sign_typeType_MIN;
const Tsr_detail_7_726_Vision_only_sign_typeType Tsr_detail_7_726::Vision_only_sign_typeType_MAX;
const int Tsr_detail_7_726::Vision_only_sign_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_7_726_Supplementary_sign_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_NONE;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_RAIN;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_SNOW;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_TRAILER;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_TIME;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_ARROW_LEFT;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_ARROW_RIGHT;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_BENDARRIOW_LEFT;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_BENDARROW_RIGHT;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_TRUCK;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_DISTANCE_AROW_DIST_FOR;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_WEIGHT;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_DISTANCE_IN;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_TRACTOR;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_SNOW_RAIN;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_SCHOOL;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_RAIN_CLOUD;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_FOG;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_HAZARDOUS_METERIALS;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_NIGHT;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_SUPP_SIGN_GENERIC;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::SUPPLEMENTARY_SIGN_TYPE_INVALID_SUPP;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::Supplementary_sign_typeType_MIN;
const Tsr_detail_7_726_Supplementary_sign_typeType Tsr_detail_7_726::Supplementary_sign_typeType_MAX;
const int Tsr_detail_7_726::Supplementary_sign_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_7_726_Filter_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_7_726_Filter_typeType Tsr_detail_7_726::FILTER_TYPE_NOT_FILTERED;
const Tsr_detail_7_726_Filter_typeType Tsr_detail_7_726::FILTER_TYPE_IRRELEVANT_TO_THE_HOST;
const Tsr_detail_7_726_Filter_typeType Tsr_detail_7_726::FILTER_TYPE_ON_VEHICLE_TRUCK;
const Tsr_detail_7_726_Filter_typeType Tsr_detail_7_726::FILTER_TYPE_EMBEDDED;
const Tsr_detail_7_726_Filter_typeType Tsr_detail_7_726::Filter_typeType_MIN;
const Tsr_detail_7_726_Filter_typeType Tsr_detail_7_726::Filter_typeType_MAX;
const int Tsr_detail_7_726::Filter_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Vision_only_tsr_727_Sign_type_4Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 50:
    case 64:
    case 65:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 200:
    case 201:
    case 220:
    case 221:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_10_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_20_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_30_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_40_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_50_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_60_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_70_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_80_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_90_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_100_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_110_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_120_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_130_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_140_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_END_OF_NUMBER_STANDARD_REGULAR;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_10_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_20_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_30_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_40_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_50_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_60_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_70_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_80_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_90_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_100_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_110_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_120_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_130_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_140_KM_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_END_OF_NUMBER_STANDARD_ELECTRONI;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_END_ALL_RESTRICTION_REGULAR;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_END_ALL_RESTRICTION_ELECTRONIC;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_5_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_15_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_25_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_35_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_45_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_55_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_65_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_75_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_85_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_95_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_105_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_115_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_125_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_135_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_REGULAR_145_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_5_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_15_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_25_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_35_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_45_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_55_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_65_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_75_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_85_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONIC_95_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONI_105_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONI_115_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONI_125_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONI_135_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_STANDARD_ELECTRONI_145_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_MOTORWAY_BEGIN;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_MOTORWAY_END;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_EXPRESSWAY_BEGIN;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_EXPRESSWAY_END;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_PLAYFROUND_AREA_BEGIN;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_PLAYGROUND_AREA_END;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_NO_PASSING_START_REGULAR;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_END_OF_NO_PASSING;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_NO_PASSING_START_ELECTRONIC;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_END_OF_NO_PASSING_ELECTRONIC;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_NO_SIGN_DETECTED;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::SIGN_TYPE_4_E_INVALID_SIGN;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::Sign_type_4Type_MIN;
const Vision_only_tsr_727_Sign_type_4Type Vision_only_tsr_727::Sign_type_4Type_MAX;
const int Vision_only_tsr_727::Sign_type_4Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Vision_only_tsr_727_Sign_type_3Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 50:
    case 64:
    case 65:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 200:
    case 201:
    case 220:
    case 221:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_10_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_20_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_30_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_40_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_50_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_60_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_70_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_80_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_90_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_100_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_110_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_120_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_130_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_140_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_END_OF_NUMBER_STANDARD_REGULAR;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_10_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_20_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_30_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_40_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_50_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_60_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_70_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_80_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_90_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_100_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_110_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_120_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_130_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_140_KM_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_END_OF_NUMBER_STANDARD_ELECTRONI;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_END_ALL_RESTRICTION_REGULAR;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_END_ALL_RESTRICTION_ELECTRONIC;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_5_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_15_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_25_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_35_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_45_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_55_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_65_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_75_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_85_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_95_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_105_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_115_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_125_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_135_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_REGULAR_145_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_5_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_15_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_25_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_35_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_45_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_55_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_65_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_75_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_85_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONIC_95_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONI_105_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONI_115_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONI_125_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONI_135_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_STANDARD_ELECTRONI_145_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_MOTORWAY_BEGIN;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_MOTORWAY_END;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_EXPRESSWAY_BEGIN;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_EXPRESSWAY_END;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_PLAYFROUND_AREA_BEGIN;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_PLAYGROUND_AREA_END;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_NO_PASSING_START_REGULAR;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_END_OF_NO_PASSING;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_NO_PASSING_START_ELECTRONIC;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_END_OF_NO_PASSING_ELECTRONIC;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_NO_SIGN_DETECTED;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::SIGN_TYPE_3_E_INVALID_SIGN;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::Sign_type_3Type_MIN;
const Vision_only_tsr_727_Sign_type_3Type Vision_only_tsr_727::Sign_type_3Type_MAX;
const int Vision_only_tsr_727::Sign_type_3Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Vision_only_tsr_727_Sign_type_2Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 50:
    case 64:
    case 65:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 200:
    case 201:
    case 220:
    case 221:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_10_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_20_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_30_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_40_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_50_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_60_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_70_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_80_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_90_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_100_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_110_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_120_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_130_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_140_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_END_OF_NUMBER_STANDARD_REGULAR;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_10_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_20_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_30_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_40_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_50_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_60_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_70_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_80_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_90_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_100_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_110_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_120_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_130_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_140_KM_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_END_OF_NUMBER_STANDARD_ELECTRONI;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_END_ALL_RESTRICTION_REGULAR;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_END_ALL_RESTRICTION_ELECTRONIC;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_5_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_15_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_25_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_35_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_45_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_55_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_65_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_75_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_85_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_95_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_105_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_115_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_125_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_135_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_REGULAR_145_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_5_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_15_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_25_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_35_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_45_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_55_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_65_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_75_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_85_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONIC_95_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONI_105_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONI_115_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONI_125_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONI_135_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_STANDARD_ELECTRONI_145_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_MOTORWAY_BEGIN;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_MOTORWAY_END;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_EXPRESSWAY_BEGIN;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_EXPRESSWAY_END;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_PLAYFROUND_AREA_BEGIN;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_PLAYGROUND_AREA_END;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_NO_PASSING_START_REGULAR;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_END_OF_NO_PASSING;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_NO_PASSING_START_ELECTRONIC;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_END_OF_NO_PASSING_ELECTRONIC;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_NO_SIGN_DETECTED;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::SIGN_TYPE_2_E_INVALID_SIGN;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::Sign_type_2Type_MIN;
const Vision_only_tsr_727_Sign_type_2Type Vision_only_tsr_727::Sign_type_2Type_MAX;
const int Vision_only_tsr_727::Sign_type_2Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Vision_only_tsr_727_Sign_type_1Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 50:
    case 64:
    case 65:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 200:
    case 201:
    case 220:
    case 221:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_10_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_20_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_30_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_40_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_50_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_60_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_70_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_80_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_90_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_100_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_110_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_120_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_130_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_140_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_END_OF_NUMBER_STANDARD_REGULAR;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_10_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_20_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_30_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_40_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_50_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_60_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_70_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_80_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_90_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_100_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_110_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_120_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_130_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_140_KM_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_END_OF_NUMBER_STANDARD_ELECTRONI;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_END_ALL_RESTRICTION_REGULAR;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_END_ALL_RESTRICTION_ELECTRONIC;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_5_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_15_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_25_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_35_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_45_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_55_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_65_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_75_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_85_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_95_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_105_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_115_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_125_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_135_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_REGULAR_145_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_5_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_15_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_25_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_35_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_45_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_55_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_65_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_75_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_85_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONIC_95_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONI_105_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONI_115_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONI_125_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONI_135_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_STANDARD_ELECTRONI_145_KM_H_MP_H;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_MOTORWAY_BEGIN;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_MOTORWAY_END;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_EXPRESSWAY_BEGIN;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_EXPRESSWAY_END;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_PLAYFROUND_AREA_BEGIN;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_PLAYGROUND_AREA_END;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_NO_PASSING_START_REGULAR;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_END_OF_NO_PASSING;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_NO_PASSING_START_ELECTRONIC;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_END_OF_NO_PASSING_ELECTRONIC;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_NO_SIGN_DETECTED;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::SIGN_TYPE_1_E_INVALID_SIGN;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::Sign_type_1Type_MIN;
const Vision_only_tsr_727_Sign_type_1Type Vision_only_tsr_727::Sign_type_1Type_MAX;
const int Vision_only_tsr_727::Sign_type_1Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Vision_only_tsr_727_Supplementary_sign_type_4Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_NONE;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_RAIN;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_SNOW;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_TRAILER;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_TIME;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_ARROW_LEFT;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_ARROW_RIGHT;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_BENDARRIOW_LEFT;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_BENDARROW_RIGHT;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_TRUCK;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_DISTANCE_AROW_DIST_FOR;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_WEIGHT;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_DISTANCE_IN;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_TRACTOR;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_SNOW_RAIN;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_SCHOOL;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_RAIN_CLOUD;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_FOG;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_HAZARDOUS_METERIALS;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_NIGHT;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_SUPP_SIGN_GENERIC;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_4_INVALID_SUPP;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::Supplementary_sign_type_4Type_MIN;
const Vision_only_tsr_727_Supplementary_sign_type_4Type Vision_only_tsr_727::Supplementary_sign_type_4Type_MAX;
const int Vision_only_tsr_727::Supplementary_sign_type_4Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Vision_only_tsr_727_Supplementary_sign_type_3Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_NONE;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_RAIN;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_SNOW;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_TRAILER;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_TIME;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_ARROW_LEFT;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_ARROW_RIGHT;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_BENDARRIOW_LEFT;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_BENDARROW_RIGHT;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_TRUCK;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_DISTANCE_AROW_DIST_FOR;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_WEIGHT;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_DISTANCE_IN;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_TRACTOR;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_SNOW_RAIN;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_SCHOOL;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_RAIN_CLOUD;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_FOG;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_HAZARDOUS_METERIALS;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_NIGHT;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_SUPP_SIGN_GENERIC;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_3_INVALID_SUPP;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::Supplementary_sign_type_3Type_MIN;
const Vision_only_tsr_727_Supplementary_sign_type_3Type Vision_only_tsr_727::Supplementary_sign_type_3Type_MAX;
const int Vision_only_tsr_727::Supplementary_sign_type_3Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Vision_only_tsr_727_Supplementary_sign_type_2Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_NONE;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_RAIN;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_SNOW;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_TRAILER;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_TIME;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_ARROW_LEFT;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_ARROW_RIGHT;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_BENDARRIOW_LEFT;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_BENDARROW_RIGHT;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_TRUCK;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_DISTANCE_AROW_DIST_FOR;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_WEIGHT;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_DISTANCE_IN;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_TRACTOR;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_SNOW_RAIN;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_SCHOOL;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_RAIN_CLOUD;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_FOG;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_HAZARDOUS_METERIALS;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_NIGHT;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_SUPP_SIGN_GENERIC;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_2_INVALID_SUPP;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::Supplementary_sign_type_2Type_MIN;
const Vision_only_tsr_727_Supplementary_sign_type_2Type Vision_only_tsr_727::Supplementary_sign_type_2Type_MAX;
const int Vision_only_tsr_727::Supplementary_sign_type_2Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Vision_only_tsr_727_Supplementary_sign_type_1Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_NONE;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_RAIN;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_SNOW;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_TRAILER;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_TIME;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_ARROW_LEFT;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_ARROW_RIGHT;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_BENDARRIOW_LEFT;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_BENDARROW_RIGHT;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_TRUCK;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_DISTANCE_AROW_DIST_FOR;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_WEIGHT;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_DISTANCE_IN;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_TRACTOR;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_SNOW_RAIN;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_SCHOOL;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_RAIN_CLOUD;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_FOG;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_HAZARDOUS_METERIALS;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_NIGHT;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_SUPP_SIGN_GENERIC;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::SUPPLEMENTARY_SIGN_TYPE_1_INVALID_SUPP;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::Supplementary_sign_type_1Type_MIN;
const Vision_only_tsr_727_Supplementary_sign_type_1Type Vision_only_tsr_727::Supplementary_sign_type_1Type_MAX;
const int Vision_only_tsr_727::Supplementary_sign_type_1Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_5_724_Vision_only_sign_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 50:
    case 64:
    case 65:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 200:
    case 201:
    case 220:
    case 221:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_10_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_20_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_30_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_40_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_50_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_60_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_70_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_80_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_90_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_100_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_110_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_120_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_130_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_140_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_END_OF_NUMBER_STANDARD_REGULAR;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_10_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_20_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_30_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_40_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_50_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_60_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_70_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_80_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_90_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_100_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_110_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_120_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_130_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_140_KM_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_END_OF_NUMBER_STANDARD_ELECTRONI;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_END_ALL_RESTRICTION_REGULAR;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_END_ALL_RESTRICTION_ELECTRONIC;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_5_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_15_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_25_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_35_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_45_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_55_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_65_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_75_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_85_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_95_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_105_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_115_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_125_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_135_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_145_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_5_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_15_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_25_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_35_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_45_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_55_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_65_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_75_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_85_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_95_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_105_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_115_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_125_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_135_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_145_KM_H_MP_H;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_MOTORWAY_BEGIN;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_MOTORWAY_END;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_EXPRESSWAY_BEGIN;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_EXPRESSWAY_END;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_PLAYFROUND_AREA_BEGIN;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_PLAYGROUND_AREA_END;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_NO_PASSING_START_REGULAR;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_END_OF_NO_PASSING;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_NO_PASSING_START_ELECTRONIC;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_END_OF_NO_PASSING_ELECTRONIC;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_NO_SIGN_DETECTED;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::VISION_ONLY_SIGN_TYPE_E_INVALID_SIGN;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::Vision_only_sign_typeType_MIN;
const Tsr_detail_5_724_Vision_only_sign_typeType Tsr_detail_5_724::Vision_only_sign_typeType_MAX;
const int Tsr_detail_5_724::Vision_only_sign_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_5_724_Supplementary_sign_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_NONE;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_RAIN;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_SNOW;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_TRAILER;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_TIME;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_ARROW_LEFT;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_ARROW_RIGHT;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_BENDARRIOW_LEFT;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_BENDARROW_RIGHT;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_TRUCK;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_DISTANCE_AROW_DIST_FOR;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_WEIGHT;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_DISTANCE_IN;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_TRACTOR;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_SNOW_RAIN;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_SCHOOL;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_RAIN_CLOUD;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_FOG;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_HAZARDOUS_METERIALS;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_NIGHT;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_SUPP_SIGN_GENERIC;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::SUPPLEMENTARY_SIGN_TYPE_INVALID_SUPP;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::Supplementary_sign_typeType_MIN;
const Tsr_detail_5_724_Supplementary_sign_typeType Tsr_detail_5_724::Supplementary_sign_typeType_MAX;
const int Tsr_detail_5_724::Supplementary_sign_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_5_724_Filter_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_5_724_Filter_typeType Tsr_detail_5_724::FILTER_TYPE_NOT_FILTERED;
const Tsr_detail_5_724_Filter_typeType Tsr_detail_5_724::FILTER_TYPE_IRRELEVANT_TO_THE_HOST;
const Tsr_detail_5_724_Filter_typeType Tsr_detail_5_724::FILTER_TYPE_ON_VEHICLE_TRUCK;
const Tsr_detail_5_724_Filter_typeType Tsr_detail_5_724::FILTER_TYPE_EMBEDDED;
const Tsr_detail_5_724_Filter_typeType Tsr_detail_5_724::Filter_typeType_MIN;
const Tsr_detail_5_724_Filter_typeType Tsr_detail_5_724::Filter_typeType_MAX;
const int Tsr_detail_5_724::Filter_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_6_725_Vision_only_sign_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 50:
    case 64:
    case 65:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 200:
    case 201:
    case 220:
    case 221:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_10_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_20_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_30_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_40_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_50_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_60_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_70_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_80_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_90_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_100_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_110_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_120_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_130_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_140_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_END_OF_NUMBER_STANDARD_REGULAR;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_10_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_20_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_30_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_40_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_50_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_60_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_70_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_80_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_90_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_100_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_110_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_120_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_130_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_140_KM_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_END_OF_NUMBER_STANDARD_ELECTRONI;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_END_ALL_RESTRICTION_REGULAR;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_END_ALL_RESTRICTION_ELECTRONIC;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_5_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_15_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_25_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_35_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_45_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_55_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_65_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_75_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_85_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_95_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_105_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_115_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_125_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_135_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_145_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_5_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_15_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_25_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_35_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_45_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_55_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_65_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_75_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_85_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_95_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_105_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_115_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_125_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_135_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_145_KM_H_MP_H;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_MOTORWAY_BEGIN;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_MOTORWAY_END;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_EXPRESSWAY_BEGIN;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_EXPRESSWAY_END;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_PLAYFROUND_AREA_BEGIN;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_PLAYGROUND_AREA_END;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_NO_PASSING_START_REGULAR;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_END_OF_NO_PASSING;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_NO_PASSING_START_ELECTRONIC;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_END_OF_NO_PASSING_ELECTRONIC;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_NO_SIGN_DETECTED;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::VISION_ONLY_SIGN_TYPE_E_INVALID_SIGN;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::Vision_only_sign_typeType_MIN;
const Tsr_detail_6_725_Vision_only_sign_typeType Tsr_detail_6_725::Vision_only_sign_typeType_MAX;
const int Tsr_detail_6_725::Vision_only_sign_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_6_725_Supplementary_sign_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_NONE;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_RAIN;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_SNOW;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_TRAILER;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_TIME;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_ARROW_LEFT;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_ARROW_RIGHT;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_BENDARRIOW_LEFT;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_BENDARROW_RIGHT;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_TRUCK;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_DISTANCE_AROW_DIST_FOR;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_WEIGHT;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_DISTANCE_IN;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_TRACTOR;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_SNOW_RAIN;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_SCHOOL;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_RAIN_CLOUD;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_FOG;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_HAZARDOUS_METERIALS;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_NIGHT;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_SUPP_SIGN_GENERIC;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::SUPPLEMENTARY_SIGN_TYPE_INVALID_SUPP;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::Supplementary_sign_typeType_MIN;
const Tsr_detail_6_725_Supplementary_sign_typeType Tsr_detail_6_725::Supplementary_sign_typeType_MAX;
const int Tsr_detail_6_725::Supplementary_sign_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_6_725_Filter_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_6_725_Filter_typeType Tsr_detail_6_725::FILTER_TYPE_NOT_FILTERED;
const Tsr_detail_6_725_Filter_typeType Tsr_detail_6_725::FILTER_TYPE_IRRELEVANT_TO_THE_HOST;
const Tsr_detail_6_725_Filter_typeType Tsr_detail_6_725::FILTER_TYPE_ON_VEHICLE_TRUCK;
const Tsr_detail_6_725_Filter_typeType Tsr_detail_6_725::FILTER_TYPE_EMBEDDED;
const Tsr_detail_6_725_Filter_typeType Tsr_detail_6_725::Filter_typeType_MIN;
const Tsr_detail_6_725_Filter_typeType Tsr_detail_6_725::Filter_typeType_MAX;
const int Tsr_detail_6_725::Filter_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_3_722_Vision_only_sign_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 50:
    case 64:
    case 65:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 200:
    case 201:
    case 220:
    case 221:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_10_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_20_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_30_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_40_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_50_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_60_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_70_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_80_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_90_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_100_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_110_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_120_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_130_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_140_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_END_OF_NUMBER_STANDARD_REGULAR;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_10_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_20_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_30_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_40_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_50_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_60_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_70_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_80_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_90_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_100_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_110_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_120_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_130_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_140_KM_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_END_OF_NUMBER_STANDARD_ELECTRONI;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_END_ALL_RESTRICTION_REGULAR;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_END_ALL_RESTRICTION_ELECTRONIC;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_5_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_15_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_25_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_35_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_45_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_55_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_65_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_75_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_85_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_95_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_105_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_115_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_125_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_135_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_145_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_5_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_15_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_25_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_35_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_45_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_55_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_65_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_75_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_85_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_95_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_105_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_115_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_125_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_135_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_145_KM_H_MP_H;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_MOTORWAY_BEGIN;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_MOTORWAY_END;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_EXPRESSWAY_BEGIN;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_EXPRESSWAY_END;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_PLAYFROUND_AREA_BEGIN;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_PLAYGROUND_AREA_END;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_NO_PASSING_START_REGULAR;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_END_OF_NO_PASSING;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_NO_PASSING_START_ELECTRONIC;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_END_OF_NO_PASSING_ELECTRONIC;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_NO_SIGN_DETECTED;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::VISION_ONLY_SIGN_TYPE_E_INVALID_SIGN;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::Vision_only_sign_typeType_MIN;
const Tsr_detail_3_722_Vision_only_sign_typeType Tsr_detail_3_722::Vision_only_sign_typeType_MAX;
const int Tsr_detail_3_722::Vision_only_sign_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_3_722_Supplementary_sign_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_NONE;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_RAIN;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_SNOW;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_TRAILER;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_TIME;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_ARROW_LEFT;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_ARROW_RIGHT;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_BENDARRIOW_LEFT;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_BENDARROW_RIGHT;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_TRUCK;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_DISTANCE_AROW_DIST_FOR;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_WEIGHT;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_DISTANCE_IN;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_TRACTOR;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_SNOW_RAIN;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_SCHOOL;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_RAIN_CLOUD;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_FOG;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_HAZARDOUS_METERIALS;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_NIGHT;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_SUPP_SIGN_GENERIC;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::SUPPLEMENTARY_SIGN_TYPE_INVALID_SUPP;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::Supplementary_sign_typeType_MIN;
const Tsr_detail_3_722_Supplementary_sign_typeType Tsr_detail_3_722::Supplementary_sign_typeType_MAX;
const int Tsr_detail_3_722::Supplementary_sign_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_3_722_Filter_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_3_722_Filter_typeType Tsr_detail_3_722::FILTER_TYPE_NOT_FILTERED;
const Tsr_detail_3_722_Filter_typeType Tsr_detail_3_722::FILTER_TYPE_IRRELEVANT_TO_THE_HOST;
const Tsr_detail_3_722_Filter_typeType Tsr_detail_3_722::FILTER_TYPE_ON_VEHICLE_TRUCK;
const Tsr_detail_3_722_Filter_typeType Tsr_detail_3_722::FILTER_TYPE_EMBEDDED;
const Tsr_detail_3_722_Filter_typeType Tsr_detail_3_722::Filter_typeType_MIN;
const Tsr_detail_3_722_Filter_typeType Tsr_detail_3_722::Filter_typeType_MAX;
const int Tsr_detail_3_722::Filter_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_4_723_Vision_only_sign_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 50:
    case 64:
    case 65:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 200:
    case 201:
    case 220:
    case 221:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_10_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_20_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_30_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_40_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_50_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_60_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_70_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_80_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_90_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_100_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_110_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_120_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_130_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_140_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_END_OF_NUMBER_STANDARD_REGULAR;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_10_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_20_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_30_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_40_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_50_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_60_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_70_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_80_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_90_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_100_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_110_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_120_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_130_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_140_KM_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_END_OF_NUMBER_STANDARD_ELECTRONI;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_END_ALL_RESTRICTION_REGULAR;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_END_ALL_RESTRICTION_ELECTRONIC;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_5_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_15_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_25_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_35_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_45_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_55_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_65_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_75_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_85_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_95_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_105_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_115_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_125_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_135_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_145_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_5_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_15_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_25_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_35_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_45_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_55_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_65_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_75_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_85_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_95_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_105_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_115_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_125_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_135_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_145_KM_H_MP_H;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_MOTORWAY_BEGIN;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_MOTORWAY_END;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_EXPRESSWAY_BEGIN;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_EXPRESSWAY_END;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_PLAYFROUND_AREA_BEGIN;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_PLAYGROUND_AREA_END;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_NO_PASSING_START_REGULAR;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_END_OF_NO_PASSING;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_NO_PASSING_START_ELECTRONIC;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_END_OF_NO_PASSING_ELECTRONIC;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_NO_SIGN_DETECTED;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::VISION_ONLY_SIGN_TYPE_E_INVALID_SIGN;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::Vision_only_sign_typeType_MIN;
const Tsr_detail_4_723_Vision_only_sign_typeType Tsr_detail_4_723::Vision_only_sign_typeType_MAX;
const int Tsr_detail_4_723::Vision_only_sign_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_4_723_Supplementary_sign_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_NONE;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_RAIN;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_SNOW;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_TRAILER;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_TIME;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_ARROW_LEFT;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_ARROW_RIGHT;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_BENDARRIOW_LEFT;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_BENDARROW_RIGHT;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_TRUCK;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_DISTANCE_AROW_DIST_FOR;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_WEIGHT;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_DISTANCE_IN;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_TRACTOR;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_SNOW_RAIN;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_SCHOOL;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_RAIN_CLOUD;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_FOG;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_HAZARDOUS_METERIALS;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_NIGHT;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_SUPP_SIGN_GENERIC;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::SUPPLEMENTARY_SIGN_TYPE_INVALID_SUPP;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::Supplementary_sign_typeType_MIN;
const Tsr_detail_4_723_Supplementary_sign_typeType Tsr_detail_4_723::Supplementary_sign_typeType_MAX;
const int Tsr_detail_4_723::Supplementary_sign_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_4_723_Filter_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_4_723_Filter_typeType Tsr_detail_4_723::FILTER_TYPE_NOT_FILTERED;
const Tsr_detail_4_723_Filter_typeType Tsr_detail_4_723::FILTER_TYPE_IRRELEVANT_TO_THE_HOST;
const Tsr_detail_4_723_Filter_typeType Tsr_detail_4_723::FILTER_TYPE_ON_VEHICLE_TRUCK;
const Tsr_detail_4_723_Filter_typeType Tsr_detail_4_723::FILTER_TYPE_EMBEDDED;
const Tsr_detail_4_723_Filter_typeType Tsr_detail_4_723::Filter_typeType_MIN;
const Tsr_detail_4_723_Filter_typeType Tsr_detail_4_723::Filter_typeType_MAX;
const int Tsr_detail_4_723::Filter_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_1_720_Vision_only_sign_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 50:
    case 64:
    case 65:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 200:
    case 201:
    case 220:
    case 221:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_10_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_20_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_30_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_40_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_50_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_60_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_70_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_80_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_90_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_100_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_110_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_120_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_130_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_140_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_END_OF_NUMBER_STANDARD_REGULAR;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_10_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_20_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_30_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_40_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_50_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_60_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_70_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_80_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_90_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_100_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_110_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_120_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_130_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_140_KM_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_END_OF_NUMBER_STANDARD_ELECTRONI;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_END_ALL_RESTRICTION_REGULAR;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_END_ALL_RESTRICTION_ELECTRONIC;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_5_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_15_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_25_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_35_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_45_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_55_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_65_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_75_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_85_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_95_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_105_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_115_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_125_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_135_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_145_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_5_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_15_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_25_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_35_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_45_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_55_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_65_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_75_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_85_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_95_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_105_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_115_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_125_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_135_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_145_KM_H_MP_H;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_MOTORWAY_BEGIN;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_MOTORWAY_END;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_EXPRESSWAY_BEGIN;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_EXPRESSWAY_END;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_PLAYFROUND_AREA_BEGIN;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_PLAYGROUND_AREA_END;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_NO_PASSING_START_REGULAR;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_END_OF_NO_PASSING;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_NO_PASSING_START_ELECTRONIC;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_END_OF_NO_PASSING_ELECTRONIC;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_NO_SIGN_DETECTED;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::VISION_ONLY_SIGN_TYPE_E_INVALID_SIGN;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::Vision_only_sign_typeType_MIN;
const Tsr_detail_1_720_Vision_only_sign_typeType Tsr_detail_1_720::Vision_only_sign_typeType_MAX;
const int Tsr_detail_1_720::Vision_only_sign_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_1_720_Supplementary_sign_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_NONE;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_RAIN;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_SNOW;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_TRAILER;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_TIME;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_ARROW_LEFT;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_ARROW_RIGHT;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_BENDARRIOW_LEFT;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_BENDARROW_RIGHT;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_TRUCK;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_DISTANCE_AROW_DIST_FOR;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_WEIGHT;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_DISTANCE_IN;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_TRACTOR;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_SNOW_RAIN;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_SCHOOL;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_RAIN_CLOUD;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_FOG;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_HAZARDOUS_METERIALS;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_NIGHT;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_SUPP_SIGN_GENERIC;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::SUPPLEMENTARY_SIGN_TYPE_INVALID_SUPP;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::Supplementary_sign_typeType_MIN;
const Tsr_detail_1_720_Supplementary_sign_typeType Tsr_detail_1_720::Supplementary_sign_typeType_MAX;
const int Tsr_detail_1_720::Supplementary_sign_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_1_720_Filter_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_1_720_Filter_typeType Tsr_detail_1_720::FILTER_TYPE_NOT_FILTERED;
const Tsr_detail_1_720_Filter_typeType Tsr_detail_1_720::FILTER_TYPE_IRRELEVANT_TO_THE_HOST;
const Tsr_detail_1_720_Filter_typeType Tsr_detail_1_720::FILTER_TYPE_ON_VEHICLE_TRUCK;
const Tsr_detail_1_720_Filter_typeType Tsr_detail_1_720::FILTER_TYPE_EMBEDDED;
const Tsr_detail_1_720_Filter_typeType Tsr_detail_1_720::Filter_typeType_MIN;
const Tsr_detail_1_720_Filter_typeType Tsr_detail_1_720::Filter_typeType_MAX;
const int Tsr_detail_1_720::Filter_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_2_721_Vision_only_sign_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 50:
    case 64:
    case 65:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 200:
    case 201:
    case 220:
    case 221:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_10_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_20_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_30_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_40_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_50_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_60_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_70_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_80_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_90_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_100_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_110_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_120_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_130_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_140_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_END_OF_NUMBER_STANDARD_REGULAR;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_10_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_20_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_30_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_40_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_50_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_60_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_70_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_80_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_90_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_100_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_110_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_120_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_130_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_140_KM_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_END_OF_NUMBER_STANDARD_ELECTRONI;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_END_ALL_RESTRICTION_REGULAR;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_END_ALL_RESTRICTION_ELECTRONIC;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_5_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_15_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_25_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_35_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_45_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_55_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_65_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_75_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_85_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_95_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_105_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_115_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_125_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_135_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_145_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_5_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_15_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_25_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_35_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_45_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_55_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_65_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_75_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_85_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_95_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_105_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_115_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_125_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_135_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONI_145_KM_H_MP_H;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_MOTORWAY_BEGIN;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_MOTORWAY_END;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_EXPRESSWAY_BEGIN;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_EXPRESSWAY_END;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_PLAYFROUND_AREA_BEGIN;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_PLAYGROUND_AREA_END;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_NO_PASSING_START_REGULAR;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_END_OF_NO_PASSING;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_NO_PASSING_START_ELECTRONIC;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_END_OF_NO_PASSING_ELECTRONIC;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_NO_SIGN_DETECTED;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::VISION_ONLY_SIGN_TYPE_E_INVALID_SIGN;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::Vision_only_sign_typeType_MIN;
const Tsr_detail_2_721_Vision_only_sign_typeType Tsr_detail_2_721::Vision_only_sign_typeType_MAX;
const int Tsr_detail_2_721::Vision_only_sign_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_2_721_Supplementary_sign_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 255:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_NONE;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_RAIN;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_SNOW;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_TRAILER;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_TIME;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_ARROW_LEFT;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_ARROW_RIGHT;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_BENDARRIOW_LEFT;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_BENDARROW_RIGHT;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_TRUCK;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_DISTANCE_AROW_DIST_FOR;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_WEIGHT;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_DISTANCE_IN;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_TRACTOR;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_SNOW_RAIN;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_SCHOOL;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_RAIN_CLOUD;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_FOG;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_HAZARDOUS_METERIALS;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_NIGHT;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_SUPP_SIGN_GENERIC;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::SUPPLEMENTARY_SIGN_TYPE_INVALID_SUPP;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::Supplementary_sign_typeType_MIN;
const Tsr_detail_2_721_Supplementary_sign_typeType Tsr_detail_2_721::Supplementary_sign_typeType_MAX;
const int Tsr_detail_2_721::Supplementary_sign_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Tsr_detail_2_721_Filter_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Tsr_detail_2_721_Filter_typeType Tsr_detail_2_721::FILTER_TYPE_NOT_FILTERED;
const Tsr_detail_2_721_Filter_typeType Tsr_detail_2_721::FILTER_TYPE_IRRELEVANT_TO_THE_HOST;
const Tsr_detail_2_721_Filter_typeType Tsr_detail_2_721::FILTER_TYPE_ON_VEHICLE_TRUCK;
const Tsr_detail_2_721_Filter_typeType Tsr_detail_2_721::FILTER_TYPE_EMBEDDED;
const Tsr_detail_2_721_Filter_typeType Tsr_detail_2_721::Filter_typeType_MIN;
const Tsr_detail_2_721_Filter_typeType Tsr_detail_2_721::Filter_typeType_MAX;
const int Tsr_detail_2_721::Filter_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Aftermarket_ext_669::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Aftermarket_ext_669::kLdwAvailabilityRightFieldNumber;
const int Aftermarket_ext_669::kLdwAvailabilityLeftFieldNumber;
const int Aftermarket_ext_669::kLaneTypeRightFieldNumber;
const int Aftermarket_ext_669::kLaneTypeLeftFieldNumber;
const int Aftermarket_ext_669::kLaneConfRightFieldNumber;
const int Aftermarket_ext_669::kLaneConfLeftFieldNumber;
const int Aftermarket_ext_669::kDistanceToLaneRFieldNumber;
const int Aftermarket_ext_669::kDistanceToLaneLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Aftermarket_ext_669::Aftermarket_ext_669()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tsr_2eproto::scc_info_Aftermarket_ext_669.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.TSR.Aftermarket_ext_669)
}
Aftermarket_ext_669::Aftermarket_ext_669(const Aftermarket_ext_669& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ldw_availability_right_, &from.ldw_availability_right_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_to_lane_l_) -
    reinterpret_cast<char*>(&ldw_availability_right_)) + sizeof(distance_to_lane_l_));
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.TSR.Aftermarket_ext_669)
}

void Aftermarket_ext_669::SharedCtor() {
  ::memset(&ldw_availability_right_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_to_lane_l_) -
      reinterpret_cast<char*>(&ldw_availability_right_)) + sizeof(distance_to_lane_l_));
}

Aftermarket_ext_669::~Aftermarket_ext_669() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.TSR.Aftermarket_ext_669)
  SharedDtor();
}

void Aftermarket_ext_669::SharedDtor() {
}

void Aftermarket_ext_669::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Aftermarket_ext_669& Aftermarket_ext_669::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tsr_2eproto::scc_info_Aftermarket_ext_669.base);
  return *internal_default_instance();
}


void Aftermarket_ext_669::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.TSR.Aftermarket_ext_669)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ldw_availability_right_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_to_lane_l_) -
      reinterpret_cast<char*>(&ldw_availability_right_)) + sizeof(distance_to_lane_l_));
  _internal_metadata_.Clear();
}

bool Aftermarket_ext_669::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.TSR.Aftermarket_ext_669)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Calmcar.drivers.TSR.Aftermarket_ext_669.Ldw_availability_rightType ldw_availability_right = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ldw_availability_right(static_cast< ::Calmcar::drivers::TSR::Aftermarket_ext_669_Ldw_availability_rightType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aftermarket_ext_669.Ldw_availability_leftType ldw_availability_left = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ldw_availability_left(static_cast< ::Calmcar::drivers::TSR::Aftermarket_ext_669_Ldw_availability_leftType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aftermarket_ext_669.Lane_type_rightType lane_type_right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lane_type_right(static_cast< ::Calmcar::drivers::TSR::Aftermarket_ext_669_Lane_type_rightType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aftermarket_ext_669.Lane_type_leftType lane_type_left = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lane_type_left(static_cast< ::Calmcar::drivers::TSR::Aftermarket_ext_669_Lane_type_leftType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aftermarket_ext_669.Lane_conf_rightType lane_conf_right = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lane_conf_right(static_cast< ::Calmcar::drivers::TSR::Aftermarket_ext_669_Lane_conf_rightType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aftermarket_ext_669.Lane_conf_leftType lane_conf_left = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lane_conf_left(static_cast< ::Calmcar::drivers::TSR::Aftermarket_ext_669_Lane_conf_leftType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double distance_to_lane_r = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_to_lane_r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double distance_to_lane_l = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_to_lane_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.TSR.Aftermarket_ext_669)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.TSR.Aftermarket_ext_669)
  return false;
#undef DO_
}

void Aftermarket_ext_669::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.TSR.Aftermarket_ext_669)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Calmcar.drivers.TSR.Aftermarket_ext_669.Ldw_availability_rightType ldw_availability_right = 1;
  if (this->ldw_availability_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ldw_availability_right(), output);
  }

  // .Calmcar.drivers.TSR.Aftermarket_ext_669.Ldw_availability_leftType ldw_availability_left = 2;
  if (this->ldw_availability_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ldw_availability_left(), output);
  }

  // .Calmcar.drivers.TSR.Aftermarket_ext_669.Lane_type_rightType lane_type_right = 3;
  if (this->lane_type_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->lane_type_right(), output);
  }

  // .Calmcar.drivers.TSR.Aftermarket_ext_669.Lane_type_leftType lane_type_left = 4;
  if (this->lane_type_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->lane_type_left(), output);
  }

  // .Calmcar.drivers.TSR.Aftermarket_ext_669.Lane_conf_rightType lane_conf_right = 5;
  if (this->lane_conf_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->lane_conf_right(), output);
  }

  // .Calmcar.drivers.TSR.Aftermarket_ext_669.Lane_conf_leftType lane_conf_left = 6;
  if (this->lane_conf_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->lane_conf_left(), output);
  }

  // double distance_to_lane_r = 7;
  if (this->distance_to_lane_r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->distance_to_lane_r(), output);
  }

  // double distance_to_lane_l = 8;
  if (this->distance_to_lane_l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->distance_to_lane_l(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.TSR.Aftermarket_ext_669)
}

size_t Aftermarket_ext_669::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.TSR.Aftermarket_ext_669)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .Calmcar.drivers.TSR.Aftermarket_ext_669.Ldw_availability_rightType ldw_availability_right = 1;
  if (this->ldw_availability_right() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ldw_availability_right());
  }

  // .Calmcar.drivers.TSR.Aftermarket_ext_669.Ldw_availability_leftType ldw_availability_left = 2;
  if (this->ldw_availability_left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ldw_availability_left());
  }

  // .Calmcar.drivers.TSR.Aftermarket_ext_669.Lane_type_rightType lane_type_right = 3;
  if (this->lane_type_right() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_type_right());
  }

  // .Calmcar.drivers.TSR.Aftermarket_ext_669.Lane_type_leftType lane_type_left = 4;
  if (this->lane_type_left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_type_left());
  }

  // .Calmcar.drivers.TSR.Aftermarket_ext_669.Lane_conf_rightType lane_conf_right = 5;
  if (this->lane_conf_right() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_conf_right());
  }

  // .Calmcar.drivers.TSR.Aftermarket_ext_669.Lane_conf_leftType lane_conf_left = 6;
  if (this->lane_conf_left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_conf_left());
  }

  // double distance_to_lane_r = 7;
  if (this->distance_to_lane_r() != 0) {
    total_size += 1 + 8;
  }

  // double distance_to_lane_l = 8;
  if (this->distance_to_lane_l() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Aftermarket_ext_669::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Aftermarket_ext_669*>(&from));
}

void Aftermarket_ext_669::MergeFrom(const Aftermarket_ext_669& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.TSR.Aftermarket_ext_669)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ldw_availability_right() != 0) {
    set_ldw_availability_right(from.ldw_availability_right());
  }
  if (from.ldw_availability_left() != 0) {
    set_ldw_availability_left(from.ldw_availability_left());
  }
  if (from.lane_type_right() != 0) {
    set_lane_type_right(from.lane_type_right());
  }
  if (from.lane_type_left() != 0) {
    set_lane_type_left(from.lane_type_left());
  }
  if (from.lane_conf_right() != 0) {
    set_lane_conf_right(from.lane_conf_right());
  }
  if (from.lane_conf_left() != 0) {
    set_lane_conf_left(from.lane_conf_left());
  }
  if (from.distance_to_lane_r() != 0) {
    set_distance_to_lane_r(from.distance_to_lane_r());
  }
  if (from.distance_to_lane_l() != 0) {
    set_distance_to_lane_l(from.distance_to_lane_l());
  }
}

void Aftermarket_ext_669::CopyFrom(const Aftermarket_ext_669& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.TSR.Aftermarket_ext_669)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aftermarket_ext_669::IsInitialized() const {
  return true;
}

void Aftermarket_ext_669::Swap(Aftermarket_ext_669* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Aftermarket_ext_669::InternalSwap(Aftermarket_ext_669* other) {
  using std::swap;
  swap(ldw_availability_right_, other->ldw_availability_right_);
  swap(ldw_availability_left_, other->ldw_availability_left_);
  swap(lane_type_right_, other->lane_type_right_);
  swap(lane_type_left_, other->lane_type_left_);
  swap(lane_conf_right_, other->lane_conf_right_);
  swap(lane_conf_left_, other->lane_conf_left_);
  swap(distance_to_lane_r_, other->distance_to_lane_r_);
  swap(distance_to_lane_l_, other->distance_to_lane_l_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Aftermarket_ext_669::GetTypeName() const {
  return "Calmcar.drivers.TSR.Aftermarket_ext_669";
}


// ===================================================================

void Signal_car_760::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal_car_760::kWipersAvailabledFieldNumber;
const int Signal_car_760::kHighbeamAvailabledFieldNumber;
const int Signal_car_760::kLowbeamAvailabledFieldNumber;
const int Signal_car_760::kBrakesFieldNumber;
const int Signal_car_760::kLeftBlinkFieldNumber;
const int Signal_car_760::kRightBlinkFieldNumber;
const int Signal_car_760::kWippersFieldNumber;
const int Signal_car_760::kLowbeamFieldNumber;
const int Signal_car_760::kHighbeamFieldNumber;
const int Signal_car_760::kReserved1FieldNumber;
const int Signal_car_760::kReserved2FieldNumber;
const int Signal_car_760::kReserved3FieldNumber;
const int Signal_car_760::kSpeedFieldNumber;
const int Signal_car_760::kReservedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal_car_760::Signal_car_760()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tsr_2eproto::scc_info_Signal_car_760.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.TSR.Signal_car_760)
}
Signal_car_760::Signal_car_760(const Signal_car_760& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wipers_availabled_, &from.wipers_availabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&reserved_) -
    reinterpret_cast<char*>(&wipers_availabled_)) + sizeof(reserved_));
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.TSR.Signal_car_760)
}

void Signal_car_760::SharedCtor() {
  ::memset(&wipers_availabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reserved_) -
      reinterpret_cast<char*>(&wipers_availabled_)) + sizeof(reserved_));
}

Signal_car_760::~Signal_car_760() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.TSR.Signal_car_760)
  SharedDtor();
}

void Signal_car_760::SharedDtor() {
}

void Signal_car_760::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signal_car_760& Signal_car_760::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tsr_2eproto::scc_info_Signal_car_760.base);
  return *internal_default_instance();
}


void Signal_car_760::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.TSR.Signal_car_760)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&wipers_availabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reserved_) -
      reinterpret_cast<char*>(&wipers_availabled_)) + sizeof(reserved_));
  _internal_metadata_.Clear();
}

bool Signal_car_760::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.TSR.Signal_car_760)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Calmcar.drivers.TSR.Signal_car_760.Wipers_availabledType wipers_availabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_wipers_availabled(static_cast< ::Calmcar::drivers::TSR::Signal_car_760_Wipers_availabledType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Signal_car_760.Highbeam_availabledType highbeam_availabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_highbeam_availabled(static_cast< ::Calmcar::drivers::TSR::Signal_car_760_Highbeam_availabledType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Signal_car_760.Lowbeam_availabledType lowbeam_availabled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lowbeam_availabled(static_cast< ::Calmcar::drivers::TSR::Signal_car_760_Lowbeam_availabledType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Signal_car_760.BrakesType brakes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_brakes(static_cast< ::Calmcar::drivers::TSR::Signal_car_760_BrakesType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Signal_car_760.Left_blinkType left_blink = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_left_blink(static_cast< ::Calmcar::drivers::TSR::Signal_car_760_Left_blinkType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Signal_car_760.Right_blinkType right_blink = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_right_blink(static_cast< ::Calmcar::drivers::TSR::Signal_car_760_Right_blinkType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Signal_car_760.WippersType wippers = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_wippers(static_cast< ::Calmcar::drivers::TSR::Signal_car_760_WippersType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Signal_car_760.LowbeamType lowbeam = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lowbeam(static_cast< ::Calmcar::drivers::TSR::Signal_car_760_LowbeamType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Signal_car_760.HighbeamType highbeam = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_highbeam(static_cast< ::Calmcar::drivers::TSR::Signal_car_760_HighbeamType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reserved1 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reserved2 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reserved3 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speed = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reserved = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.TSR.Signal_car_760)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.TSR.Signal_car_760)
  return false;
#undef DO_
}

void Signal_car_760::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.TSR.Signal_car_760)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Calmcar.drivers.TSR.Signal_car_760.Wipers_availabledType wipers_availabled = 1;
  if (this->wipers_availabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->wipers_availabled(), output);
  }

  // .Calmcar.drivers.TSR.Signal_car_760.Highbeam_availabledType highbeam_availabled = 2;
  if (this->highbeam_availabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->highbeam_availabled(), output);
  }

  // .Calmcar.drivers.TSR.Signal_car_760.Lowbeam_availabledType lowbeam_availabled = 3;
  if (this->lowbeam_availabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->lowbeam_availabled(), output);
  }

  // .Calmcar.drivers.TSR.Signal_car_760.BrakesType brakes = 4;
  if (this->brakes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->brakes(), output);
  }

  // .Calmcar.drivers.TSR.Signal_car_760.Left_blinkType left_blink = 5;
  if (this->left_blink() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->left_blink(), output);
  }

  // .Calmcar.drivers.TSR.Signal_car_760.Right_blinkType right_blink = 6;
  if (this->right_blink() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->right_blink(), output);
  }

  // .Calmcar.drivers.TSR.Signal_car_760.WippersType wippers = 7;
  if (this->wippers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->wippers(), output);
  }

  // .Calmcar.drivers.TSR.Signal_car_760.LowbeamType lowbeam = 8;
  if (this->lowbeam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->lowbeam(), output);
  }

  // .Calmcar.drivers.TSR.Signal_car_760.HighbeamType highbeam = 9;
  if (this->highbeam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->highbeam(), output);
  }

  // int32 reserved1 = 10;
  if (this->reserved1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->reserved1(), output);
  }

  // int32 reserved2 = 11;
  if (this->reserved2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reserved2(), output);
  }

  // int32 reserved3 = 12;
  if (this->reserved3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->reserved3(), output);
  }

  // int32 speed = 13;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->speed(), output);
  }

  // int32 reserved = 14;
  if (this->reserved() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->reserved(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.TSR.Signal_car_760)
}

size_t Signal_car_760::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.TSR.Signal_car_760)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .Calmcar.drivers.TSR.Signal_car_760.Wipers_availabledType wipers_availabled = 1;
  if (this->wipers_availabled() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->wipers_availabled());
  }

  // .Calmcar.drivers.TSR.Signal_car_760.Highbeam_availabledType highbeam_availabled = 2;
  if (this->highbeam_availabled() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->highbeam_availabled());
  }

  // .Calmcar.drivers.TSR.Signal_car_760.Lowbeam_availabledType lowbeam_availabled = 3;
  if (this->lowbeam_availabled() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lowbeam_availabled());
  }

  // .Calmcar.drivers.TSR.Signal_car_760.BrakesType brakes = 4;
  if (this->brakes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->brakes());
  }

  // .Calmcar.drivers.TSR.Signal_car_760.Left_blinkType left_blink = 5;
  if (this->left_blink() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->left_blink());
  }

  // .Calmcar.drivers.TSR.Signal_car_760.Right_blinkType right_blink = 6;
  if (this->right_blink() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->right_blink());
  }

  // .Calmcar.drivers.TSR.Signal_car_760.WippersType wippers = 7;
  if (this->wippers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->wippers());
  }

  // .Calmcar.drivers.TSR.Signal_car_760.LowbeamType lowbeam = 8;
  if (this->lowbeam() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lowbeam());
  }

  // .Calmcar.drivers.TSR.Signal_car_760.HighbeamType highbeam = 9;
  if (this->highbeam() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->highbeam());
  }

  // int32 reserved1 = 10;
  if (this->reserved1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reserved1());
  }

  // int32 reserved2 = 11;
  if (this->reserved2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reserved2());
  }

  // int32 reserved3 = 12;
  if (this->reserved3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reserved3());
  }

  // int32 speed = 13;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  // int32 reserved = 14;
  if (this->reserved() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reserved());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal_car_760::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Signal_car_760*>(&from));
}

void Signal_car_760::MergeFrom(const Signal_car_760& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.TSR.Signal_car_760)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wipers_availabled() != 0) {
    set_wipers_availabled(from.wipers_availabled());
  }
  if (from.highbeam_availabled() != 0) {
    set_highbeam_availabled(from.highbeam_availabled());
  }
  if (from.lowbeam_availabled() != 0) {
    set_lowbeam_availabled(from.lowbeam_availabled());
  }
  if (from.brakes() != 0) {
    set_brakes(from.brakes());
  }
  if (from.left_blink() != 0) {
    set_left_blink(from.left_blink());
  }
  if (from.right_blink() != 0) {
    set_right_blink(from.right_blink());
  }
  if (from.wippers() != 0) {
    set_wippers(from.wippers());
  }
  if (from.lowbeam() != 0) {
    set_lowbeam(from.lowbeam());
  }
  if (from.highbeam() != 0) {
    set_highbeam(from.highbeam());
  }
  if (from.reserved1() != 0) {
    set_reserved1(from.reserved1());
  }
  if (from.reserved2() != 0) {
    set_reserved2(from.reserved2());
  }
  if (from.reserved3() != 0) {
    set_reserved3(from.reserved3());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.reserved() != 0) {
    set_reserved(from.reserved());
  }
}

void Signal_car_760::CopyFrom(const Signal_car_760& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.TSR.Signal_car_760)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal_car_760::IsInitialized() const {
  return true;
}

void Signal_car_760::Swap(Signal_car_760* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal_car_760::InternalSwap(Signal_car_760* other) {
  using std::swap;
  swap(wipers_availabled_, other->wipers_availabled_);
  swap(highbeam_availabled_, other->highbeam_availabled_);
  swap(lowbeam_availabled_, other->lowbeam_availabled_);
  swap(brakes_, other->brakes_);
  swap(left_blink_, other->left_blink_);
  swap(right_blink_, other->right_blink_);
  swap(wippers_, other->wippers_);
  swap(lowbeam_, other->lowbeam_);
  swap(highbeam_, other->highbeam_);
  swap(reserved1_, other->reserved1_);
  swap(reserved2_, other->reserved2_);
  swap(reserved3_, other->reserved3_);
  swap(speed_, other->speed_);
  swap(reserved_, other->reserved_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Signal_car_760::GetTypeName() const {
  return "Calmcar.drivers.TSR.Signal_car_760";
}


// ===================================================================

void Aws_700::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Aws_700::kReserved1FieldNumber;
const int Aws_700::kReserved2FieldNumber;
const int Aws_700::kReserved3FieldNumber;
const int Aws_700::kReserved4FieldNumber;
const int Aws_700::kReserved5FieldNumber;
const int Aws_700::kReserved6FieldNumber;
const int Aws_700::kTsrWarningLevelFieldNumber;
const int Aws_700::kTsrEnabbledFieldNumber;
const int Aws_700::kRainyHwEnabledFieldNumber;
const int Aws_700::kRainHwFieldNumber;
const int Aws_700::kPcwPeddzFieldNumber;
const int Aws_700::kHwWarningLevelFieldNumber;
const int Aws_700::kHwRepeatableEnabledFieldNumber;
const int Aws_700::kGeneralPedestrianFieldNumber;
const int Aws_700::kBlinkerReminderEnabledFieldNumber;
const int Aws_700::kBlinkerReminderFieldNumber;
const int Aws_700::kFcwOnFieldNumber;
const int Aws_700::kRldwOnFieldNumber;
const int Aws_700::kLldwOnFieldNumber;
const int Aws_700::kLdwOffFieldNumber;
const int Aws_700::kMaintenanceFieldNumber;
const int Aws_700::kFailSafeFieldNumber;
const int Aws_700::kErrorCodeFieldNumber;
const int Aws_700::kErrorActiveFieldNumber;
const int Aws_700::kHeadwayMeasurementFieldNumber;
const int Aws_700::kHeadwayValidFieldNumber;
const int Aws_700::kFlaArmedFieldNumber;
const int Aws_700::kHiLowBeamcontrolFieldNumber;
const int Aws_700::kZeroSpeedFieldNumber;
const int Aws_700::kTimeIndicatorFieldNumber;
const int Aws_700::kSoundTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Aws_700::Aws_700()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tsr_2eproto::scc_info_Aws_700.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.TSR.Aws_700)
}
Aws_700::Aws_700(const Aws_700& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reserved1_, &from.reserved1_,
    static_cast<size_t>(reinterpret_cast<char*>(&sound_type_) -
    reinterpret_cast<char*>(&reserved1_)) + sizeof(sound_type_));
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.TSR.Aws_700)
}

void Aws_700::SharedCtor() {
  ::memset(&reserved1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sound_type_) -
      reinterpret_cast<char*>(&reserved1_)) + sizeof(sound_type_));
}

Aws_700::~Aws_700() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.TSR.Aws_700)
  SharedDtor();
}

void Aws_700::SharedDtor() {
}

void Aws_700::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Aws_700& Aws_700::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tsr_2eproto::scc_info_Aws_700.base);
  return *internal_default_instance();
}


void Aws_700::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.TSR.Aws_700)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reserved1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sound_type_) -
      reinterpret_cast<char*>(&reserved1_)) + sizeof(sound_type_));
  _internal_metadata_.Clear();
}

bool Aws_700::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.TSR.Aws_700)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 reserved1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reserved2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reserved3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reserved4 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reserved5 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reserved6 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Tsr_warning_levelType tsr_warning_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tsr_warning_level(static_cast< ::Calmcar::drivers::TSR::Aws_700_Tsr_warning_levelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Tsr_enabbledType tsr_enabbled = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tsr_enabbled(static_cast< ::Calmcar::drivers::TSR::Aws_700_Tsr_enabbledType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Rainy_hw_enabledType rainy_hw_enabled = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rainy_hw_enabled(static_cast< ::Calmcar::drivers::TSR::Aws_700_Rainy_hw_enabledType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Rain_hwType rain_hw = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rain_hw(static_cast< ::Calmcar::drivers::TSR::Aws_700_Rain_hwType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Pcw_peddzType pcw_peddz = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pcw_peddz(static_cast< ::Calmcar::drivers::TSR::Aws_700_Pcw_peddzType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Hw_warning_levelType hw_warning_level = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_hw_warning_level(static_cast< ::Calmcar::drivers::TSR::Aws_700_Hw_warning_levelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Hw_repeatable_enabledType hw_repeatable_enabled = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_hw_repeatable_enabled(static_cast< ::Calmcar::drivers::TSR::Aws_700_Hw_repeatable_enabledType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.General_pedestrianType general_pedestrian = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_general_pedestrian(static_cast< ::Calmcar::drivers::TSR::Aws_700_General_pedestrianType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Blinker_reminder_enabledType blinker_reminder_enabled = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_blinker_reminder_enabled(static_cast< ::Calmcar::drivers::TSR::Aws_700_Blinker_reminder_enabledType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Blinker_reminderType blinker_reminder = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_blinker_reminder(static_cast< ::Calmcar::drivers::TSR::Aws_700_Blinker_reminderType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Fcw_onType fcw_on = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fcw_on(static_cast< ::Calmcar::drivers::TSR::Aws_700_Fcw_onType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Rldw_onType rldw_on = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rldw_on(static_cast< ::Calmcar::drivers::TSR::Aws_700_Rldw_onType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Lldw_onType lldw_on = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lldw_on(static_cast< ::Calmcar::drivers::TSR::Aws_700_Lldw_onType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Ldw_offType ldw_off = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ldw_off(static_cast< ::Calmcar::drivers::TSR::Aws_700_Ldw_offType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.MaintenanceType maintenance = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_maintenance(static_cast< ::Calmcar::drivers::TSR::Aws_700_MaintenanceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Fail_safeType fail_safe = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fail_safe(static_cast< ::Calmcar::drivers::TSR::Aws_700_Fail_safeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 error_code = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Error_activeType error_active = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_active(static_cast< ::Calmcar::drivers::TSR::Aws_700_Error_activeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 headway_measurement = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headway_measurement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Headway_validType headway_valid = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_headway_valid(static_cast< ::Calmcar::drivers::TSR::Aws_700_Headway_validType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Fla_armedType fla_armed = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fla_armed(static_cast< ::Calmcar::drivers::TSR::Aws_700_Fla_armedType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Hi_low_beamcontrolType hi_low_beamcontrol = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_hi_low_beamcontrol(static_cast< ::Calmcar::drivers::TSR::Aws_700_Hi_low_beamcontrolType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Zero_speedType zero_speed = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_zero_speed(static_cast< ::Calmcar::drivers::TSR::Aws_700_Zero_speedType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Time_indicatorType time_indicator = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_time_indicator(static_cast< ::Calmcar::drivers::TSR::Aws_700_Time_indicatorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700.Sound_typeType sound_type = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sound_type(static_cast< ::Calmcar::drivers::TSR::Aws_700_Sound_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.TSR.Aws_700)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.TSR.Aws_700)
  return false;
#undef DO_
}

void Aws_700::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.TSR.Aws_700)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reserved1 = 1;
  if (this->reserved1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reserved1(), output);
  }

  // int32 reserved2 = 2;
  if (this->reserved2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reserved2(), output);
  }

  // int32 reserved3 = 3;
  if (this->reserved3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reserved3(), output);
  }

  // bool reserved4 = 4;
  if (this->reserved4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reserved4(), output);
  }

  // int32 reserved5 = 5;
  if (this->reserved5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reserved5(), output);
  }

  // int32 reserved6 = 6;
  if (this->reserved6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reserved6(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Tsr_warning_levelType tsr_warning_level = 7;
  if (this->tsr_warning_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->tsr_warning_level(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Tsr_enabbledType tsr_enabbled = 8;
  if (this->tsr_enabbled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->tsr_enabbled(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Rainy_hw_enabledType rainy_hw_enabled = 9;
  if (this->rainy_hw_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->rainy_hw_enabled(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Rain_hwType rain_hw = 10;
  if (this->rain_hw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->rain_hw(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Pcw_peddzType pcw_peddz = 11;
  if (this->pcw_peddz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->pcw_peddz(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Hw_warning_levelType hw_warning_level = 12;
  if (this->hw_warning_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->hw_warning_level(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Hw_repeatable_enabledType hw_repeatable_enabled = 13;
  if (this->hw_repeatable_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->hw_repeatable_enabled(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.General_pedestrianType general_pedestrian = 14;
  if (this->general_pedestrian() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->general_pedestrian(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Blinker_reminder_enabledType blinker_reminder_enabled = 15;
  if (this->blinker_reminder_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->blinker_reminder_enabled(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Blinker_reminderType blinker_reminder = 16;
  if (this->blinker_reminder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->blinker_reminder(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Fcw_onType fcw_on = 17;
  if (this->fcw_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->fcw_on(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Rldw_onType rldw_on = 18;
  if (this->rldw_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->rldw_on(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Lldw_onType lldw_on = 19;
  if (this->lldw_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->lldw_on(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Ldw_offType ldw_off = 20;
  if (this->ldw_off() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->ldw_off(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.MaintenanceType maintenance = 21;
  if (this->maintenance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->maintenance(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Fail_safeType fail_safe = 22;
  if (this->fail_safe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->fail_safe(), output);
  }

  // int32 error_code = 23;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->error_code(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Error_activeType error_active = 24;
  if (this->error_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->error_active(), output);
  }

  // int32 headway_measurement = 25;
  if (this->headway_measurement() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->headway_measurement(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Headway_validType headway_valid = 26;
  if (this->headway_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->headway_valid(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Fla_armedType fla_armed = 27;
  if (this->fla_armed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->fla_armed(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Hi_low_beamcontrolType hi_low_beamcontrol = 28;
  if (this->hi_low_beamcontrol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->hi_low_beamcontrol(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Zero_speedType zero_speed = 29;
  if (this->zero_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->zero_speed(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Time_indicatorType time_indicator = 30;
  if (this->time_indicator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->time_indicator(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700.Sound_typeType sound_type = 31;
  if (this->sound_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->sound_type(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.TSR.Aws_700)
}

size_t Aws_700::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.TSR.Aws_700)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // int32 reserved1 = 1;
  if (this->reserved1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reserved1());
  }

  // int32 reserved2 = 2;
  if (this->reserved2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reserved2());
  }

  // int32 reserved3 = 3;
  if (this->reserved3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reserved3());
  }

  // bool reserved4 = 4;
  if (this->reserved4() != 0) {
    total_size += 1 + 1;
  }

  // int32 reserved5 = 5;
  if (this->reserved5() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reserved5());
  }

  // int32 reserved6 = 6;
  if (this->reserved6() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reserved6());
  }

  // .Calmcar.drivers.TSR.Aws_700.Tsr_warning_levelType tsr_warning_level = 7;
  if (this->tsr_warning_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tsr_warning_level());
  }

  // .Calmcar.drivers.TSR.Aws_700.Tsr_enabbledType tsr_enabbled = 8;
  if (this->tsr_enabbled() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tsr_enabbled());
  }

  // .Calmcar.drivers.TSR.Aws_700.Rainy_hw_enabledType rainy_hw_enabled = 9;
  if (this->rainy_hw_enabled() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rainy_hw_enabled());
  }

  // .Calmcar.drivers.TSR.Aws_700.Rain_hwType rain_hw = 10;
  if (this->rain_hw() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rain_hw());
  }

  // .Calmcar.drivers.TSR.Aws_700.Pcw_peddzType pcw_peddz = 11;
  if (this->pcw_peddz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pcw_peddz());
  }

  // .Calmcar.drivers.TSR.Aws_700.Hw_warning_levelType hw_warning_level = 12;
  if (this->hw_warning_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->hw_warning_level());
  }

  // .Calmcar.drivers.TSR.Aws_700.Hw_repeatable_enabledType hw_repeatable_enabled = 13;
  if (this->hw_repeatable_enabled() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->hw_repeatable_enabled());
  }

  // .Calmcar.drivers.TSR.Aws_700.General_pedestrianType general_pedestrian = 14;
  if (this->general_pedestrian() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->general_pedestrian());
  }

  // .Calmcar.drivers.TSR.Aws_700.Blinker_reminder_enabledType blinker_reminder_enabled = 15;
  if (this->blinker_reminder_enabled() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->blinker_reminder_enabled());
  }

  // .Calmcar.drivers.TSR.Aws_700.Blinker_reminderType blinker_reminder = 16;
  if (this->blinker_reminder() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->blinker_reminder());
  }

  // .Calmcar.drivers.TSR.Aws_700.Fcw_onType fcw_on = 17;
  if (this->fcw_on() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fcw_on());
  }

  // .Calmcar.drivers.TSR.Aws_700.Rldw_onType rldw_on = 18;
  if (this->rldw_on() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rldw_on());
  }

  // .Calmcar.drivers.TSR.Aws_700.Lldw_onType lldw_on = 19;
  if (this->lldw_on() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lldw_on());
  }

  // .Calmcar.drivers.TSR.Aws_700.Ldw_offType ldw_off = 20;
  if (this->ldw_off() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ldw_off());
  }

  // .Calmcar.drivers.TSR.Aws_700.MaintenanceType maintenance = 21;
  if (this->maintenance() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->maintenance());
  }

  // .Calmcar.drivers.TSR.Aws_700.Fail_safeType fail_safe = 22;
  if (this->fail_safe() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fail_safe());
  }

  // int32 error_code = 23;
  if (this->error_code() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  // .Calmcar.drivers.TSR.Aws_700.Error_activeType error_active = 24;
  if (this->error_active() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_active());
  }

  // int32 headway_measurement = 25;
  if (this->headway_measurement() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->headway_measurement());
  }

  // .Calmcar.drivers.TSR.Aws_700.Headway_validType headway_valid = 26;
  if (this->headway_valid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->headway_valid());
  }

  // .Calmcar.drivers.TSR.Aws_700.Fla_armedType fla_armed = 27;
  if (this->fla_armed() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fla_armed());
  }

  // .Calmcar.drivers.TSR.Aws_700.Hi_low_beamcontrolType hi_low_beamcontrol = 28;
  if (this->hi_low_beamcontrol() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->hi_low_beamcontrol());
  }

  // .Calmcar.drivers.TSR.Aws_700.Zero_speedType zero_speed = 29;
  if (this->zero_speed() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->zero_speed());
  }

  // .Calmcar.drivers.TSR.Aws_700.Time_indicatorType time_indicator = 30;
  if (this->time_indicator() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->time_indicator());
  }

  // .Calmcar.drivers.TSR.Aws_700.Sound_typeType sound_type = 31;
  if (this->sound_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sound_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Aws_700::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Aws_700*>(&from));
}

void Aws_700::MergeFrom(const Aws_700& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.TSR.Aws_700)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reserved1() != 0) {
    set_reserved1(from.reserved1());
  }
  if (from.reserved2() != 0) {
    set_reserved2(from.reserved2());
  }
  if (from.reserved3() != 0) {
    set_reserved3(from.reserved3());
  }
  if (from.reserved4() != 0) {
    set_reserved4(from.reserved4());
  }
  if (from.reserved5() != 0) {
    set_reserved5(from.reserved5());
  }
  if (from.reserved6() != 0) {
    set_reserved6(from.reserved6());
  }
  if (from.tsr_warning_level() != 0) {
    set_tsr_warning_level(from.tsr_warning_level());
  }
  if (from.tsr_enabbled() != 0) {
    set_tsr_enabbled(from.tsr_enabbled());
  }
  if (from.rainy_hw_enabled() != 0) {
    set_rainy_hw_enabled(from.rainy_hw_enabled());
  }
  if (from.rain_hw() != 0) {
    set_rain_hw(from.rain_hw());
  }
  if (from.pcw_peddz() != 0) {
    set_pcw_peddz(from.pcw_peddz());
  }
  if (from.hw_warning_level() != 0) {
    set_hw_warning_level(from.hw_warning_level());
  }
  if (from.hw_repeatable_enabled() != 0) {
    set_hw_repeatable_enabled(from.hw_repeatable_enabled());
  }
  if (from.general_pedestrian() != 0) {
    set_general_pedestrian(from.general_pedestrian());
  }
  if (from.blinker_reminder_enabled() != 0) {
    set_blinker_reminder_enabled(from.blinker_reminder_enabled());
  }
  if (from.blinker_reminder() != 0) {
    set_blinker_reminder(from.blinker_reminder());
  }
  if (from.fcw_on() != 0) {
    set_fcw_on(from.fcw_on());
  }
  if (from.rldw_on() != 0) {
    set_rldw_on(from.rldw_on());
  }
  if (from.lldw_on() != 0) {
    set_lldw_on(from.lldw_on());
  }
  if (from.ldw_off() != 0) {
    set_ldw_off(from.ldw_off());
  }
  if (from.maintenance() != 0) {
    set_maintenance(from.maintenance());
  }
  if (from.fail_safe() != 0) {
    set_fail_safe(from.fail_safe());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.error_active() != 0) {
    set_error_active(from.error_active());
  }
  if (from.headway_measurement() != 0) {
    set_headway_measurement(from.headway_measurement());
  }
  if (from.headway_valid() != 0) {
    set_headway_valid(from.headway_valid());
  }
  if (from.fla_armed() != 0) {
    set_fla_armed(from.fla_armed());
  }
  if (from.hi_low_beamcontrol() != 0) {
    set_hi_low_beamcontrol(from.hi_low_beamcontrol());
  }
  if (from.zero_speed() != 0) {
    set_zero_speed(from.zero_speed());
  }
  if (from.time_indicator() != 0) {
    set_time_indicator(from.time_indicator());
  }
  if (from.sound_type() != 0) {
    set_sound_type(from.sound_type());
  }
}

void Aws_700::CopyFrom(const Aws_700& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.TSR.Aws_700)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aws_700::IsInitialized() const {
  return true;
}

void Aws_700::Swap(Aws_700* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Aws_700::InternalSwap(Aws_700* other) {
  using std::swap;
  swap(reserved1_, other->reserved1_);
  swap(reserved2_, other->reserved2_);
  swap(reserved3_, other->reserved3_);
  swap(reserved4_, other->reserved4_);
  swap(reserved5_, other->reserved5_);
  swap(reserved6_, other->reserved6_);
  swap(tsr_warning_level_, other->tsr_warning_level_);
  swap(tsr_enabbled_, other->tsr_enabbled_);
  swap(rainy_hw_enabled_, other->rainy_hw_enabled_);
  swap(rain_hw_, other->rain_hw_);
  swap(pcw_peddz_, other->pcw_peddz_);
  swap(hw_warning_level_, other->hw_warning_level_);
  swap(hw_repeatable_enabled_, other->hw_repeatable_enabled_);
  swap(general_pedestrian_, other->general_pedestrian_);
  swap(blinker_reminder_enabled_, other->blinker_reminder_enabled_);
  swap(blinker_reminder_, other->blinker_reminder_);
  swap(fcw_on_, other->fcw_on_);
  swap(rldw_on_, other->rldw_on_);
  swap(lldw_on_, other->lldw_on_);
  swap(ldw_off_, other->ldw_off_);
  swap(maintenance_, other->maintenance_);
  swap(fail_safe_, other->fail_safe_);
  swap(error_code_, other->error_code_);
  swap(error_active_, other->error_active_);
  swap(headway_measurement_, other->headway_measurement_);
  swap(headway_valid_, other->headway_valid_);
  swap(fla_armed_, other->fla_armed_);
  swap(hi_low_beamcontrol_, other->hi_low_beamcontrol_);
  swap(zero_speed_, other->zero_speed_);
  swap(time_indicator_, other->time_indicator_);
  swap(sound_type_, other->sound_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Aws_700::GetTypeName() const {
  return "Calmcar.drivers.TSR.Aws_700";
}


// ===================================================================

void Tsr_detail_7_726::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tsr_detail_7_726::kVisionOnlySignTypeFieldNumber;
const int Tsr_detail_7_726::kSupplementarySignTypeFieldNumber;
const int Tsr_detail_7_726::kSignPosZFieldNumber;
const int Tsr_detail_7_726::kSignPosYFieldNumber;
const int Tsr_detail_7_726::kSignPosXFieldNumber;
const int Tsr_detail_7_726::kFilterTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tsr_detail_7_726::Tsr_detail_7_726()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tsr_2eproto::scc_info_Tsr_detail_7_726.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.TSR.Tsr_detail_7_726)
}
Tsr_detail_7_726::Tsr_detail_7_726(const Tsr_detail_7_726& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vision_only_sign_type_, &from.vision_only_sign_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_type_) -
    reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.TSR.Tsr_detail_7_726)
}

void Tsr_detail_7_726::SharedCtor() {
  ::memset(&vision_only_sign_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_type_) -
      reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
}

Tsr_detail_7_726::~Tsr_detail_7_726() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.TSR.Tsr_detail_7_726)
  SharedDtor();
}

void Tsr_detail_7_726::SharedDtor() {
}

void Tsr_detail_7_726::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tsr_detail_7_726& Tsr_detail_7_726::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tsr_2eproto::scc_info_Tsr_detail_7_726.base);
  return *internal_default_instance();
}


void Tsr_detail_7_726::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.TSR.Tsr_detail_7_726)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vision_only_sign_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_type_) -
      reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
  _internal_metadata_.Clear();
}

bool Tsr_detail_7_726::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.TSR.Tsr_detail_7_726)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Calmcar.drivers.TSR.Tsr_detail_7_726.Vision_only_sign_typeType vision_only_sign_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vision_only_sign_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_7_726_Vision_only_sign_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_7_726.Supplementary_sign_typeType supplementary_sign_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_supplementary_sign_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_7_726_Supplementary_sign_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_7_726.Filter_typeType filter_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filter_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_7_726_Filter_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.TSR.Tsr_detail_7_726)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.TSR.Tsr_detail_7_726)
  return false;
#undef DO_
}

void Tsr_detail_7_726::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.TSR.Tsr_detail_7_726)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Calmcar.drivers.TSR.Tsr_detail_7_726.Vision_only_sign_typeType vision_only_sign_type = 1;
  if (this->vision_only_sign_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->vision_only_sign_type(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_7_726.Supplementary_sign_typeType supplementary_sign_type = 2;
  if (this->supplementary_sign_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->supplementary_sign_type(), output);
  }

  // double sign_pos_z = 3;
  if (this->sign_pos_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sign_pos_z(), output);
  }

  // double sign_pos_y = 4;
  if (this->sign_pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sign_pos_y(), output);
  }

  // double sign_pos_x = 5;
  if (this->sign_pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sign_pos_x(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_7_726.Filter_typeType filter_type = 6;
  if (this->filter_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->filter_type(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.TSR.Tsr_detail_7_726)
}

size_t Tsr_detail_7_726::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.TSR.Tsr_detail_7_726)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .Calmcar.drivers.TSR.Tsr_detail_7_726.Vision_only_sign_typeType vision_only_sign_type = 1;
  if (this->vision_only_sign_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vision_only_sign_type());
  }

  // .Calmcar.drivers.TSR.Tsr_detail_7_726.Supplementary_sign_typeType supplementary_sign_type = 2;
  if (this->supplementary_sign_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->supplementary_sign_type());
  }

  // double sign_pos_z = 3;
  if (this->sign_pos_z() != 0) {
    total_size += 1 + 8;
  }

  // double sign_pos_y = 4;
  if (this->sign_pos_y() != 0) {
    total_size += 1 + 8;
  }

  // double sign_pos_x = 5;
  if (this->sign_pos_x() != 0) {
    total_size += 1 + 8;
  }

  // .Calmcar.drivers.TSR.Tsr_detail_7_726.Filter_typeType filter_type = 6;
  if (this->filter_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tsr_detail_7_726::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tsr_detail_7_726*>(&from));
}

void Tsr_detail_7_726::MergeFrom(const Tsr_detail_7_726& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.TSR.Tsr_detail_7_726)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vision_only_sign_type() != 0) {
    set_vision_only_sign_type(from.vision_only_sign_type());
  }
  if (from.supplementary_sign_type() != 0) {
    set_supplementary_sign_type(from.supplementary_sign_type());
  }
  if (from.sign_pos_z() != 0) {
    set_sign_pos_z(from.sign_pos_z());
  }
  if (from.sign_pos_y() != 0) {
    set_sign_pos_y(from.sign_pos_y());
  }
  if (from.sign_pos_x() != 0) {
    set_sign_pos_x(from.sign_pos_x());
  }
  if (from.filter_type() != 0) {
    set_filter_type(from.filter_type());
  }
}

void Tsr_detail_7_726::CopyFrom(const Tsr_detail_7_726& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.TSR.Tsr_detail_7_726)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tsr_detail_7_726::IsInitialized() const {
  return true;
}

void Tsr_detail_7_726::Swap(Tsr_detail_7_726* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tsr_detail_7_726::InternalSwap(Tsr_detail_7_726* other) {
  using std::swap;
  swap(vision_only_sign_type_, other->vision_only_sign_type_);
  swap(supplementary_sign_type_, other->supplementary_sign_type_);
  swap(sign_pos_z_, other->sign_pos_z_);
  swap(sign_pos_y_, other->sign_pos_y_);
  swap(sign_pos_x_, other->sign_pos_x_);
  swap(filter_type_, other->filter_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Tsr_detail_7_726::GetTypeName() const {
  return "Calmcar.drivers.TSR.Tsr_detail_7_726";
}


// ===================================================================

void Vision_only_tsr_727::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vision_only_tsr_727::kSignType4FieldNumber;
const int Vision_only_tsr_727::kSignType3FieldNumber;
const int Vision_only_tsr_727::kSignType2FieldNumber;
const int Vision_only_tsr_727::kSignType1FieldNumber;
const int Vision_only_tsr_727::kSupplementarySignType4FieldNumber;
const int Vision_only_tsr_727::kSupplementarySignType3FieldNumber;
const int Vision_only_tsr_727::kSupplementarySignType2FieldNumber;
const int Vision_only_tsr_727::kSupplementarySignType1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vision_only_tsr_727::Vision_only_tsr_727()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tsr_2eproto::scc_info_Vision_only_tsr_727.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.TSR.Vision_only_tsr_727)
}
Vision_only_tsr_727::Vision_only_tsr_727(const Vision_only_tsr_727& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sign_type_4_, &from.sign_type_4_,
    static_cast<size_t>(reinterpret_cast<char*>(&supplementary_sign_type_1_) -
    reinterpret_cast<char*>(&sign_type_4_)) + sizeof(supplementary_sign_type_1_));
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.TSR.Vision_only_tsr_727)
}

void Vision_only_tsr_727::SharedCtor() {
  ::memset(&sign_type_4_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&supplementary_sign_type_1_) -
      reinterpret_cast<char*>(&sign_type_4_)) + sizeof(supplementary_sign_type_1_));
}

Vision_only_tsr_727::~Vision_only_tsr_727() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.TSR.Vision_only_tsr_727)
  SharedDtor();
}

void Vision_only_tsr_727::SharedDtor() {
}

void Vision_only_tsr_727::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vision_only_tsr_727& Vision_only_tsr_727::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tsr_2eproto::scc_info_Vision_only_tsr_727.base);
  return *internal_default_instance();
}


void Vision_only_tsr_727::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.TSR.Vision_only_tsr_727)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sign_type_4_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&supplementary_sign_type_1_) -
      reinterpret_cast<char*>(&sign_type_4_)) + sizeof(supplementary_sign_type_1_));
  _internal_metadata_.Clear();
}

bool Vision_only_tsr_727::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.TSR.Vision_only_tsr_727)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Calmcar.drivers.TSR.Vision_only_tsr_727.Sign_type_4Type sign_type_4 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sign_type_4(static_cast< ::Calmcar::drivers::TSR::Vision_only_tsr_727_Sign_type_4Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Vision_only_tsr_727.Sign_type_3Type sign_type_3 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sign_type_3(static_cast< ::Calmcar::drivers::TSR::Vision_only_tsr_727_Sign_type_3Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Vision_only_tsr_727.Sign_type_2Type sign_type_2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sign_type_2(static_cast< ::Calmcar::drivers::TSR::Vision_only_tsr_727_Sign_type_2Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Vision_only_tsr_727.Sign_type_1Type sign_type_1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sign_type_1(static_cast< ::Calmcar::drivers::TSR::Vision_only_tsr_727_Sign_type_1Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Vision_only_tsr_727.Supplementary_sign_type_4Type supplementary_sign_type_4 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_supplementary_sign_type_4(static_cast< ::Calmcar::drivers::TSR::Vision_only_tsr_727_Supplementary_sign_type_4Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Vision_only_tsr_727.Supplementary_sign_type_3Type supplementary_sign_type_3 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_supplementary_sign_type_3(static_cast< ::Calmcar::drivers::TSR::Vision_only_tsr_727_Supplementary_sign_type_3Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Vision_only_tsr_727.Supplementary_sign_type_2Type supplementary_sign_type_2 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_supplementary_sign_type_2(static_cast< ::Calmcar::drivers::TSR::Vision_only_tsr_727_Supplementary_sign_type_2Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Vision_only_tsr_727.Supplementary_sign_type_1Type supplementary_sign_type_1 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_supplementary_sign_type_1(static_cast< ::Calmcar::drivers::TSR::Vision_only_tsr_727_Supplementary_sign_type_1Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.TSR.Vision_only_tsr_727)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.TSR.Vision_only_tsr_727)
  return false;
#undef DO_
}

void Vision_only_tsr_727::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.TSR.Vision_only_tsr_727)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Calmcar.drivers.TSR.Vision_only_tsr_727.Sign_type_4Type sign_type_4 = 1;
  if (this->sign_type_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sign_type_4(), output);
  }

  // .Calmcar.drivers.TSR.Vision_only_tsr_727.Sign_type_3Type sign_type_3 = 2;
  if (this->sign_type_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sign_type_3(), output);
  }

  // .Calmcar.drivers.TSR.Vision_only_tsr_727.Sign_type_2Type sign_type_2 = 3;
  if (this->sign_type_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sign_type_2(), output);
  }

  // .Calmcar.drivers.TSR.Vision_only_tsr_727.Sign_type_1Type sign_type_1 = 4;
  if (this->sign_type_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sign_type_1(), output);
  }

  // .Calmcar.drivers.TSR.Vision_only_tsr_727.Supplementary_sign_type_4Type supplementary_sign_type_4 = 5;
  if (this->supplementary_sign_type_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->supplementary_sign_type_4(), output);
  }

  // .Calmcar.drivers.TSR.Vision_only_tsr_727.Supplementary_sign_type_3Type supplementary_sign_type_3 = 6;
  if (this->supplementary_sign_type_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->supplementary_sign_type_3(), output);
  }

  // .Calmcar.drivers.TSR.Vision_only_tsr_727.Supplementary_sign_type_2Type supplementary_sign_type_2 = 7;
  if (this->supplementary_sign_type_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->supplementary_sign_type_2(), output);
  }

  // .Calmcar.drivers.TSR.Vision_only_tsr_727.Supplementary_sign_type_1Type supplementary_sign_type_1 = 8;
  if (this->supplementary_sign_type_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->supplementary_sign_type_1(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.TSR.Vision_only_tsr_727)
}

size_t Vision_only_tsr_727::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.TSR.Vision_only_tsr_727)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .Calmcar.drivers.TSR.Vision_only_tsr_727.Sign_type_4Type sign_type_4 = 1;
  if (this->sign_type_4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sign_type_4());
  }

  // .Calmcar.drivers.TSR.Vision_only_tsr_727.Sign_type_3Type sign_type_3 = 2;
  if (this->sign_type_3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sign_type_3());
  }

  // .Calmcar.drivers.TSR.Vision_only_tsr_727.Sign_type_2Type sign_type_2 = 3;
  if (this->sign_type_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sign_type_2());
  }

  // .Calmcar.drivers.TSR.Vision_only_tsr_727.Sign_type_1Type sign_type_1 = 4;
  if (this->sign_type_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sign_type_1());
  }

  // .Calmcar.drivers.TSR.Vision_only_tsr_727.Supplementary_sign_type_4Type supplementary_sign_type_4 = 5;
  if (this->supplementary_sign_type_4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->supplementary_sign_type_4());
  }

  // .Calmcar.drivers.TSR.Vision_only_tsr_727.Supplementary_sign_type_3Type supplementary_sign_type_3 = 6;
  if (this->supplementary_sign_type_3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->supplementary_sign_type_3());
  }

  // .Calmcar.drivers.TSR.Vision_only_tsr_727.Supplementary_sign_type_2Type supplementary_sign_type_2 = 7;
  if (this->supplementary_sign_type_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->supplementary_sign_type_2());
  }

  // .Calmcar.drivers.TSR.Vision_only_tsr_727.Supplementary_sign_type_1Type supplementary_sign_type_1 = 8;
  if (this->supplementary_sign_type_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->supplementary_sign_type_1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vision_only_tsr_727::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Vision_only_tsr_727*>(&from));
}

void Vision_only_tsr_727::MergeFrom(const Vision_only_tsr_727& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.TSR.Vision_only_tsr_727)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sign_type_4() != 0) {
    set_sign_type_4(from.sign_type_4());
  }
  if (from.sign_type_3() != 0) {
    set_sign_type_3(from.sign_type_3());
  }
  if (from.sign_type_2() != 0) {
    set_sign_type_2(from.sign_type_2());
  }
  if (from.sign_type_1() != 0) {
    set_sign_type_1(from.sign_type_1());
  }
  if (from.supplementary_sign_type_4() != 0) {
    set_supplementary_sign_type_4(from.supplementary_sign_type_4());
  }
  if (from.supplementary_sign_type_3() != 0) {
    set_supplementary_sign_type_3(from.supplementary_sign_type_3());
  }
  if (from.supplementary_sign_type_2() != 0) {
    set_supplementary_sign_type_2(from.supplementary_sign_type_2());
  }
  if (from.supplementary_sign_type_1() != 0) {
    set_supplementary_sign_type_1(from.supplementary_sign_type_1());
  }
}

void Vision_only_tsr_727::CopyFrom(const Vision_only_tsr_727& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.TSR.Vision_only_tsr_727)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vision_only_tsr_727::IsInitialized() const {
  return true;
}

void Vision_only_tsr_727::Swap(Vision_only_tsr_727* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vision_only_tsr_727::InternalSwap(Vision_only_tsr_727* other) {
  using std::swap;
  swap(sign_type_4_, other->sign_type_4_);
  swap(sign_type_3_, other->sign_type_3_);
  swap(sign_type_2_, other->sign_type_2_);
  swap(sign_type_1_, other->sign_type_1_);
  swap(supplementary_sign_type_4_, other->supplementary_sign_type_4_);
  swap(supplementary_sign_type_3_, other->supplementary_sign_type_3_);
  swap(supplementary_sign_type_2_, other->supplementary_sign_type_2_);
  swap(supplementary_sign_type_1_, other->supplementary_sign_type_1_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Vision_only_tsr_727::GetTypeName() const {
  return "Calmcar.drivers.TSR.Vision_only_tsr_727";
}


// ===================================================================

void Tsr_detail_5_724::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tsr_detail_5_724::kVisionOnlySignTypeFieldNumber;
const int Tsr_detail_5_724::kSupplementarySignTypeFieldNumber;
const int Tsr_detail_5_724::kSignPosZFieldNumber;
const int Tsr_detail_5_724::kSignPosYFieldNumber;
const int Tsr_detail_5_724::kSignPosXFieldNumber;
const int Tsr_detail_5_724::kFilterTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tsr_detail_5_724::Tsr_detail_5_724()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tsr_2eproto::scc_info_Tsr_detail_5_724.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.TSR.Tsr_detail_5_724)
}
Tsr_detail_5_724::Tsr_detail_5_724(const Tsr_detail_5_724& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vision_only_sign_type_, &from.vision_only_sign_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_type_) -
    reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.TSR.Tsr_detail_5_724)
}

void Tsr_detail_5_724::SharedCtor() {
  ::memset(&vision_only_sign_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_type_) -
      reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
}

Tsr_detail_5_724::~Tsr_detail_5_724() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.TSR.Tsr_detail_5_724)
  SharedDtor();
}

void Tsr_detail_5_724::SharedDtor() {
}

void Tsr_detail_5_724::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tsr_detail_5_724& Tsr_detail_5_724::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tsr_2eproto::scc_info_Tsr_detail_5_724.base);
  return *internal_default_instance();
}


void Tsr_detail_5_724::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.TSR.Tsr_detail_5_724)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vision_only_sign_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_type_) -
      reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
  _internal_metadata_.Clear();
}

bool Tsr_detail_5_724::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.TSR.Tsr_detail_5_724)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Calmcar.drivers.TSR.Tsr_detail_5_724.Vision_only_sign_typeType vision_only_sign_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vision_only_sign_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_5_724_Vision_only_sign_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_5_724.Supplementary_sign_typeType supplementary_sign_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_supplementary_sign_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_5_724_Supplementary_sign_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_5_724.Filter_typeType filter_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filter_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_5_724_Filter_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.TSR.Tsr_detail_5_724)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.TSR.Tsr_detail_5_724)
  return false;
#undef DO_
}

void Tsr_detail_5_724::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.TSR.Tsr_detail_5_724)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Calmcar.drivers.TSR.Tsr_detail_5_724.Vision_only_sign_typeType vision_only_sign_type = 1;
  if (this->vision_only_sign_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->vision_only_sign_type(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_5_724.Supplementary_sign_typeType supplementary_sign_type = 2;
  if (this->supplementary_sign_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->supplementary_sign_type(), output);
  }

  // double sign_pos_z = 3;
  if (this->sign_pos_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sign_pos_z(), output);
  }

  // double sign_pos_y = 4;
  if (this->sign_pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sign_pos_y(), output);
  }

  // double sign_pos_x = 5;
  if (this->sign_pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sign_pos_x(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_5_724.Filter_typeType filter_type = 6;
  if (this->filter_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->filter_type(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.TSR.Tsr_detail_5_724)
}

size_t Tsr_detail_5_724::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.TSR.Tsr_detail_5_724)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .Calmcar.drivers.TSR.Tsr_detail_5_724.Vision_only_sign_typeType vision_only_sign_type = 1;
  if (this->vision_only_sign_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vision_only_sign_type());
  }

  // .Calmcar.drivers.TSR.Tsr_detail_5_724.Supplementary_sign_typeType supplementary_sign_type = 2;
  if (this->supplementary_sign_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->supplementary_sign_type());
  }

  // double sign_pos_z = 3;
  if (this->sign_pos_z() != 0) {
    total_size += 1 + 8;
  }

  // double sign_pos_y = 4;
  if (this->sign_pos_y() != 0) {
    total_size += 1 + 8;
  }

  // double sign_pos_x = 5;
  if (this->sign_pos_x() != 0) {
    total_size += 1 + 8;
  }

  // .Calmcar.drivers.TSR.Tsr_detail_5_724.Filter_typeType filter_type = 6;
  if (this->filter_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tsr_detail_5_724::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tsr_detail_5_724*>(&from));
}

void Tsr_detail_5_724::MergeFrom(const Tsr_detail_5_724& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.TSR.Tsr_detail_5_724)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vision_only_sign_type() != 0) {
    set_vision_only_sign_type(from.vision_only_sign_type());
  }
  if (from.supplementary_sign_type() != 0) {
    set_supplementary_sign_type(from.supplementary_sign_type());
  }
  if (from.sign_pos_z() != 0) {
    set_sign_pos_z(from.sign_pos_z());
  }
  if (from.sign_pos_y() != 0) {
    set_sign_pos_y(from.sign_pos_y());
  }
  if (from.sign_pos_x() != 0) {
    set_sign_pos_x(from.sign_pos_x());
  }
  if (from.filter_type() != 0) {
    set_filter_type(from.filter_type());
  }
}

void Tsr_detail_5_724::CopyFrom(const Tsr_detail_5_724& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.TSR.Tsr_detail_5_724)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tsr_detail_5_724::IsInitialized() const {
  return true;
}

void Tsr_detail_5_724::Swap(Tsr_detail_5_724* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tsr_detail_5_724::InternalSwap(Tsr_detail_5_724* other) {
  using std::swap;
  swap(vision_only_sign_type_, other->vision_only_sign_type_);
  swap(supplementary_sign_type_, other->supplementary_sign_type_);
  swap(sign_pos_z_, other->sign_pos_z_);
  swap(sign_pos_y_, other->sign_pos_y_);
  swap(sign_pos_x_, other->sign_pos_x_);
  swap(filter_type_, other->filter_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Tsr_detail_5_724::GetTypeName() const {
  return "Calmcar.drivers.TSR.Tsr_detail_5_724";
}


// ===================================================================

void Tsr_detail_6_725::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tsr_detail_6_725::kVisionOnlySignTypeFieldNumber;
const int Tsr_detail_6_725::kSupplementarySignTypeFieldNumber;
const int Tsr_detail_6_725::kSignPosZFieldNumber;
const int Tsr_detail_6_725::kSignPosYFieldNumber;
const int Tsr_detail_6_725::kSignPosXFieldNumber;
const int Tsr_detail_6_725::kFilterTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tsr_detail_6_725::Tsr_detail_6_725()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tsr_2eproto::scc_info_Tsr_detail_6_725.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.TSR.Tsr_detail_6_725)
}
Tsr_detail_6_725::Tsr_detail_6_725(const Tsr_detail_6_725& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vision_only_sign_type_, &from.vision_only_sign_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_type_) -
    reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.TSR.Tsr_detail_6_725)
}

void Tsr_detail_6_725::SharedCtor() {
  ::memset(&vision_only_sign_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_type_) -
      reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
}

Tsr_detail_6_725::~Tsr_detail_6_725() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.TSR.Tsr_detail_6_725)
  SharedDtor();
}

void Tsr_detail_6_725::SharedDtor() {
}

void Tsr_detail_6_725::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tsr_detail_6_725& Tsr_detail_6_725::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tsr_2eproto::scc_info_Tsr_detail_6_725.base);
  return *internal_default_instance();
}


void Tsr_detail_6_725::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.TSR.Tsr_detail_6_725)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vision_only_sign_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_type_) -
      reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
  _internal_metadata_.Clear();
}

bool Tsr_detail_6_725::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.TSR.Tsr_detail_6_725)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Calmcar.drivers.TSR.Tsr_detail_6_725.Vision_only_sign_typeType vision_only_sign_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vision_only_sign_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_6_725_Vision_only_sign_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_6_725.Supplementary_sign_typeType supplementary_sign_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_supplementary_sign_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_6_725_Supplementary_sign_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_6_725.Filter_typeType filter_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filter_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_6_725_Filter_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.TSR.Tsr_detail_6_725)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.TSR.Tsr_detail_6_725)
  return false;
#undef DO_
}

void Tsr_detail_6_725::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.TSR.Tsr_detail_6_725)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Calmcar.drivers.TSR.Tsr_detail_6_725.Vision_only_sign_typeType vision_only_sign_type = 1;
  if (this->vision_only_sign_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->vision_only_sign_type(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_6_725.Supplementary_sign_typeType supplementary_sign_type = 2;
  if (this->supplementary_sign_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->supplementary_sign_type(), output);
  }

  // double sign_pos_z = 3;
  if (this->sign_pos_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sign_pos_z(), output);
  }

  // double sign_pos_y = 4;
  if (this->sign_pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sign_pos_y(), output);
  }

  // double sign_pos_x = 5;
  if (this->sign_pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sign_pos_x(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_6_725.Filter_typeType filter_type = 6;
  if (this->filter_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->filter_type(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.TSR.Tsr_detail_6_725)
}

size_t Tsr_detail_6_725::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.TSR.Tsr_detail_6_725)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .Calmcar.drivers.TSR.Tsr_detail_6_725.Vision_only_sign_typeType vision_only_sign_type = 1;
  if (this->vision_only_sign_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vision_only_sign_type());
  }

  // .Calmcar.drivers.TSR.Tsr_detail_6_725.Supplementary_sign_typeType supplementary_sign_type = 2;
  if (this->supplementary_sign_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->supplementary_sign_type());
  }

  // double sign_pos_z = 3;
  if (this->sign_pos_z() != 0) {
    total_size += 1 + 8;
  }

  // double sign_pos_y = 4;
  if (this->sign_pos_y() != 0) {
    total_size += 1 + 8;
  }

  // double sign_pos_x = 5;
  if (this->sign_pos_x() != 0) {
    total_size += 1 + 8;
  }

  // .Calmcar.drivers.TSR.Tsr_detail_6_725.Filter_typeType filter_type = 6;
  if (this->filter_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tsr_detail_6_725::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tsr_detail_6_725*>(&from));
}

void Tsr_detail_6_725::MergeFrom(const Tsr_detail_6_725& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.TSR.Tsr_detail_6_725)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vision_only_sign_type() != 0) {
    set_vision_only_sign_type(from.vision_only_sign_type());
  }
  if (from.supplementary_sign_type() != 0) {
    set_supplementary_sign_type(from.supplementary_sign_type());
  }
  if (from.sign_pos_z() != 0) {
    set_sign_pos_z(from.sign_pos_z());
  }
  if (from.sign_pos_y() != 0) {
    set_sign_pos_y(from.sign_pos_y());
  }
  if (from.sign_pos_x() != 0) {
    set_sign_pos_x(from.sign_pos_x());
  }
  if (from.filter_type() != 0) {
    set_filter_type(from.filter_type());
  }
}

void Tsr_detail_6_725::CopyFrom(const Tsr_detail_6_725& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.TSR.Tsr_detail_6_725)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tsr_detail_6_725::IsInitialized() const {
  return true;
}

void Tsr_detail_6_725::Swap(Tsr_detail_6_725* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tsr_detail_6_725::InternalSwap(Tsr_detail_6_725* other) {
  using std::swap;
  swap(vision_only_sign_type_, other->vision_only_sign_type_);
  swap(supplementary_sign_type_, other->supplementary_sign_type_);
  swap(sign_pos_z_, other->sign_pos_z_);
  swap(sign_pos_y_, other->sign_pos_y_);
  swap(sign_pos_x_, other->sign_pos_x_);
  swap(filter_type_, other->filter_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Tsr_detail_6_725::GetTypeName() const {
  return "Calmcar.drivers.TSR.Tsr_detail_6_725";
}


// ===================================================================

void Tsr_detail_3_722::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tsr_detail_3_722::kVisionOnlySignTypeFieldNumber;
const int Tsr_detail_3_722::kSupplementarySignTypeFieldNumber;
const int Tsr_detail_3_722::kSignPosZFieldNumber;
const int Tsr_detail_3_722::kSignPosYFieldNumber;
const int Tsr_detail_3_722::kSignPosXFieldNumber;
const int Tsr_detail_3_722::kFilterTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tsr_detail_3_722::Tsr_detail_3_722()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tsr_2eproto::scc_info_Tsr_detail_3_722.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.TSR.Tsr_detail_3_722)
}
Tsr_detail_3_722::Tsr_detail_3_722(const Tsr_detail_3_722& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vision_only_sign_type_, &from.vision_only_sign_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_type_) -
    reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.TSR.Tsr_detail_3_722)
}

void Tsr_detail_3_722::SharedCtor() {
  ::memset(&vision_only_sign_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_type_) -
      reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
}

Tsr_detail_3_722::~Tsr_detail_3_722() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.TSR.Tsr_detail_3_722)
  SharedDtor();
}

void Tsr_detail_3_722::SharedDtor() {
}

void Tsr_detail_3_722::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tsr_detail_3_722& Tsr_detail_3_722::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tsr_2eproto::scc_info_Tsr_detail_3_722.base);
  return *internal_default_instance();
}


void Tsr_detail_3_722::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.TSR.Tsr_detail_3_722)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vision_only_sign_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_type_) -
      reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
  _internal_metadata_.Clear();
}

bool Tsr_detail_3_722::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.TSR.Tsr_detail_3_722)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Calmcar.drivers.TSR.Tsr_detail_3_722.Vision_only_sign_typeType vision_only_sign_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vision_only_sign_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_3_722_Vision_only_sign_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_3_722.Supplementary_sign_typeType supplementary_sign_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_supplementary_sign_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_3_722_Supplementary_sign_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_3_722.Filter_typeType filter_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filter_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_3_722_Filter_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.TSR.Tsr_detail_3_722)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.TSR.Tsr_detail_3_722)
  return false;
#undef DO_
}

void Tsr_detail_3_722::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.TSR.Tsr_detail_3_722)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Calmcar.drivers.TSR.Tsr_detail_3_722.Vision_only_sign_typeType vision_only_sign_type = 1;
  if (this->vision_only_sign_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->vision_only_sign_type(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_3_722.Supplementary_sign_typeType supplementary_sign_type = 2;
  if (this->supplementary_sign_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->supplementary_sign_type(), output);
  }

  // double sign_pos_z = 3;
  if (this->sign_pos_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sign_pos_z(), output);
  }

  // double sign_pos_y = 4;
  if (this->sign_pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sign_pos_y(), output);
  }

  // double sign_pos_x = 5;
  if (this->sign_pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sign_pos_x(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_3_722.Filter_typeType filter_type = 6;
  if (this->filter_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->filter_type(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.TSR.Tsr_detail_3_722)
}

size_t Tsr_detail_3_722::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.TSR.Tsr_detail_3_722)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .Calmcar.drivers.TSR.Tsr_detail_3_722.Vision_only_sign_typeType vision_only_sign_type = 1;
  if (this->vision_only_sign_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vision_only_sign_type());
  }

  // .Calmcar.drivers.TSR.Tsr_detail_3_722.Supplementary_sign_typeType supplementary_sign_type = 2;
  if (this->supplementary_sign_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->supplementary_sign_type());
  }

  // double sign_pos_z = 3;
  if (this->sign_pos_z() != 0) {
    total_size += 1 + 8;
  }

  // double sign_pos_y = 4;
  if (this->sign_pos_y() != 0) {
    total_size += 1 + 8;
  }

  // double sign_pos_x = 5;
  if (this->sign_pos_x() != 0) {
    total_size += 1 + 8;
  }

  // .Calmcar.drivers.TSR.Tsr_detail_3_722.Filter_typeType filter_type = 6;
  if (this->filter_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tsr_detail_3_722::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tsr_detail_3_722*>(&from));
}

void Tsr_detail_3_722::MergeFrom(const Tsr_detail_3_722& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.TSR.Tsr_detail_3_722)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vision_only_sign_type() != 0) {
    set_vision_only_sign_type(from.vision_only_sign_type());
  }
  if (from.supplementary_sign_type() != 0) {
    set_supplementary_sign_type(from.supplementary_sign_type());
  }
  if (from.sign_pos_z() != 0) {
    set_sign_pos_z(from.sign_pos_z());
  }
  if (from.sign_pos_y() != 0) {
    set_sign_pos_y(from.sign_pos_y());
  }
  if (from.sign_pos_x() != 0) {
    set_sign_pos_x(from.sign_pos_x());
  }
  if (from.filter_type() != 0) {
    set_filter_type(from.filter_type());
  }
}

void Tsr_detail_3_722::CopyFrom(const Tsr_detail_3_722& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.TSR.Tsr_detail_3_722)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tsr_detail_3_722::IsInitialized() const {
  return true;
}

void Tsr_detail_3_722::Swap(Tsr_detail_3_722* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tsr_detail_3_722::InternalSwap(Tsr_detail_3_722* other) {
  using std::swap;
  swap(vision_only_sign_type_, other->vision_only_sign_type_);
  swap(supplementary_sign_type_, other->supplementary_sign_type_);
  swap(sign_pos_z_, other->sign_pos_z_);
  swap(sign_pos_y_, other->sign_pos_y_);
  swap(sign_pos_x_, other->sign_pos_x_);
  swap(filter_type_, other->filter_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Tsr_detail_3_722::GetTypeName() const {
  return "Calmcar.drivers.TSR.Tsr_detail_3_722";
}


// ===================================================================

void Tsr_detail_4_723::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tsr_detail_4_723::kVisionOnlySignTypeFieldNumber;
const int Tsr_detail_4_723::kSupplementarySignTypeFieldNumber;
const int Tsr_detail_4_723::kSignPosZFieldNumber;
const int Tsr_detail_4_723::kSignPosYFieldNumber;
const int Tsr_detail_4_723::kSignPosXFieldNumber;
const int Tsr_detail_4_723::kFilterTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tsr_detail_4_723::Tsr_detail_4_723()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tsr_2eproto::scc_info_Tsr_detail_4_723.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.TSR.Tsr_detail_4_723)
}
Tsr_detail_4_723::Tsr_detail_4_723(const Tsr_detail_4_723& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vision_only_sign_type_, &from.vision_only_sign_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_type_) -
    reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.TSR.Tsr_detail_4_723)
}

void Tsr_detail_4_723::SharedCtor() {
  ::memset(&vision_only_sign_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_type_) -
      reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
}

Tsr_detail_4_723::~Tsr_detail_4_723() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.TSR.Tsr_detail_4_723)
  SharedDtor();
}

void Tsr_detail_4_723::SharedDtor() {
}

void Tsr_detail_4_723::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tsr_detail_4_723& Tsr_detail_4_723::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tsr_2eproto::scc_info_Tsr_detail_4_723.base);
  return *internal_default_instance();
}


void Tsr_detail_4_723::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.TSR.Tsr_detail_4_723)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vision_only_sign_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_type_) -
      reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
  _internal_metadata_.Clear();
}

bool Tsr_detail_4_723::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.TSR.Tsr_detail_4_723)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Calmcar.drivers.TSR.Tsr_detail_4_723.Vision_only_sign_typeType vision_only_sign_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vision_only_sign_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_4_723_Vision_only_sign_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_4_723.Supplementary_sign_typeType supplementary_sign_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_supplementary_sign_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_4_723_Supplementary_sign_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_4_723.Filter_typeType filter_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filter_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_4_723_Filter_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.TSR.Tsr_detail_4_723)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.TSR.Tsr_detail_4_723)
  return false;
#undef DO_
}

void Tsr_detail_4_723::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.TSR.Tsr_detail_4_723)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Calmcar.drivers.TSR.Tsr_detail_4_723.Vision_only_sign_typeType vision_only_sign_type = 1;
  if (this->vision_only_sign_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->vision_only_sign_type(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_4_723.Supplementary_sign_typeType supplementary_sign_type = 2;
  if (this->supplementary_sign_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->supplementary_sign_type(), output);
  }

  // double sign_pos_z = 3;
  if (this->sign_pos_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sign_pos_z(), output);
  }

  // double sign_pos_y = 4;
  if (this->sign_pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sign_pos_y(), output);
  }

  // double sign_pos_x = 5;
  if (this->sign_pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sign_pos_x(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_4_723.Filter_typeType filter_type = 6;
  if (this->filter_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->filter_type(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.TSR.Tsr_detail_4_723)
}

size_t Tsr_detail_4_723::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.TSR.Tsr_detail_4_723)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .Calmcar.drivers.TSR.Tsr_detail_4_723.Vision_only_sign_typeType vision_only_sign_type = 1;
  if (this->vision_only_sign_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vision_only_sign_type());
  }

  // .Calmcar.drivers.TSR.Tsr_detail_4_723.Supplementary_sign_typeType supplementary_sign_type = 2;
  if (this->supplementary_sign_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->supplementary_sign_type());
  }

  // double sign_pos_z = 3;
  if (this->sign_pos_z() != 0) {
    total_size += 1 + 8;
  }

  // double sign_pos_y = 4;
  if (this->sign_pos_y() != 0) {
    total_size += 1 + 8;
  }

  // double sign_pos_x = 5;
  if (this->sign_pos_x() != 0) {
    total_size += 1 + 8;
  }

  // .Calmcar.drivers.TSR.Tsr_detail_4_723.Filter_typeType filter_type = 6;
  if (this->filter_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tsr_detail_4_723::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tsr_detail_4_723*>(&from));
}

void Tsr_detail_4_723::MergeFrom(const Tsr_detail_4_723& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.TSR.Tsr_detail_4_723)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vision_only_sign_type() != 0) {
    set_vision_only_sign_type(from.vision_only_sign_type());
  }
  if (from.supplementary_sign_type() != 0) {
    set_supplementary_sign_type(from.supplementary_sign_type());
  }
  if (from.sign_pos_z() != 0) {
    set_sign_pos_z(from.sign_pos_z());
  }
  if (from.sign_pos_y() != 0) {
    set_sign_pos_y(from.sign_pos_y());
  }
  if (from.sign_pos_x() != 0) {
    set_sign_pos_x(from.sign_pos_x());
  }
  if (from.filter_type() != 0) {
    set_filter_type(from.filter_type());
  }
}

void Tsr_detail_4_723::CopyFrom(const Tsr_detail_4_723& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.TSR.Tsr_detail_4_723)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tsr_detail_4_723::IsInitialized() const {
  return true;
}

void Tsr_detail_4_723::Swap(Tsr_detail_4_723* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tsr_detail_4_723::InternalSwap(Tsr_detail_4_723* other) {
  using std::swap;
  swap(vision_only_sign_type_, other->vision_only_sign_type_);
  swap(supplementary_sign_type_, other->supplementary_sign_type_);
  swap(sign_pos_z_, other->sign_pos_z_);
  swap(sign_pos_y_, other->sign_pos_y_);
  swap(sign_pos_x_, other->sign_pos_x_);
  swap(filter_type_, other->filter_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Tsr_detail_4_723::GetTypeName() const {
  return "Calmcar.drivers.TSR.Tsr_detail_4_723";
}


// ===================================================================

void Tsr_detail_1_720::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tsr_detail_1_720::kVisionOnlySignTypeFieldNumber;
const int Tsr_detail_1_720::kSupplementarySignTypeFieldNumber;
const int Tsr_detail_1_720::kSignPosZFieldNumber;
const int Tsr_detail_1_720::kSignPosYFieldNumber;
const int Tsr_detail_1_720::kSignPosXFieldNumber;
const int Tsr_detail_1_720::kFilterTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tsr_detail_1_720::Tsr_detail_1_720()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tsr_2eproto::scc_info_Tsr_detail_1_720.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.TSR.Tsr_detail_1_720)
}
Tsr_detail_1_720::Tsr_detail_1_720(const Tsr_detail_1_720& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vision_only_sign_type_, &from.vision_only_sign_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_type_) -
    reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.TSR.Tsr_detail_1_720)
}

void Tsr_detail_1_720::SharedCtor() {
  ::memset(&vision_only_sign_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_type_) -
      reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
}

Tsr_detail_1_720::~Tsr_detail_1_720() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.TSR.Tsr_detail_1_720)
  SharedDtor();
}

void Tsr_detail_1_720::SharedDtor() {
}

void Tsr_detail_1_720::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tsr_detail_1_720& Tsr_detail_1_720::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tsr_2eproto::scc_info_Tsr_detail_1_720.base);
  return *internal_default_instance();
}


void Tsr_detail_1_720::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.TSR.Tsr_detail_1_720)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vision_only_sign_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_type_) -
      reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
  _internal_metadata_.Clear();
}

bool Tsr_detail_1_720::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.TSR.Tsr_detail_1_720)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Calmcar.drivers.TSR.Tsr_detail_1_720.Vision_only_sign_typeType vision_only_sign_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vision_only_sign_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_1_720_Vision_only_sign_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_1_720.Supplementary_sign_typeType supplementary_sign_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_supplementary_sign_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_1_720_Supplementary_sign_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_1_720.Filter_typeType filter_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filter_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_1_720_Filter_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.TSR.Tsr_detail_1_720)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.TSR.Tsr_detail_1_720)
  return false;
#undef DO_
}

void Tsr_detail_1_720::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.TSR.Tsr_detail_1_720)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Calmcar.drivers.TSR.Tsr_detail_1_720.Vision_only_sign_typeType vision_only_sign_type = 1;
  if (this->vision_only_sign_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->vision_only_sign_type(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_1_720.Supplementary_sign_typeType supplementary_sign_type = 2;
  if (this->supplementary_sign_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->supplementary_sign_type(), output);
  }

  // double sign_pos_z = 3;
  if (this->sign_pos_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sign_pos_z(), output);
  }

  // double sign_pos_y = 4;
  if (this->sign_pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sign_pos_y(), output);
  }

  // double sign_pos_x = 5;
  if (this->sign_pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sign_pos_x(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_1_720.Filter_typeType filter_type = 6;
  if (this->filter_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->filter_type(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.TSR.Tsr_detail_1_720)
}

size_t Tsr_detail_1_720::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.TSR.Tsr_detail_1_720)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .Calmcar.drivers.TSR.Tsr_detail_1_720.Vision_only_sign_typeType vision_only_sign_type = 1;
  if (this->vision_only_sign_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vision_only_sign_type());
  }

  // .Calmcar.drivers.TSR.Tsr_detail_1_720.Supplementary_sign_typeType supplementary_sign_type = 2;
  if (this->supplementary_sign_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->supplementary_sign_type());
  }

  // double sign_pos_z = 3;
  if (this->sign_pos_z() != 0) {
    total_size += 1 + 8;
  }

  // double sign_pos_y = 4;
  if (this->sign_pos_y() != 0) {
    total_size += 1 + 8;
  }

  // double sign_pos_x = 5;
  if (this->sign_pos_x() != 0) {
    total_size += 1 + 8;
  }

  // .Calmcar.drivers.TSR.Tsr_detail_1_720.Filter_typeType filter_type = 6;
  if (this->filter_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tsr_detail_1_720::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tsr_detail_1_720*>(&from));
}

void Tsr_detail_1_720::MergeFrom(const Tsr_detail_1_720& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.TSR.Tsr_detail_1_720)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vision_only_sign_type() != 0) {
    set_vision_only_sign_type(from.vision_only_sign_type());
  }
  if (from.supplementary_sign_type() != 0) {
    set_supplementary_sign_type(from.supplementary_sign_type());
  }
  if (from.sign_pos_z() != 0) {
    set_sign_pos_z(from.sign_pos_z());
  }
  if (from.sign_pos_y() != 0) {
    set_sign_pos_y(from.sign_pos_y());
  }
  if (from.sign_pos_x() != 0) {
    set_sign_pos_x(from.sign_pos_x());
  }
  if (from.filter_type() != 0) {
    set_filter_type(from.filter_type());
  }
}

void Tsr_detail_1_720::CopyFrom(const Tsr_detail_1_720& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.TSR.Tsr_detail_1_720)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tsr_detail_1_720::IsInitialized() const {
  return true;
}

void Tsr_detail_1_720::Swap(Tsr_detail_1_720* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tsr_detail_1_720::InternalSwap(Tsr_detail_1_720* other) {
  using std::swap;
  swap(vision_only_sign_type_, other->vision_only_sign_type_);
  swap(supplementary_sign_type_, other->supplementary_sign_type_);
  swap(sign_pos_z_, other->sign_pos_z_);
  swap(sign_pos_y_, other->sign_pos_y_);
  swap(sign_pos_x_, other->sign_pos_x_);
  swap(filter_type_, other->filter_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Tsr_detail_1_720::GetTypeName() const {
  return "Calmcar.drivers.TSR.Tsr_detail_1_720";
}


// ===================================================================

void Tsr_detail_2_721::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tsr_detail_2_721::kVisionOnlySignTypeFieldNumber;
const int Tsr_detail_2_721::kSupplementarySignTypeFieldNumber;
const int Tsr_detail_2_721::kSignPosZFieldNumber;
const int Tsr_detail_2_721::kSignPosYFieldNumber;
const int Tsr_detail_2_721::kSignPosXFieldNumber;
const int Tsr_detail_2_721::kFilterTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tsr_detail_2_721::Tsr_detail_2_721()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tsr_2eproto::scc_info_Tsr_detail_2_721.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.TSR.Tsr_detail_2_721)
}
Tsr_detail_2_721::Tsr_detail_2_721(const Tsr_detail_2_721& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vision_only_sign_type_, &from.vision_only_sign_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_type_) -
    reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.TSR.Tsr_detail_2_721)
}

void Tsr_detail_2_721::SharedCtor() {
  ::memset(&vision_only_sign_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_type_) -
      reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
}

Tsr_detail_2_721::~Tsr_detail_2_721() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.TSR.Tsr_detail_2_721)
  SharedDtor();
}

void Tsr_detail_2_721::SharedDtor() {
}

void Tsr_detail_2_721::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tsr_detail_2_721& Tsr_detail_2_721::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tsr_2eproto::scc_info_Tsr_detail_2_721.base);
  return *internal_default_instance();
}


void Tsr_detail_2_721::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.TSR.Tsr_detail_2_721)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vision_only_sign_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_type_) -
      reinterpret_cast<char*>(&vision_only_sign_type_)) + sizeof(filter_type_));
  _internal_metadata_.Clear();
}

bool Tsr_detail_2_721::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.TSR.Tsr_detail_2_721)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Calmcar.drivers.TSR.Tsr_detail_2_721.Vision_only_sign_typeType vision_only_sign_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vision_only_sign_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_2_721_Vision_only_sign_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_2_721.Supplementary_sign_typeType supplementary_sign_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_supplementary_sign_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_2_721_Supplementary_sign_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sign_pos_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sign_pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_2_721.Filter_typeType filter_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filter_type(static_cast< ::Calmcar::drivers::TSR::Tsr_detail_2_721_Filter_typeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.TSR.Tsr_detail_2_721)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.TSR.Tsr_detail_2_721)
  return false;
#undef DO_
}

void Tsr_detail_2_721::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.TSR.Tsr_detail_2_721)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Calmcar.drivers.TSR.Tsr_detail_2_721.Vision_only_sign_typeType vision_only_sign_type = 1;
  if (this->vision_only_sign_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->vision_only_sign_type(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_2_721.Supplementary_sign_typeType supplementary_sign_type = 2;
  if (this->supplementary_sign_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->supplementary_sign_type(), output);
  }

  // double sign_pos_z = 3;
  if (this->sign_pos_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sign_pos_z(), output);
  }

  // double sign_pos_y = 4;
  if (this->sign_pos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sign_pos_y(), output);
  }

  // double sign_pos_x = 5;
  if (this->sign_pos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sign_pos_x(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_2_721.Filter_typeType filter_type = 6;
  if (this->filter_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->filter_type(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.TSR.Tsr_detail_2_721)
}

size_t Tsr_detail_2_721::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.TSR.Tsr_detail_2_721)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .Calmcar.drivers.TSR.Tsr_detail_2_721.Vision_only_sign_typeType vision_only_sign_type = 1;
  if (this->vision_only_sign_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vision_only_sign_type());
  }

  // .Calmcar.drivers.TSR.Tsr_detail_2_721.Supplementary_sign_typeType supplementary_sign_type = 2;
  if (this->supplementary_sign_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->supplementary_sign_type());
  }

  // double sign_pos_z = 3;
  if (this->sign_pos_z() != 0) {
    total_size += 1 + 8;
  }

  // double sign_pos_y = 4;
  if (this->sign_pos_y() != 0) {
    total_size += 1 + 8;
  }

  // double sign_pos_x = 5;
  if (this->sign_pos_x() != 0) {
    total_size += 1 + 8;
  }

  // .Calmcar.drivers.TSR.Tsr_detail_2_721.Filter_typeType filter_type = 6;
  if (this->filter_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tsr_detail_2_721::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tsr_detail_2_721*>(&from));
}

void Tsr_detail_2_721::MergeFrom(const Tsr_detail_2_721& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.TSR.Tsr_detail_2_721)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vision_only_sign_type() != 0) {
    set_vision_only_sign_type(from.vision_only_sign_type());
  }
  if (from.supplementary_sign_type() != 0) {
    set_supplementary_sign_type(from.supplementary_sign_type());
  }
  if (from.sign_pos_z() != 0) {
    set_sign_pos_z(from.sign_pos_z());
  }
  if (from.sign_pos_y() != 0) {
    set_sign_pos_y(from.sign_pos_y());
  }
  if (from.sign_pos_x() != 0) {
    set_sign_pos_x(from.sign_pos_x());
  }
  if (from.filter_type() != 0) {
    set_filter_type(from.filter_type());
  }
}

void Tsr_detail_2_721::CopyFrom(const Tsr_detail_2_721& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.TSR.Tsr_detail_2_721)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tsr_detail_2_721::IsInitialized() const {
  return true;
}

void Tsr_detail_2_721::Swap(Tsr_detail_2_721* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tsr_detail_2_721::InternalSwap(Tsr_detail_2_721* other) {
  using std::swap;
  swap(vision_only_sign_type_, other->vision_only_sign_type_);
  swap(supplementary_sign_type_, other->supplementary_sign_type_);
  swap(sign_pos_z_, other->sign_pos_z_);
  swap(sign_pos_y_, other->sign_pos_y_);
  swap(sign_pos_x_, other->sign_pos_x_);
  swap(filter_type_, other->filter_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Tsr_detail_2_721::GetTypeName() const {
  return "Calmcar.drivers.TSR.Tsr_detail_2_721";
}


// ===================================================================

void Tsr::InitAsDefaultInstance() {
  ::Calmcar::drivers::TSR::_Tsr_default_instance_._instance.get_mutable()->header_ = const_cast< ::Calmcar::common::Header*>(
      ::Calmcar::common::Header::internal_default_instance());
  ::Calmcar::drivers::TSR::_Tsr_default_instance_._instance.get_mutable()->aftermarket_ext_669_ = const_cast< ::Calmcar::drivers::TSR::Aftermarket_ext_669*>(
      ::Calmcar::drivers::TSR::Aftermarket_ext_669::internal_default_instance());
  ::Calmcar::drivers::TSR::_Tsr_default_instance_._instance.get_mutable()->signal_car_760_ = const_cast< ::Calmcar::drivers::TSR::Signal_car_760*>(
      ::Calmcar::drivers::TSR::Signal_car_760::internal_default_instance());
  ::Calmcar::drivers::TSR::_Tsr_default_instance_._instance.get_mutable()->aws_700_ = const_cast< ::Calmcar::drivers::TSR::Aws_700*>(
      ::Calmcar::drivers::TSR::Aws_700::internal_default_instance());
  ::Calmcar::drivers::TSR::_Tsr_default_instance_._instance.get_mutable()->tsr_detail_7_726_ = const_cast< ::Calmcar::drivers::TSR::Tsr_detail_7_726*>(
      ::Calmcar::drivers::TSR::Tsr_detail_7_726::internal_default_instance());
  ::Calmcar::drivers::TSR::_Tsr_default_instance_._instance.get_mutable()->vision_only_tsr_727_ = const_cast< ::Calmcar::drivers::TSR::Vision_only_tsr_727*>(
      ::Calmcar::drivers::TSR::Vision_only_tsr_727::internal_default_instance());
  ::Calmcar::drivers::TSR::_Tsr_default_instance_._instance.get_mutable()->tsr_detail_5_724_ = const_cast< ::Calmcar::drivers::TSR::Tsr_detail_5_724*>(
      ::Calmcar::drivers::TSR::Tsr_detail_5_724::internal_default_instance());
  ::Calmcar::drivers::TSR::_Tsr_default_instance_._instance.get_mutable()->tsr_detail_6_725_ = const_cast< ::Calmcar::drivers::TSR::Tsr_detail_6_725*>(
      ::Calmcar::drivers::TSR::Tsr_detail_6_725::internal_default_instance());
  ::Calmcar::drivers::TSR::_Tsr_default_instance_._instance.get_mutable()->tsr_detail_3_722_ = const_cast< ::Calmcar::drivers::TSR::Tsr_detail_3_722*>(
      ::Calmcar::drivers::TSR::Tsr_detail_3_722::internal_default_instance());
  ::Calmcar::drivers::TSR::_Tsr_default_instance_._instance.get_mutable()->tsr_detail_4_723_ = const_cast< ::Calmcar::drivers::TSR::Tsr_detail_4_723*>(
      ::Calmcar::drivers::TSR::Tsr_detail_4_723::internal_default_instance());
  ::Calmcar::drivers::TSR::_Tsr_default_instance_._instance.get_mutable()->tsr_detail_1_720_ = const_cast< ::Calmcar::drivers::TSR::Tsr_detail_1_720*>(
      ::Calmcar::drivers::TSR::Tsr_detail_1_720::internal_default_instance());
  ::Calmcar::drivers::TSR::_Tsr_default_instance_._instance.get_mutable()->tsr_detail_2_721_ = const_cast< ::Calmcar::drivers::TSR::Tsr_detail_2_721*>(
      ::Calmcar::drivers::TSR::Tsr_detail_2_721::internal_default_instance());
}
void Tsr::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tsr::kHeaderFieldNumber;
const int Tsr::kAftermarketExt669FieldNumber;
const int Tsr::kSignalCar760FieldNumber;
const int Tsr::kAws700FieldNumber;
const int Tsr::kTsrDetail7726FieldNumber;
const int Tsr::kVisionOnlyTsr727FieldNumber;
const int Tsr::kTsrDetail5724FieldNumber;
const int Tsr::kTsrDetail6725FieldNumber;
const int Tsr::kTsrDetail3722FieldNumber;
const int Tsr::kTsrDetail4723FieldNumber;
const int Tsr::kTsrDetail1720FieldNumber;
const int Tsr::kTsrDetail2721FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tsr::Tsr()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tsr_2eproto::scc_info_Tsr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.TSR.Tsr)
}
Tsr::Tsr(const Tsr& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::Calmcar::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_aftermarket_ext_669()) {
    aftermarket_ext_669_ = new ::Calmcar::drivers::TSR::Aftermarket_ext_669(*from.aftermarket_ext_669_);
  } else {
    aftermarket_ext_669_ = NULL;
  }
  if (from.has_signal_car_760()) {
    signal_car_760_ = new ::Calmcar::drivers::TSR::Signal_car_760(*from.signal_car_760_);
  } else {
    signal_car_760_ = NULL;
  }
  if (from.has_aws_700()) {
    aws_700_ = new ::Calmcar::drivers::TSR::Aws_700(*from.aws_700_);
  } else {
    aws_700_ = NULL;
  }
  if (from.has_tsr_detail_7_726()) {
    tsr_detail_7_726_ = new ::Calmcar::drivers::TSR::Tsr_detail_7_726(*from.tsr_detail_7_726_);
  } else {
    tsr_detail_7_726_ = NULL;
  }
  if (from.has_vision_only_tsr_727()) {
    vision_only_tsr_727_ = new ::Calmcar::drivers::TSR::Vision_only_tsr_727(*from.vision_only_tsr_727_);
  } else {
    vision_only_tsr_727_ = NULL;
  }
  if (from.has_tsr_detail_5_724()) {
    tsr_detail_5_724_ = new ::Calmcar::drivers::TSR::Tsr_detail_5_724(*from.tsr_detail_5_724_);
  } else {
    tsr_detail_5_724_ = NULL;
  }
  if (from.has_tsr_detail_6_725()) {
    tsr_detail_6_725_ = new ::Calmcar::drivers::TSR::Tsr_detail_6_725(*from.tsr_detail_6_725_);
  } else {
    tsr_detail_6_725_ = NULL;
  }
  if (from.has_tsr_detail_3_722()) {
    tsr_detail_3_722_ = new ::Calmcar::drivers::TSR::Tsr_detail_3_722(*from.tsr_detail_3_722_);
  } else {
    tsr_detail_3_722_ = NULL;
  }
  if (from.has_tsr_detail_4_723()) {
    tsr_detail_4_723_ = new ::Calmcar::drivers::TSR::Tsr_detail_4_723(*from.tsr_detail_4_723_);
  } else {
    tsr_detail_4_723_ = NULL;
  }
  if (from.has_tsr_detail_1_720()) {
    tsr_detail_1_720_ = new ::Calmcar::drivers::TSR::Tsr_detail_1_720(*from.tsr_detail_1_720_);
  } else {
    tsr_detail_1_720_ = NULL;
  }
  if (from.has_tsr_detail_2_721()) {
    tsr_detail_2_721_ = new ::Calmcar::drivers::TSR::Tsr_detail_2_721(*from.tsr_detail_2_721_);
  } else {
    tsr_detail_2_721_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.TSR.Tsr)
}

void Tsr::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tsr_detail_2_721_) -
      reinterpret_cast<char*>(&header_)) + sizeof(tsr_detail_2_721_));
}

Tsr::~Tsr() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.TSR.Tsr)
  SharedDtor();
}

void Tsr::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete aftermarket_ext_669_;
  if (this != internal_default_instance()) delete signal_car_760_;
  if (this != internal_default_instance()) delete aws_700_;
  if (this != internal_default_instance()) delete tsr_detail_7_726_;
  if (this != internal_default_instance()) delete vision_only_tsr_727_;
  if (this != internal_default_instance()) delete tsr_detail_5_724_;
  if (this != internal_default_instance()) delete tsr_detail_6_725_;
  if (this != internal_default_instance()) delete tsr_detail_3_722_;
  if (this != internal_default_instance()) delete tsr_detail_4_723_;
  if (this != internal_default_instance()) delete tsr_detail_1_720_;
  if (this != internal_default_instance()) delete tsr_detail_2_721_;
}

void Tsr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tsr& Tsr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tsr_2eproto::scc_info_Tsr.base);
  return *internal_default_instance();
}


void Tsr::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.TSR.Tsr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && aftermarket_ext_669_ != NULL) {
    delete aftermarket_ext_669_;
  }
  aftermarket_ext_669_ = NULL;
  if (GetArenaNoVirtual() == NULL && signal_car_760_ != NULL) {
    delete signal_car_760_;
  }
  signal_car_760_ = NULL;
  if (GetArenaNoVirtual() == NULL && aws_700_ != NULL) {
    delete aws_700_;
  }
  aws_700_ = NULL;
  if (GetArenaNoVirtual() == NULL && tsr_detail_7_726_ != NULL) {
    delete tsr_detail_7_726_;
  }
  tsr_detail_7_726_ = NULL;
  if (GetArenaNoVirtual() == NULL && vision_only_tsr_727_ != NULL) {
    delete vision_only_tsr_727_;
  }
  vision_only_tsr_727_ = NULL;
  if (GetArenaNoVirtual() == NULL && tsr_detail_5_724_ != NULL) {
    delete tsr_detail_5_724_;
  }
  tsr_detail_5_724_ = NULL;
  if (GetArenaNoVirtual() == NULL && tsr_detail_6_725_ != NULL) {
    delete tsr_detail_6_725_;
  }
  tsr_detail_6_725_ = NULL;
  if (GetArenaNoVirtual() == NULL && tsr_detail_3_722_ != NULL) {
    delete tsr_detail_3_722_;
  }
  tsr_detail_3_722_ = NULL;
  if (GetArenaNoVirtual() == NULL && tsr_detail_4_723_ != NULL) {
    delete tsr_detail_4_723_;
  }
  tsr_detail_4_723_ = NULL;
  if (GetArenaNoVirtual() == NULL && tsr_detail_1_720_ != NULL) {
    delete tsr_detail_1_720_;
  }
  tsr_detail_1_720_ = NULL;
  if (GetArenaNoVirtual() == NULL && tsr_detail_2_721_ != NULL) {
    delete tsr_detail_2_721_;
  }
  tsr_detail_2_721_ = NULL;
  _internal_metadata_.Clear();
}

bool Tsr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.TSR.Tsr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Calmcar.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aftermarket_ext_669 aftermarket_ext_669 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_aftermarket_ext_669()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Signal_car_760 signal_car_760 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signal_car_760()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Aws_700 aws_700 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_aws_700()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_7_726 tsr_detail_7_726 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tsr_detail_7_726()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Vision_only_tsr_727 vision_only_tsr_727 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vision_only_tsr_727()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_5_724 tsr_detail_5_724 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tsr_detail_5_724()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_6_725 tsr_detail_6_725 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tsr_detail_6_725()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_3_722 tsr_detail_3_722 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tsr_detail_3_722()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_4_723 tsr_detail_4_723 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tsr_detail_4_723()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_1_720 tsr_detail_1_720 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tsr_detail_1_720()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.TSR.Tsr_detail_2_721 tsr_detail_2_721 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tsr_detail_2_721()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.TSR.Tsr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.TSR.Tsr)
  return false;
#undef DO_
}

void Tsr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.TSR.Tsr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Calmcar.common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .Calmcar.drivers.TSR.Aftermarket_ext_669 aftermarket_ext_669 = 2;
  if (this->has_aftermarket_ext_669()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_aftermarket_ext_669(), output);
  }

  // .Calmcar.drivers.TSR.Signal_car_760 signal_car_760 = 3;
  if (this->has_signal_car_760()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_signal_car_760(), output);
  }

  // .Calmcar.drivers.TSR.Aws_700 aws_700 = 4;
  if (this->has_aws_700()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_aws_700(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_7_726 tsr_detail_7_726 = 5;
  if (this->has_tsr_detail_7_726()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_tsr_detail_7_726(), output);
  }

  // .Calmcar.drivers.TSR.Vision_only_tsr_727 vision_only_tsr_727 = 6;
  if (this->has_vision_only_tsr_727()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_vision_only_tsr_727(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_5_724 tsr_detail_5_724 = 7;
  if (this->has_tsr_detail_5_724()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->_internal_tsr_detail_5_724(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_6_725 tsr_detail_6_725 = 8;
  if (this->has_tsr_detail_6_725()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->_internal_tsr_detail_6_725(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_3_722 tsr_detail_3_722 = 9;
  if (this->has_tsr_detail_3_722()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->_internal_tsr_detail_3_722(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_4_723 tsr_detail_4_723 = 10;
  if (this->has_tsr_detail_4_723()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->_internal_tsr_detail_4_723(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_1_720 tsr_detail_1_720 = 11;
  if (this->has_tsr_detail_1_720()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->_internal_tsr_detail_1_720(), output);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_2_721 tsr_detail_2_721 = 12;
  if (this->has_tsr_detail_2_721()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->_internal_tsr_detail_2_721(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.TSR.Tsr)
}

size_t Tsr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.TSR.Tsr)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .Calmcar.common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .Calmcar.drivers.TSR.Aftermarket_ext_669 aftermarket_ext_669 = 2;
  if (this->has_aftermarket_ext_669()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *aftermarket_ext_669_);
  }

  // .Calmcar.drivers.TSR.Signal_car_760 signal_car_760 = 3;
  if (this->has_signal_car_760()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *signal_car_760_);
  }

  // .Calmcar.drivers.TSR.Aws_700 aws_700 = 4;
  if (this->has_aws_700()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *aws_700_);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_7_726 tsr_detail_7_726 = 5;
  if (this->has_tsr_detail_7_726()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tsr_detail_7_726_);
  }

  // .Calmcar.drivers.TSR.Vision_only_tsr_727 vision_only_tsr_727 = 6;
  if (this->has_vision_only_tsr_727()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vision_only_tsr_727_);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_5_724 tsr_detail_5_724 = 7;
  if (this->has_tsr_detail_5_724()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tsr_detail_5_724_);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_6_725 tsr_detail_6_725 = 8;
  if (this->has_tsr_detail_6_725()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tsr_detail_6_725_);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_3_722 tsr_detail_3_722 = 9;
  if (this->has_tsr_detail_3_722()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tsr_detail_3_722_);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_4_723 tsr_detail_4_723 = 10;
  if (this->has_tsr_detail_4_723()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tsr_detail_4_723_);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_1_720 tsr_detail_1_720 = 11;
  if (this->has_tsr_detail_1_720()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tsr_detail_1_720_);
  }

  // .Calmcar.drivers.TSR.Tsr_detail_2_721 tsr_detail_2_721 = 12;
  if (this->has_tsr_detail_2_721()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tsr_detail_2_721_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tsr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tsr*>(&from));
}

void Tsr::MergeFrom(const Tsr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.TSR.Tsr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::Calmcar::common::Header::MergeFrom(from.header());
  }
  if (from.has_aftermarket_ext_669()) {
    mutable_aftermarket_ext_669()->::Calmcar::drivers::TSR::Aftermarket_ext_669::MergeFrom(from.aftermarket_ext_669());
  }
  if (from.has_signal_car_760()) {
    mutable_signal_car_760()->::Calmcar::drivers::TSR::Signal_car_760::MergeFrom(from.signal_car_760());
  }
  if (from.has_aws_700()) {
    mutable_aws_700()->::Calmcar::drivers::TSR::Aws_700::MergeFrom(from.aws_700());
  }
  if (from.has_tsr_detail_7_726()) {
    mutable_tsr_detail_7_726()->::Calmcar::drivers::TSR::Tsr_detail_7_726::MergeFrom(from.tsr_detail_7_726());
  }
  if (from.has_vision_only_tsr_727()) {
    mutable_vision_only_tsr_727()->::Calmcar::drivers::TSR::Vision_only_tsr_727::MergeFrom(from.vision_only_tsr_727());
  }
  if (from.has_tsr_detail_5_724()) {
    mutable_tsr_detail_5_724()->::Calmcar::drivers::TSR::Tsr_detail_5_724::MergeFrom(from.tsr_detail_5_724());
  }
  if (from.has_tsr_detail_6_725()) {
    mutable_tsr_detail_6_725()->::Calmcar::drivers::TSR::Tsr_detail_6_725::MergeFrom(from.tsr_detail_6_725());
  }
  if (from.has_tsr_detail_3_722()) {
    mutable_tsr_detail_3_722()->::Calmcar::drivers::TSR::Tsr_detail_3_722::MergeFrom(from.tsr_detail_3_722());
  }
  if (from.has_tsr_detail_4_723()) {
    mutable_tsr_detail_4_723()->::Calmcar::drivers::TSR::Tsr_detail_4_723::MergeFrom(from.tsr_detail_4_723());
  }
  if (from.has_tsr_detail_1_720()) {
    mutable_tsr_detail_1_720()->::Calmcar::drivers::TSR::Tsr_detail_1_720::MergeFrom(from.tsr_detail_1_720());
  }
  if (from.has_tsr_detail_2_721()) {
    mutable_tsr_detail_2_721()->::Calmcar::drivers::TSR::Tsr_detail_2_721::MergeFrom(from.tsr_detail_2_721());
  }
}

void Tsr::CopyFrom(const Tsr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.TSR.Tsr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tsr::IsInitialized() const {
  return true;
}

void Tsr::Swap(Tsr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tsr::InternalSwap(Tsr* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(aftermarket_ext_669_, other->aftermarket_ext_669_);
  swap(signal_car_760_, other->signal_car_760_);
  swap(aws_700_, other->aws_700_);
  swap(tsr_detail_7_726_, other->tsr_detail_7_726_);
  swap(vision_only_tsr_727_, other->vision_only_tsr_727_);
  swap(tsr_detail_5_724_, other->tsr_detail_5_724_);
  swap(tsr_detail_6_725_, other->tsr_detail_6_725_);
  swap(tsr_detail_3_722_, other->tsr_detail_3_722_);
  swap(tsr_detail_4_723_, other->tsr_detail_4_723_);
  swap(tsr_detail_1_720_, other->tsr_detail_1_720_);
  swap(tsr_detail_2_721_, other->tsr_detail_2_721_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Tsr::GetTypeName() const {
  return "Calmcar.drivers.TSR.Tsr";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace TSR
}  // namespace drivers
}  // namespace Calmcar
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::TSR::Aftermarket_ext_669* Arena::CreateMaybeMessage< ::Calmcar::drivers::TSR::Aftermarket_ext_669 >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::TSR::Aftermarket_ext_669 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::TSR::Signal_car_760* Arena::CreateMaybeMessage< ::Calmcar::drivers::TSR::Signal_car_760 >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::TSR::Signal_car_760 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::TSR::Aws_700* Arena::CreateMaybeMessage< ::Calmcar::drivers::TSR::Aws_700 >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::TSR::Aws_700 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::TSR::Tsr_detail_7_726* Arena::CreateMaybeMessage< ::Calmcar::drivers::TSR::Tsr_detail_7_726 >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::TSR::Tsr_detail_7_726 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::TSR::Vision_only_tsr_727* Arena::CreateMaybeMessage< ::Calmcar::drivers::TSR::Vision_only_tsr_727 >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::TSR::Vision_only_tsr_727 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::TSR::Tsr_detail_5_724* Arena::CreateMaybeMessage< ::Calmcar::drivers::TSR::Tsr_detail_5_724 >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::TSR::Tsr_detail_5_724 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::TSR::Tsr_detail_6_725* Arena::CreateMaybeMessage< ::Calmcar::drivers::TSR::Tsr_detail_6_725 >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::TSR::Tsr_detail_6_725 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::TSR::Tsr_detail_3_722* Arena::CreateMaybeMessage< ::Calmcar::drivers::TSR::Tsr_detail_3_722 >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::TSR::Tsr_detail_3_722 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::TSR::Tsr_detail_4_723* Arena::CreateMaybeMessage< ::Calmcar::drivers::TSR::Tsr_detail_4_723 >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::TSR::Tsr_detail_4_723 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::TSR::Tsr_detail_1_720* Arena::CreateMaybeMessage< ::Calmcar::drivers::TSR::Tsr_detail_1_720 >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::TSR::Tsr_detail_1_720 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::TSR::Tsr_detail_2_721* Arena::CreateMaybeMessage< ::Calmcar::drivers::TSR::Tsr_detail_2_721 >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::TSR::Tsr_detail_2_721 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::TSR::Tsr* Arena::CreateMaybeMessage< ::Calmcar::drivers::TSR::Tsr >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::TSR::Tsr >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
