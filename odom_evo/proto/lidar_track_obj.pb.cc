// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lidar_track_obj.proto

#include "lidar_track_obj.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_lidar_5ftrack_5fobj_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_lidar_5ftrack_5fobj_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HEADER;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_lidar_5ftrack_5fobj_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_obj_info;
}  // namespace protobuf_lidar_5ftrack_5fobj_2eproto
namespace lidar_obj_track {
namespace proto {
class HEADERDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HEADER>
      _instance;
} _HEADER_default_instance_;
class obj_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<obj_info>
      _instance;
} _obj_info_default_instance_;
class lidar_obj_trackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<lidar_obj_track>
      _instance;
} _lidar_obj_track_default_instance_;
}  // namespace proto
}  // namespace lidar_obj_track
namespace protobuf_lidar_5ftrack_5fobj_2eproto {
static void InitDefaultsHEADER() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lidar_obj_track::proto::_HEADER_default_instance_;
    new (ptr) ::lidar_obj_track::proto::HEADER();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lidar_obj_track::proto::HEADER::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HEADER =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHEADER}, {}};

static void InitDefaultsobj_info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lidar_obj_track::proto::_obj_info_default_instance_;
    new (ptr) ::lidar_obj_track::proto::obj_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lidar_obj_track::proto::obj_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_obj_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsobj_info}, {}};

static void InitDefaultslidar_obj_track() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lidar_obj_track::proto::_lidar_obj_track_default_instance_;
    new (ptr) ::lidar_obj_track::proto::lidar_obj_track();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lidar_obj_track::proto::lidar_obj_track::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_lidar_obj_track =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultslidar_obj_track}, {
      &protobuf_lidar_5ftrack_5fobj_2eproto::scc_info_HEADER.base,
      &protobuf_lidar_5ftrack_5fobj_2eproto::scc_info_obj_info.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_HEADER.base);
  ::google::protobuf::internal::InitSCC(&scc_info_obj_info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_lidar_obj_track.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::HEADER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::HEADER, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::HEADER, rolling_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::HEADER, num_of_obj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::HEADER, id_liar_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, obj_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, class_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, life_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, motion_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, loc_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, loc_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, loc_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, orientation_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, meas_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, vx_vehicle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, vy_vehicle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, loc_x_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, loc_y_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, vx_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, vy_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, orientation_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::obj_info, stable_vrel_flag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::lidar_obj_track, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::lidar_obj_track, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lidar_obj_track::proto::lidar_obj_track, obj_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lidar_obj_track::proto::HEADER)},
  { 9, -1, sizeof(::lidar_obj_track::proto::obj_info)},
  { 35, -1, sizeof(::lidar_obj_track::proto::lidar_obj_track)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::lidar_obj_track::proto::_HEADER_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lidar_obj_track::proto::_obj_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::lidar_obj_track::proto::_lidar_obj_track_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "lidar_track_obj.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025lidar_track_obj.proto\022\025lidar_obj_track"
      ".proto\"Y\n\006HEADER\022\021\n\ttimestamp\030\001 \001(\004\022\027\n\017r"
      "olling_counter\030\002 \001(\r\022\022\n\nnum_of_obj\030\003 \001(\r"
      "\022\017\n\007id_liar\030\004 \001(\r\"\230\003\n\010obj_info\022\016\n\006obj_id"
      "\030\001 \001(\r\022\022\n\nclass_type\030\002 \001(\r\022\022\n\nconfidence"
      "\030\003 \001(\001\022\021\n\tlife_time\030\004 \001(\r\022\025\n\rmotion_stat"
      "us\030\005 \001(\r\022\r\n\005width\030\006 \001(\001\022\016\n\006height\030\007 \001(\001\022"
      "\016\n\006length\030\010 \001(\001\022\r\n\005loc_x\030\t \001(\001\022\r\n\005loc_y\030"
      "\n \001(\001\022\r\n\005loc_z\030\013 \001(\001\022\031\n\021orientation_angl"
      "e\030\014 \001(\001\022\022\n\nmeas_state\030\r \001(\r\022\022\n\nvx_vehicl"
      "e\030\016 \001(\001\022\022\n\nvy_vehicle\030\017 \001(\001\022\021\n\tloc_x_rms"
      "\030\020 \001(\001\022\021\n\tloc_y_rms\030\021 \001(\001\022\016\n\006vx_rms\030\022 \001("
      "\001\022\016\n\006vy_rms\030\023 \001(\001\022\027\n\017orientation_rms\030\024 \001"
      "(\001\022\030\n\020stable_vrel_flag\030\025 \001(\010\"n\n\017lidar_ob"
      "j_track\022-\n\006header\030\001 \001(\0132\035.lidar_obj_trac"
      "k.proto.HEADER\022,\n\003obj\030\002 \003(\0132\037.lidar_obj_"
      "track.proto.obj_infob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 668);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lidar_track_obj.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_lidar_5ftrack_5fobj_2eproto
namespace lidar_obj_track {
namespace proto {

// ===================================================================

void HEADER::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HEADER::kTimestampFieldNumber;
const int HEADER::kRollingCounterFieldNumber;
const int HEADER::kNumOfObjFieldNumber;
const int HEADER::kIdLiarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HEADER::HEADER()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_lidar_5ftrack_5fobj_2eproto::scc_info_HEADER.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:lidar_obj_track.proto.HEADER)
}
HEADER::HEADER(const HEADER& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_liar_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(id_liar_));
  // @@protoc_insertion_point(copy_constructor:lidar_obj_track.proto.HEADER)
}

void HEADER::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_liar_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(id_liar_));
}

HEADER::~HEADER() {
  // @@protoc_insertion_point(destructor:lidar_obj_track.proto.HEADER)
  SharedDtor();
}

void HEADER::SharedDtor() {
}

void HEADER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HEADER::descriptor() {
  ::protobuf_lidar_5ftrack_5fobj_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5ftrack_5fobj_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HEADER& HEADER::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_lidar_5ftrack_5fobj_2eproto::scc_info_HEADER.base);
  return *internal_default_instance();
}


void HEADER::Clear() {
// @@protoc_insertion_point(message_clear_start:lidar_obj_track.proto.HEADER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_liar_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(id_liar_));
  _internal_metadata_.Clear();
}

bool HEADER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lidar_obj_track.proto.HEADER)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rolling_counter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolling_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_of_obj = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_of_obj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id_liar = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_liar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lidar_obj_track.proto.HEADER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lidar_obj_track.proto.HEADER)
  return false;
#undef DO_
}

void HEADER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lidar_obj_track.proto.HEADER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rolling_counter(), output);
  }

  // uint32 num_of_obj = 3;
  if (this->num_of_obj() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_of_obj(), output);
  }

  // uint32 id_liar = 4;
  if (this->id_liar() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id_liar(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lidar_obj_track.proto.HEADER)
}

::google::protobuf::uint8* HEADER::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lidar_obj_track.proto.HEADER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rolling_counter(), target);
  }

  // uint32 num_of_obj = 3;
  if (this->num_of_obj() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_of_obj(), target);
  }

  // uint32 id_liar = 4;
  if (this->id_liar() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id_liar(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lidar_obj_track.proto.HEADER)
  return target;
}

size_t HEADER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lidar_obj_track.proto.HEADER)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rolling_counter());
  }

  // uint32 num_of_obj = 3;
  if (this->num_of_obj() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_of_obj());
  }

  // uint32 id_liar = 4;
  if (this->id_liar() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id_liar());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HEADER::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lidar_obj_track.proto.HEADER)
  GOOGLE_DCHECK_NE(&from, this);
  const HEADER* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HEADER>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lidar_obj_track.proto.HEADER)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lidar_obj_track.proto.HEADER)
    MergeFrom(*source);
  }
}

void HEADER::MergeFrom(const HEADER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lidar_obj_track.proto.HEADER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.rolling_counter() != 0) {
    set_rolling_counter(from.rolling_counter());
  }
  if (from.num_of_obj() != 0) {
    set_num_of_obj(from.num_of_obj());
  }
  if (from.id_liar() != 0) {
    set_id_liar(from.id_liar());
  }
}

void HEADER::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lidar_obj_track.proto.HEADER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HEADER::CopyFrom(const HEADER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lidar_obj_track.proto.HEADER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HEADER::IsInitialized() const {
  return true;
}

void HEADER::Swap(HEADER* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HEADER::InternalSwap(HEADER* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(rolling_counter_, other->rolling_counter_);
  swap(num_of_obj_, other->num_of_obj_);
  swap(id_liar_, other->id_liar_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HEADER::GetMetadata() const {
  protobuf_lidar_5ftrack_5fobj_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5ftrack_5fobj_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void obj_info::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int obj_info::kObjIdFieldNumber;
const int obj_info::kClassTypeFieldNumber;
const int obj_info::kConfidenceFieldNumber;
const int obj_info::kLifeTimeFieldNumber;
const int obj_info::kMotionStatusFieldNumber;
const int obj_info::kWidthFieldNumber;
const int obj_info::kHeightFieldNumber;
const int obj_info::kLengthFieldNumber;
const int obj_info::kLocXFieldNumber;
const int obj_info::kLocYFieldNumber;
const int obj_info::kLocZFieldNumber;
const int obj_info::kOrientationAngleFieldNumber;
const int obj_info::kMeasStateFieldNumber;
const int obj_info::kVxVehicleFieldNumber;
const int obj_info::kVyVehicleFieldNumber;
const int obj_info::kLocXRmsFieldNumber;
const int obj_info::kLocYRmsFieldNumber;
const int obj_info::kVxRmsFieldNumber;
const int obj_info::kVyRmsFieldNumber;
const int obj_info::kOrientationRmsFieldNumber;
const int obj_info::kStableVrelFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

obj_info::obj_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_lidar_5ftrack_5fobj_2eproto::scc_info_obj_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:lidar_obj_track.proto.obj_info)
}
obj_info::obj_info(const obj_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&obj_id_, &from.obj_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&orientation_rms_) -
    reinterpret_cast<char*>(&obj_id_)) + sizeof(orientation_rms_));
  // @@protoc_insertion_point(copy_constructor:lidar_obj_track.proto.obj_info)
}

void obj_info::SharedCtor() {
  ::memset(&obj_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_rms_) -
      reinterpret_cast<char*>(&obj_id_)) + sizeof(orientation_rms_));
}

obj_info::~obj_info() {
  // @@protoc_insertion_point(destructor:lidar_obj_track.proto.obj_info)
  SharedDtor();
}

void obj_info::SharedDtor() {
}

void obj_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* obj_info::descriptor() {
  ::protobuf_lidar_5ftrack_5fobj_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5ftrack_5fobj_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const obj_info& obj_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_lidar_5ftrack_5fobj_2eproto::scc_info_obj_info.base);
  return *internal_default_instance();
}


void obj_info::Clear() {
// @@protoc_insertion_point(message_clear_start:lidar_obj_track.proto.obj_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&obj_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_rms_) -
      reinterpret_cast<char*>(&obj_id_)) + sizeof(orientation_rms_));
  _internal_metadata_.Clear();
}

bool obj_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lidar_obj_track.proto.obj_info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 obj_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 class_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double confidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 life_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &life_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 motion_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motion_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double loc_x = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loc_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double loc_y = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loc_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double loc_z = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loc_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double orientation_angle = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientation_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 meas_state = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meas_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vx_vehicle = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vx_vehicle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vy_vehicle = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vy_vehicle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double loc_x_rms = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loc_x_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double loc_y_rms = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loc_y_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vx_rms = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vx_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vy_rms = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vy_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double orientation_rms = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientation_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool stable_vrel_flag = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stable_vrel_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lidar_obj_track.proto.obj_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lidar_obj_track.proto.obj_info)
  return false;
#undef DO_
}

void obj_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lidar_obj_track.proto.obj_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 obj_id = 1;
  if (this->obj_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->obj_id(), output);
  }

  // uint32 class_type = 2;
  if (this->class_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->class_type(), output);
  }

  // double confidence = 3;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->confidence(), output);
  }

  // uint32 life_time = 4;
  if (this->life_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->life_time(), output);
  }

  // uint32 motion_status = 5;
  if (this->motion_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->motion_status(), output);
  }

  // double width = 6;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // double height = 7;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->height(), output);
  }

  // double length = 8;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->length(), output);
  }

  // double loc_x = 9;
  if (this->loc_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->loc_x(), output);
  }

  // double loc_y = 10;
  if (this->loc_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->loc_y(), output);
  }

  // double loc_z = 11;
  if (this->loc_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->loc_z(), output);
  }

  // double orientation_angle = 12;
  if (this->orientation_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->orientation_angle(), output);
  }

  // uint32 meas_state = 13;
  if (this->meas_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->meas_state(), output);
  }

  // double vx_vehicle = 14;
  if (this->vx_vehicle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->vx_vehicle(), output);
  }

  // double vy_vehicle = 15;
  if (this->vy_vehicle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->vy_vehicle(), output);
  }

  // double loc_x_rms = 16;
  if (this->loc_x_rms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->loc_x_rms(), output);
  }

  // double loc_y_rms = 17;
  if (this->loc_y_rms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->loc_y_rms(), output);
  }

  // double vx_rms = 18;
  if (this->vx_rms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->vx_rms(), output);
  }

  // double vy_rms = 19;
  if (this->vy_rms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->vy_rms(), output);
  }

  // double orientation_rms = 20;
  if (this->orientation_rms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->orientation_rms(), output);
  }

  // bool stable_vrel_flag = 21;
  if (this->stable_vrel_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->stable_vrel_flag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lidar_obj_track.proto.obj_info)
}

::google::protobuf::uint8* obj_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lidar_obj_track.proto.obj_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 obj_id = 1;
  if (this->obj_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->obj_id(), target);
  }

  // uint32 class_type = 2;
  if (this->class_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->class_type(), target);
  }

  // double confidence = 3;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->confidence(), target);
  }

  // uint32 life_time = 4;
  if (this->life_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->life_time(), target);
  }

  // uint32 motion_status = 5;
  if (this->motion_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->motion_status(), target);
  }

  // double width = 6;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // double height = 7;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->height(), target);
  }

  // double length = 8;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->length(), target);
  }

  // double loc_x = 9;
  if (this->loc_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->loc_x(), target);
  }

  // double loc_y = 10;
  if (this->loc_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->loc_y(), target);
  }

  // double loc_z = 11;
  if (this->loc_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->loc_z(), target);
  }

  // double orientation_angle = 12;
  if (this->orientation_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->orientation_angle(), target);
  }

  // uint32 meas_state = 13;
  if (this->meas_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->meas_state(), target);
  }

  // double vx_vehicle = 14;
  if (this->vx_vehicle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->vx_vehicle(), target);
  }

  // double vy_vehicle = 15;
  if (this->vy_vehicle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->vy_vehicle(), target);
  }

  // double loc_x_rms = 16;
  if (this->loc_x_rms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->loc_x_rms(), target);
  }

  // double loc_y_rms = 17;
  if (this->loc_y_rms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->loc_y_rms(), target);
  }

  // double vx_rms = 18;
  if (this->vx_rms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->vx_rms(), target);
  }

  // double vy_rms = 19;
  if (this->vy_rms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->vy_rms(), target);
  }

  // double orientation_rms = 20;
  if (this->orientation_rms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->orientation_rms(), target);
  }

  // bool stable_vrel_flag = 21;
  if (this->stable_vrel_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->stable_vrel_flag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lidar_obj_track.proto.obj_info)
  return target;
}

size_t obj_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lidar_obj_track.proto.obj_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 obj_id = 1;
  if (this->obj_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->obj_id());
  }

  // uint32 class_type = 2;
  if (this->class_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->class_type());
  }

  // double confidence = 3;
  if (this->confidence() != 0) {
    total_size += 1 + 8;
  }

  // uint32 life_time = 4;
  if (this->life_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->life_time());
  }

  // uint32 motion_status = 5;
  if (this->motion_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->motion_status());
  }

  // double width = 6;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // double height = 7;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // double length = 8;
  if (this->length() != 0) {
    total_size += 1 + 8;
  }

  // double loc_x = 9;
  if (this->loc_x() != 0) {
    total_size += 1 + 8;
  }

  // double loc_y = 10;
  if (this->loc_y() != 0) {
    total_size += 1 + 8;
  }

  // double loc_z = 11;
  if (this->loc_z() != 0) {
    total_size += 1 + 8;
  }

  // double orientation_angle = 12;
  if (this->orientation_angle() != 0) {
    total_size += 1 + 8;
  }

  // double vx_vehicle = 14;
  if (this->vx_vehicle() != 0) {
    total_size += 1 + 8;
  }

  // double vy_vehicle = 15;
  if (this->vy_vehicle() != 0) {
    total_size += 1 + 8;
  }

  // double loc_x_rms = 16;
  if (this->loc_x_rms() != 0) {
    total_size += 2 + 8;
  }

  // double loc_y_rms = 17;
  if (this->loc_y_rms() != 0) {
    total_size += 2 + 8;
  }

  // uint32 meas_state = 13;
  if (this->meas_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->meas_state());
  }

  // bool stable_vrel_flag = 21;
  if (this->stable_vrel_flag() != 0) {
    total_size += 2 + 1;
  }

  // double vx_rms = 18;
  if (this->vx_rms() != 0) {
    total_size += 2 + 8;
  }

  // double vy_rms = 19;
  if (this->vy_rms() != 0) {
    total_size += 2 + 8;
  }

  // double orientation_rms = 20;
  if (this->orientation_rms() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void obj_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lidar_obj_track.proto.obj_info)
  GOOGLE_DCHECK_NE(&from, this);
  const obj_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const obj_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lidar_obj_track.proto.obj_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lidar_obj_track.proto.obj_info)
    MergeFrom(*source);
  }
}

void obj_info::MergeFrom(const obj_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lidar_obj_track.proto.obj_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obj_id() != 0) {
    set_obj_id(from.obj_id());
  }
  if (from.class_type() != 0) {
    set_class_type(from.class_type());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.life_time() != 0) {
    set_life_time(from.life_time());
  }
  if (from.motion_status() != 0) {
    set_motion_status(from.motion_status());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.loc_x() != 0) {
    set_loc_x(from.loc_x());
  }
  if (from.loc_y() != 0) {
    set_loc_y(from.loc_y());
  }
  if (from.loc_z() != 0) {
    set_loc_z(from.loc_z());
  }
  if (from.orientation_angle() != 0) {
    set_orientation_angle(from.orientation_angle());
  }
  if (from.vx_vehicle() != 0) {
    set_vx_vehicle(from.vx_vehicle());
  }
  if (from.vy_vehicle() != 0) {
    set_vy_vehicle(from.vy_vehicle());
  }
  if (from.loc_x_rms() != 0) {
    set_loc_x_rms(from.loc_x_rms());
  }
  if (from.loc_y_rms() != 0) {
    set_loc_y_rms(from.loc_y_rms());
  }
  if (from.meas_state() != 0) {
    set_meas_state(from.meas_state());
  }
  if (from.stable_vrel_flag() != 0) {
    set_stable_vrel_flag(from.stable_vrel_flag());
  }
  if (from.vx_rms() != 0) {
    set_vx_rms(from.vx_rms());
  }
  if (from.vy_rms() != 0) {
    set_vy_rms(from.vy_rms());
  }
  if (from.orientation_rms() != 0) {
    set_orientation_rms(from.orientation_rms());
  }
}

void obj_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lidar_obj_track.proto.obj_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void obj_info::CopyFrom(const obj_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lidar_obj_track.proto.obj_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool obj_info::IsInitialized() const {
  return true;
}

void obj_info::Swap(obj_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void obj_info::InternalSwap(obj_info* other) {
  using std::swap;
  swap(obj_id_, other->obj_id_);
  swap(class_type_, other->class_type_);
  swap(confidence_, other->confidence_);
  swap(life_time_, other->life_time_);
  swap(motion_status_, other->motion_status_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(length_, other->length_);
  swap(loc_x_, other->loc_x_);
  swap(loc_y_, other->loc_y_);
  swap(loc_z_, other->loc_z_);
  swap(orientation_angle_, other->orientation_angle_);
  swap(vx_vehicle_, other->vx_vehicle_);
  swap(vy_vehicle_, other->vy_vehicle_);
  swap(loc_x_rms_, other->loc_x_rms_);
  swap(loc_y_rms_, other->loc_y_rms_);
  swap(meas_state_, other->meas_state_);
  swap(stable_vrel_flag_, other->stable_vrel_flag_);
  swap(vx_rms_, other->vx_rms_);
  swap(vy_rms_, other->vy_rms_);
  swap(orientation_rms_, other->orientation_rms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata obj_info::GetMetadata() const {
  protobuf_lidar_5ftrack_5fobj_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5ftrack_5fobj_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void lidar_obj_track::InitAsDefaultInstance() {
  ::lidar_obj_track::proto::_lidar_obj_track_default_instance_._instance.get_mutable()->header_ = const_cast< ::lidar_obj_track::proto::HEADER*>(
      ::lidar_obj_track::proto::HEADER::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lidar_obj_track::kHeaderFieldNumber;
const int lidar_obj_track::kObjFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lidar_obj_track::lidar_obj_track()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_lidar_5ftrack_5fobj_2eproto::scc_info_lidar_obj_track.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:lidar_obj_track.proto.lidar_obj_track)
}
lidar_obj_track::lidar_obj_track(const lidar_obj_track& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      obj_(from.obj_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::lidar_obj_track::proto::HEADER(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:lidar_obj_track.proto.lidar_obj_track)
}

void lidar_obj_track::SharedCtor() {
  header_ = NULL;
}

lidar_obj_track::~lidar_obj_track() {
  // @@protoc_insertion_point(destructor:lidar_obj_track.proto.lidar_obj_track)
  SharedDtor();
}

void lidar_obj_track::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void lidar_obj_track::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* lidar_obj_track::descriptor() {
  ::protobuf_lidar_5ftrack_5fobj_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5ftrack_5fobj_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const lidar_obj_track& lidar_obj_track::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_lidar_5ftrack_5fobj_2eproto::scc_info_lidar_obj_track.base);
  return *internal_default_instance();
}


void lidar_obj_track::Clear() {
// @@protoc_insertion_point(message_clear_start:lidar_obj_track.proto.lidar_obj_track)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obj_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool lidar_obj_track::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lidar_obj_track.proto.lidar_obj_track)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .lidar_obj_track.proto.HEADER header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .lidar_obj_track.proto.obj_info obj = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_obj()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lidar_obj_track.proto.lidar_obj_track)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lidar_obj_track.proto.lidar_obj_track)
  return false;
#undef DO_
}

void lidar_obj_track::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lidar_obj_track.proto.lidar_obj_track)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lidar_obj_track.proto.HEADER header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // repeated .lidar_obj_track.proto.obj_info obj = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obj_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->obj(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lidar_obj_track.proto.lidar_obj_track)
}

::google::protobuf::uint8* lidar_obj_track::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lidar_obj_track.proto.lidar_obj_track)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lidar_obj_track.proto.HEADER header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // repeated .lidar_obj_track.proto.obj_info obj = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obj_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->obj(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lidar_obj_track.proto.lidar_obj_track)
  return target;
}

size_t lidar_obj_track::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lidar_obj_track.proto.lidar_obj_track)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .lidar_obj_track.proto.obj_info obj = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->obj_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obj(static_cast<int>(i)));
    }
  }

  // .lidar_obj_track.proto.HEADER header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lidar_obj_track::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lidar_obj_track.proto.lidar_obj_track)
  GOOGLE_DCHECK_NE(&from, this);
  const lidar_obj_track* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const lidar_obj_track>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lidar_obj_track.proto.lidar_obj_track)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lidar_obj_track.proto.lidar_obj_track)
    MergeFrom(*source);
  }
}

void lidar_obj_track::MergeFrom(const lidar_obj_track& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lidar_obj_track.proto.lidar_obj_track)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obj_.MergeFrom(from.obj_);
  if (from.has_header()) {
    mutable_header()->::lidar_obj_track::proto::HEADER::MergeFrom(from.header());
  }
}

void lidar_obj_track::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lidar_obj_track.proto.lidar_obj_track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lidar_obj_track::CopyFrom(const lidar_obj_track& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lidar_obj_track.proto.lidar_obj_track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lidar_obj_track::IsInitialized() const {
  return true;
}

void lidar_obj_track::Swap(lidar_obj_track* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lidar_obj_track::InternalSwap(lidar_obj_track* other) {
  using std::swap;
  CastToBase(&obj_)->InternalSwap(CastToBase(&other->obj_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata lidar_obj_track::GetMetadata() const {
  protobuf_lidar_5ftrack_5fobj_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5ftrack_5fobj_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace lidar_obj_track
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::lidar_obj_track::proto::HEADER* Arena::CreateMaybeMessage< ::lidar_obj_track::proto::HEADER >(Arena* arena) {
  return Arena::CreateInternal< ::lidar_obj_track::proto::HEADER >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::lidar_obj_track::proto::obj_info* Arena::CreateMaybeMessage< ::lidar_obj_track::proto::obj_info >(Arena* arena) {
  return Arena::CreateInternal< ::lidar_obj_track::proto::obj_info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::lidar_obj_track::proto::lidar_obj_track* Arena::CreateMaybeMessage< ::lidar_obj_track::proto::lidar_obj_track >(Arena* arena) {
  return Arena::CreateInternal< ::lidar_obj_track::proto::lidar_obj_track >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
