// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: odom.proto

#include "odom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_odom_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_odom_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Frame_Header;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_odom_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Frame_Info;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_odom_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Odom_AngleSpeed;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_odom_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Odom_AngleSpeedStd;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_odom_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Odom_LinearSpeed;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_odom_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Odom_LinearSpeedStd;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_odom_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Odom_PoseQuaternion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_odom_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Odom_PoseStd;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_odom_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Odom_Position;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_odom_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Odom_PositionStd;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_odom_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Odom_TransformMatrix;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_odom_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_Odom;
}  // namespace protobuf_odom_2eproto
namespace odom {
namespace proto {
class Odom_PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Odom_Position>
      _instance;
} _Odom_Position_default_instance_;
class Odom_PositionStdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Odom_PositionStd>
      _instance;
} _Odom_PositionStd_default_instance_;
class Odom_PoseQuaternionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Odom_PoseQuaternion>
      _instance;
} _Odom_PoseQuaternion_default_instance_;
class Odom_PoseStdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Odom_PoseStd>
      _instance;
} _Odom_PoseStd_default_instance_;
class Odom_AngleSpeedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Odom_AngleSpeed>
      _instance;
} _Odom_AngleSpeed_default_instance_;
class Odom_AngleSpeedStdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Odom_AngleSpeedStd>
      _instance;
} _Odom_AngleSpeedStd_default_instance_;
class Odom_LinearSpeedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Odom_LinearSpeed>
      _instance;
} _Odom_LinearSpeed_default_instance_;
class Odom_LinearSpeedStdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Odom_LinearSpeedStd>
      _instance;
} _Odom_LinearSpeedStd_default_instance_;
class Odom_TransformMatrixDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Odom_TransformMatrix>
      _instance;
} _Odom_TransformMatrix_default_instance_;
class OdomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Odom>
      _instance;
} _Odom_default_instance_;
class Frame_HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Frame_Header>
      _instance;
} _Frame_Header_default_instance_;
class Frame_InfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Frame_Info>
      _instance;
} _Frame_Info_default_instance_;
class FrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Frame>
      _instance;
} _Frame_default_instance_;
}  // namespace proto
}  // namespace odom
namespace protobuf_odom_2eproto {
static void InitDefaultsOdom_Position() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::odom::proto::_Odom_Position_default_instance_;
    new (ptr) ::odom::proto::Odom_Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::odom::proto::Odom_Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Odom_Position =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOdom_Position}, {}};

static void InitDefaultsOdom_PositionStd() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::odom::proto::_Odom_PositionStd_default_instance_;
    new (ptr) ::odom::proto::Odom_PositionStd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::odom::proto::Odom_PositionStd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Odom_PositionStd =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOdom_PositionStd}, {}};

static void InitDefaultsOdom_PoseQuaternion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::odom::proto::_Odom_PoseQuaternion_default_instance_;
    new (ptr) ::odom::proto::Odom_PoseQuaternion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::odom::proto::Odom_PoseQuaternion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Odom_PoseQuaternion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOdom_PoseQuaternion}, {}};

static void InitDefaultsOdom_PoseStd() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::odom::proto::_Odom_PoseStd_default_instance_;
    new (ptr) ::odom::proto::Odom_PoseStd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::odom::proto::Odom_PoseStd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Odom_PoseStd =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOdom_PoseStd}, {}};

static void InitDefaultsOdom_AngleSpeed() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::odom::proto::_Odom_AngleSpeed_default_instance_;
    new (ptr) ::odom::proto::Odom_AngleSpeed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::odom::proto::Odom_AngleSpeed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Odom_AngleSpeed =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOdom_AngleSpeed}, {}};

static void InitDefaultsOdom_AngleSpeedStd() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::odom::proto::_Odom_AngleSpeedStd_default_instance_;
    new (ptr) ::odom::proto::Odom_AngleSpeedStd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::odom::proto::Odom_AngleSpeedStd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Odom_AngleSpeedStd =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOdom_AngleSpeedStd}, {}};

static void InitDefaultsOdom_LinearSpeed() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::odom::proto::_Odom_LinearSpeed_default_instance_;
    new (ptr) ::odom::proto::Odom_LinearSpeed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::odom::proto::Odom_LinearSpeed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Odom_LinearSpeed =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOdom_LinearSpeed}, {}};

static void InitDefaultsOdom_LinearSpeedStd() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::odom::proto::_Odom_LinearSpeedStd_default_instance_;
    new (ptr) ::odom::proto::Odom_LinearSpeedStd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::odom::proto::Odom_LinearSpeedStd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Odom_LinearSpeedStd =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOdom_LinearSpeedStd}, {}};

static void InitDefaultsOdom_TransformMatrix() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::odom::proto::_Odom_TransformMatrix_default_instance_;
    new (ptr) ::odom::proto::Odom_TransformMatrix();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::odom::proto::Odom_TransformMatrix::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Odom_TransformMatrix =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOdom_TransformMatrix}, {}};

static void InitDefaultsOdom() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::odom::proto::_Odom_default_instance_;
    new (ptr) ::odom::proto::Odom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::odom::proto::Odom::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_Odom =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsOdom}, {
      &protobuf_odom_2eproto::scc_info_Odom_Position.base,
      &protobuf_odom_2eproto::scc_info_Odom_PositionStd.base,
      &protobuf_odom_2eproto::scc_info_Odom_PoseQuaternion.base,
      &protobuf_odom_2eproto::scc_info_Odom_PoseStd.base,
      &protobuf_odom_2eproto::scc_info_Odom_AngleSpeed.base,
      &protobuf_odom_2eproto::scc_info_Odom_AngleSpeedStd.base,
      &protobuf_odom_2eproto::scc_info_Odom_LinearSpeed.base,
      &protobuf_odom_2eproto::scc_info_Odom_LinearSpeedStd.base,
      &protobuf_odom_2eproto::scc_info_Odom_TransformMatrix.base,}};

static void InitDefaultsFrame_Header() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::odom::proto::_Frame_Header_default_instance_;
    new (ptr) ::odom::proto::Frame_Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::odom::proto::Frame_Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Frame_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFrame_Header}, {}};

static void InitDefaultsFrame_Info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::odom::proto::_Frame_Info_default_instance_;
    new (ptr) ::odom::proto::Frame_Info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::odom::proto::Frame_Info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Frame_Info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFrame_Info}, {}};

static void InitDefaultsFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::odom::proto::_Frame_default_instance_;
    new (ptr) ::odom::proto::Frame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::odom::proto::Frame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Frame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsFrame}, {
      &protobuf_odom_2eproto::scc_info_Frame_Header.base,
      &protobuf_odom_2eproto::scc_info_Frame_Info.base,
      &protobuf_odom_2eproto::scc_info_Odom.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Odom_Position.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Odom_PositionStd.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Odom_PoseQuaternion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Odom_PoseStd.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Odom_AngleSpeed.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Odom_AngleSpeedStd.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Odom_LinearSpeed.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Odom_LinearSpeedStd.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Odom_TransformMatrix.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Odom.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Frame_Header.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Frame_Info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Frame.base);
}

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_Position, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_Position, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_Position, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_PositionStd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_PositionStd, x_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_PositionStd, y_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_PositionStd, z_std_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_PoseQuaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_PoseQuaternion, w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_PoseQuaternion, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_PoseQuaternion, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_PoseQuaternion, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_PoseStd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_PoseStd, roll_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_PoseStd, pitch_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_PoseStd, yaw_std_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_AngleSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_AngleSpeed, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_AngleSpeed, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_AngleSpeed, yaw_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_AngleSpeedStd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_AngleSpeedStd, roll_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_AngleSpeedStd, pitch_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_AngleSpeedStd, yaw_std_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_LinearSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_LinearSpeed, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_LinearSpeed, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_LinearSpeed, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_LinearSpeed, vehicle_speed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_LinearSpeedStd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_LinearSpeedStd, x_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_LinearSpeedStd, y_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_LinearSpeedStd, z_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_LinearSpeedStd, vehicle_speed_std_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_TransformMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_TransformMatrix, rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_TransformMatrix, columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom_TransformMatrix, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom, position_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom, pose_quaternion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom, pose_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom, angle_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom, angle_speed_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom, linear_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom, linear_speed_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Odom, transform_matrix_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Frame_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Frame_Header, odom_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Frame_Header, sys_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Frame_Header, rolling_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Frame_Header, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Frame_Header, ins_utm_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Frame_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Frame_Info, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Frame_Info, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Frame, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Frame, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::odom::proto::Frame, odom_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::odom::proto::Odom_Position)},
  { 8, -1, sizeof(::odom::proto::Odom_PositionStd)},
  { 16, -1, sizeof(::odom::proto::Odom_PoseQuaternion)},
  { 25, -1, sizeof(::odom::proto::Odom_PoseStd)},
  { 33, -1, sizeof(::odom::proto::Odom_AngleSpeed)},
  { 41, -1, sizeof(::odom::proto::Odom_AngleSpeedStd)},
  { 49, -1, sizeof(::odom::proto::Odom_LinearSpeed)},
  { 58, -1, sizeof(::odom::proto::Odom_LinearSpeedStd)},
  { 67, -1, sizeof(::odom::proto::Odom_TransformMatrix)},
  { 75, -1, sizeof(::odom::proto::Odom)},
  { 89, -1, sizeof(::odom::proto::Frame_Header)},
  { 99, -1, sizeof(::odom::proto::Frame_Info)},
  { 106, -1, sizeof(::odom::proto::Frame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::odom::proto::_Odom_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::odom::proto::_Odom_PositionStd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::odom::proto::_Odom_PoseQuaternion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::odom::proto::_Odom_PoseStd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::odom::proto::_Odom_AngleSpeed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::odom::proto::_Odom_AngleSpeedStd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::odom::proto::_Odom_LinearSpeed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::odom::proto::_Odom_LinearSpeedStd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::odom::proto::_Odom_TransformMatrix_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::odom::proto::_Odom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::odom::proto::_Frame_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::odom::proto::_Frame_Info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::odom::proto::_Frame_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "odom.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nodom.proto\022\nodom.proto\"\253\010\n\004Odom\022+\n\010pos"
      "ition\030\001 \001(\0132\031.odom.proto.Odom.Position\0222"
      "\n\014position_std\030\002 \001(\0132\034.odom.proto.Odom.P"
      "ositionStd\0228\n\017pose_quaternion\030\003 \001(\0132\037.od"
      "om.proto.Odom.PoseQuaternion\022*\n\010pose_std"
      "\030\004 \001(\0132\030.odom.proto.Odom.PoseStd\0220\n\013angl"
      "e_speed\030\005 \001(\0132\033.odom.proto.Odom.AngleSpe"
      "ed\0227\n\017angle_speed_std\030\006 \001(\0132\036.odom.proto"
      ".Odom.AngleSpeedStd\0222\n\014linear_speed\030\007 \001("
      "\0132\034.odom.proto.Odom.LinearSpeed\0229\n\020linea"
      "r_speed_std\030\010 \001(\0132\037.odom.proto.Odom.Line"
      "arSpeedStd\022:\n\020transform_matrix\030\t \001(\0132 .o"
      "dom.proto.Odom.TransformMatrix\032+\n\010Positi"
      "on\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\032:\n\013P"
      "ositionStd\022\r\n\005x_std\030\001 \001(\001\022\r\n\005y_std\030\002 \001(\001"
      "\022\r\n\005z_std\030\003 \001(\001\032<\n\016PoseQuaternion\022\t\n\001w\030\001"
      " \001(\001\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\t\n\001z\030\004 \001(\001\032\?\n"
      "\007PoseStd\022\020\n\010roll_std\030\001 \001(\001\022\021\n\tpitch_std\030"
      "\002 \001(\001\022\017\n\007yaw_std\030\003 \001(\001\0326\n\nAngleSpeed\022\014\n\004"
      "roll\030\001 \001(\001\022\r\n\005pitch\030\002 \001(\001\022\013\n\003yaw\030\003 \001(\001\032E"
      "\n\rAngleSpeedStd\022\020\n\010roll_std\030\001 \001(\001\022\021\n\tpit"
      "ch_std\030\002 \001(\001\022\017\n\007yaw_std\030\003 \001(\001\032E\n\013LinearS"
      "peed\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\025\n"
      "\rvehicle_speed\030\004 \001(\001\032X\n\016LinearSpeedStd\022\r"
      "\n\005x_std\030\001 \001(\001\022\r\n\005y_std\030\002 \001(\001\022\r\n\005z_std\030\003 "
      "\001(\001\022\031\n\021vehicle_speed_std\030\004 \001(\001\032>\n\017Transf"
      "ormMatrix\022\014\n\004rows\030\001 \001(\005\022\017\n\007columns\030\002 \001(\005"
      "\022\014\n\004data\030\003 \003(\001\"\260\002\n\005Frame\022(\n\006header\030\001 \001(\013"
      "2\030.odom.proto.Frame.Header\022$\n\004info\030\002 \001(\013"
      "2\026.odom.proto.Frame.Info\022\036\n\004odom\030\003 \001(\0132\020"
      ".odom.proto.Odom\032\212\001\n\006Header\022#\n\007odom_id\030\001"
      " \001(\0162\022.odom.proto.OdomId\022\025\n\rsys_timestam"
      "p\030\002 \001(\004\022\027\n\017rolling_counter\030\003 \001(\004\022\020\n\010fram"
      "e_id\030\004 \001(\t\022\031\n\021ins_utm_timestamp\030\005 \001(\004\032*\n"
      "\004Info\022\016\n\006status\030\001 \001(\010\022\022\n\nconfidence\030\002 \001("
      "\001*(\n\006OdomId\022\020\n\014ODOM_CHASSIS\020\000\022\014\n\010ODOM_IN"
      "S\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1451);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "odom.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_odom_2eproto
namespace odom {
namespace proto {
const ::google::protobuf::EnumDescriptor* OdomId_descriptor() {
  protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_odom_2eproto::file_level_enum_descriptors[0];
}
bool OdomId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Odom_Position::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odom_Position::kXFieldNumber;
const int Odom_Position::kYFieldNumber;
const int Odom_Position::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odom_Position::Odom_Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_odom_2eproto::scc_info_Odom_Position.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:odom.proto.Odom.Position)
}
Odom_Position::Odom_Position(const Odom_Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:odom.proto.Odom.Position)
}

void Odom_Position::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Odom_Position::~Odom_Position() {
  // @@protoc_insertion_point(destructor:odom.proto.Odom.Position)
  SharedDtor();
}

void Odom_Position::SharedDtor() {
}

void Odom_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Odom_Position::descriptor() {
  ::protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Odom_Position& Odom_Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_odom_2eproto::scc_info_Odom_Position.base);
  return *internal_default_instance();
}


void Odom_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:odom.proto.Odom.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Odom_Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:odom.proto.Odom.Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:odom.proto.Odom.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:odom.proto.Odom.Position)
  return false;
#undef DO_
}

void Odom_Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:odom.proto.Odom.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:odom.proto.Odom.Position)
}

::google::protobuf::uint8* Odom_Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:odom.proto.Odom.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odom.proto.Odom.Position)
  return target;
}

size_t Odom_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odom.proto.Odom.Position)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odom_Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:odom.proto.Odom.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Odom_Position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odom_Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:odom.proto.Odom.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:odom.proto.Odom.Position)
    MergeFrom(*source);
  }
}

void Odom_Position::MergeFrom(const Odom_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:odom.proto.Odom.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Odom_Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:odom.proto.Odom.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odom_Position::CopyFrom(const Odom_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odom.proto.Odom.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odom_Position::IsInitialized() const {
  return true;
}

void Odom_Position::Swap(Odom_Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odom_Position::InternalSwap(Odom_Position* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Odom_Position::GetMetadata() const {
  protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Odom_PositionStd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odom_PositionStd::kXStdFieldNumber;
const int Odom_PositionStd::kYStdFieldNumber;
const int Odom_PositionStd::kZStdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odom_PositionStd::Odom_PositionStd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_odom_2eproto::scc_info_Odom_PositionStd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:odom.proto.Odom.PositionStd)
}
Odom_PositionStd::Odom_PositionStd(const Odom_PositionStd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_std_, &from.x_std_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_std_) -
    reinterpret_cast<char*>(&x_std_)) + sizeof(z_std_));
  // @@protoc_insertion_point(copy_constructor:odom.proto.Odom.PositionStd)
}

void Odom_PositionStd::SharedCtor() {
  ::memset(&x_std_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_std_) -
      reinterpret_cast<char*>(&x_std_)) + sizeof(z_std_));
}

Odom_PositionStd::~Odom_PositionStd() {
  // @@protoc_insertion_point(destructor:odom.proto.Odom.PositionStd)
  SharedDtor();
}

void Odom_PositionStd::SharedDtor() {
}

void Odom_PositionStd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Odom_PositionStd::descriptor() {
  ::protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Odom_PositionStd& Odom_PositionStd::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_odom_2eproto::scc_info_Odom_PositionStd.base);
  return *internal_default_instance();
}


void Odom_PositionStd::Clear() {
// @@protoc_insertion_point(message_clear_start:odom.proto.Odom.PositionStd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_std_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_std_) -
      reinterpret_cast<char*>(&x_std_)) + sizeof(z_std_));
  _internal_metadata_.Clear();
}

bool Odom_PositionStd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:odom.proto.Odom.PositionStd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x_std = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y_std = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z_std = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:odom.proto.Odom.PositionStd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:odom.proto.Odom.PositionStd)
  return false;
#undef DO_
}

void Odom_PositionStd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:odom.proto.Odom.PositionStd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x_std = 1;
  if (this->x_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x_std(), output);
  }

  // double y_std = 2;
  if (this->y_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y_std(), output);
  }

  // double z_std = 3;
  if (this->z_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z_std(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:odom.proto.Odom.PositionStd)
}

::google::protobuf::uint8* Odom_PositionStd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:odom.proto.Odom.PositionStd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x_std = 1;
  if (this->x_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x_std(), target);
  }

  // double y_std = 2;
  if (this->y_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y_std(), target);
  }

  // double z_std = 3;
  if (this->z_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z_std(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odom.proto.Odom.PositionStd)
  return target;
}

size_t Odom_PositionStd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odom.proto.Odom.PositionStd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x_std = 1;
  if (this->x_std() != 0) {
    total_size += 1 + 8;
  }

  // double y_std = 2;
  if (this->y_std() != 0) {
    total_size += 1 + 8;
  }

  // double z_std = 3;
  if (this->z_std() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odom_PositionStd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:odom.proto.Odom.PositionStd)
  GOOGLE_DCHECK_NE(&from, this);
  const Odom_PositionStd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odom_PositionStd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:odom.proto.Odom.PositionStd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:odom.proto.Odom.PositionStd)
    MergeFrom(*source);
  }
}

void Odom_PositionStd::MergeFrom(const Odom_PositionStd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:odom.proto.Odom.PositionStd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x_std() != 0) {
    set_x_std(from.x_std());
  }
  if (from.y_std() != 0) {
    set_y_std(from.y_std());
  }
  if (from.z_std() != 0) {
    set_z_std(from.z_std());
  }
}

void Odom_PositionStd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:odom.proto.Odom.PositionStd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odom_PositionStd::CopyFrom(const Odom_PositionStd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odom.proto.Odom.PositionStd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odom_PositionStd::IsInitialized() const {
  return true;
}

void Odom_PositionStd::Swap(Odom_PositionStd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odom_PositionStd::InternalSwap(Odom_PositionStd* other) {
  using std::swap;
  swap(x_std_, other->x_std_);
  swap(y_std_, other->y_std_);
  swap(z_std_, other->z_std_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Odom_PositionStd::GetMetadata() const {
  protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Odom_PoseQuaternion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odom_PoseQuaternion::kWFieldNumber;
const int Odom_PoseQuaternion::kXFieldNumber;
const int Odom_PoseQuaternion::kYFieldNumber;
const int Odom_PoseQuaternion::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odom_PoseQuaternion::Odom_PoseQuaternion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_odom_2eproto::scc_info_Odom_PoseQuaternion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:odom.proto.Odom.PoseQuaternion)
}
Odom_PoseQuaternion::Odom_PoseQuaternion(const Odom_PoseQuaternion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:odom.proto.Odom.PoseQuaternion)
}

void Odom_PoseQuaternion::SharedCtor() {
  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
}

Odom_PoseQuaternion::~Odom_PoseQuaternion() {
  // @@protoc_insertion_point(destructor:odom.proto.Odom.PoseQuaternion)
  SharedDtor();
}

void Odom_PoseQuaternion::SharedDtor() {
}

void Odom_PoseQuaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Odom_PoseQuaternion::descriptor() {
  ::protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Odom_PoseQuaternion& Odom_PoseQuaternion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_odom_2eproto::scc_info_Odom_PoseQuaternion.base);
  return *internal_default_instance();
}


void Odom_PoseQuaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:odom.proto.Odom.PoseQuaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Odom_PoseQuaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:odom.proto.Odom.PoseQuaternion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double w = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:odom.proto.Odom.PoseQuaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:odom.proto.Odom.PoseQuaternion)
  return false;
#undef DO_
}

void Odom_PoseQuaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:odom.proto.Odom.PoseQuaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double w = 1;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->w(), output);
  }

  // double x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // double y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // double z = 4;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:odom.proto.Odom.PoseQuaternion)
}

::google::protobuf::uint8* Odom_PoseQuaternion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:odom.proto.Odom.PoseQuaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double w = 1;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->w(), target);
  }

  // double x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // double y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // double z = 4;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odom.proto.Odom.PoseQuaternion)
  return target;
}

size_t Odom_PoseQuaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odom.proto.Odom.PoseQuaternion)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double w = 1;
  if (this->w() != 0) {
    total_size += 1 + 8;
  }

  // double x = 2;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 3;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 4;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odom_PoseQuaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:odom.proto.Odom.PoseQuaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Odom_PoseQuaternion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odom_PoseQuaternion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:odom.proto.Odom.PoseQuaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:odom.proto.Odom.PoseQuaternion)
    MergeFrom(*source);
  }
}

void Odom_PoseQuaternion::MergeFrom(const Odom_PoseQuaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:odom.proto.Odom.PoseQuaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.w() != 0) {
    set_w(from.w());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Odom_PoseQuaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:odom.proto.Odom.PoseQuaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odom_PoseQuaternion::CopyFrom(const Odom_PoseQuaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odom.proto.Odom.PoseQuaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odom_PoseQuaternion::IsInitialized() const {
  return true;
}

void Odom_PoseQuaternion::Swap(Odom_PoseQuaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odom_PoseQuaternion::InternalSwap(Odom_PoseQuaternion* other) {
  using std::swap;
  swap(w_, other->w_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Odom_PoseQuaternion::GetMetadata() const {
  protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Odom_PoseStd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odom_PoseStd::kRollStdFieldNumber;
const int Odom_PoseStd::kPitchStdFieldNumber;
const int Odom_PoseStd::kYawStdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odom_PoseStd::Odom_PoseStd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_odom_2eproto::scc_info_Odom_PoseStd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:odom.proto.Odom.PoseStd)
}
Odom_PoseStd::Odom_PoseStd(const Odom_PoseStd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roll_std_, &from.roll_std_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_std_) -
    reinterpret_cast<char*>(&roll_std_)) + sizeof(yaw_std_));
  // @@protoc_insertion_point(copy_constructor:odom.proto.Odom.PoseStd)
}

void Odom_PoseStd::SharedCtor() {
  ::memset(&roll_std_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_std_) -
      reinterpret_cast<char*>(&roll_std_)) + sizeof(yaw_std_));
}

Odom_PoseStd::~Odom_PoseStd() {
  // @@protoc_insertion_point(destructor:odom.proto.Odom.PoseStd)
  SharedDtor();
}

void Odom_PoseStd::SharedDtor() {
}

void Odom_PoseStd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Odom_PoseStd::descriptor() {
  ::protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Odom_PoseStd& Odom_PoseStd::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_odom_2eproto::scc_info_Odom_PoseStd.base);
  return *internal_default_instance();
}


void Odom_PoseStd::Clear() {
// @@protoc_insertion_point(message_clear_start:odom.proto.Odom.PoseStd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_std_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_std_) -
      reinterpret_cast<char*>(&roll_std_)) + sizeof(yaw_std_));
  _internal_metadata_.Clear();
}

bool Odom_PoseStd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:odom.proto.Odom.PoseStd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double roll_std = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pitch_std = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw_std = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:odom.proto.Odom.PoseStd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:odom.proto.Odom.PoseStd)
  return false;
#undef DO_
}

void Odom_PoseStd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:odom.proto.Odom.PoseStd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double roll_std = 1;
  if (this->roll_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->roll_std(), output);
  }

  // double pitch_std = 2;
  if (this->pitch_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pitch_std(), output);
  }

  // double yaw_std = 3;
  if (this->yaw_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->yaw_std(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:odom.proto.Odom.PoseStd)
}

::google::protobuf::uint8* Odom_PoseStd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:odom.proto.Odom.PoseStd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double roll_std = 1;
  if (this->roll_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->roll_std(), target);
  }

  // double pitch_std = 2;
  if (this->pitch_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pitch_std(), target);
  }

  // double yaw_std = 3;
  if (this->yaw_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->yaw_std(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odom.proto.Odom.PoseStd)
  return target;
}

size_t Odom_PoseStd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odom.proto.Odom.PoseStd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double roll_std = 1;
  if (this->roll_std() != 0) {
    total_size += 1 + 8;
  }

  // double pitch_std = 2;
  if (this->pitch_std() != 0) {
    total_size += 1 + 8;
  }

  // double yaw_std = 3;
  if (this->yaw_std() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odom_PoseStd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:odom.proto.Odom.PoseStd)
  GOOGLE_DCHECK_NE(&from, this);
  const Odom_PoseStd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odom_PoseStd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:odom.proto.Odom.PoseStd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:odom.proto.Odom.PoseStd)
    MergeFrom(*source);
  }
}

void Odom_PoseStd::MergeFrom(const Odom_PoseStd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:odom.proto.Odom.PoseStd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roll_std() != 0) {
    set_roll_std(from.roll_std());
  }
  if (from.pitch_std() != 0) {
    set_pitch_std(from.pitch_std());
  }
  if (from.yaw_std() != 0) {
    set_yaw_std(from.yaw_std());
  }
}

void Odom_PoseStd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:odom.proto.Odom.PoseStd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odom_PoseStd::CopyFrom(const Odom_PoseStd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odom.proto.Odom.PoseStd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odom_PoseStd::IsInitialized() const {
  return true;
}

void Odom_PoseStd::Swap(Odom_PoseStd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odom_PoseStd::InternalSwap(Odom_PoseStd* other) {
  using std::swap;
  swap(roll_std_, other->roll_std_);
  swap(pitch_std_, other->pitch_std_);
  swap(yaw_std_, other->yaw_std_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Odom_PoseStd::GetMetadata() const {
  protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Odom_AngleSpeed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odom_AngleSpeed::kRollFieldNumber;
const int Odom_AngleSpeed::kPitchFieldNumber;
const int Odom_AngleSpeed::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odom_AngleSpeed::Odom_AngleSpeed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_odom_2eproto::scc_info_Odom_AngleSpeed.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:odom.proto.Odom.AngleSpeed)
}
Odom_AngleSpeed::Odom_AngleSpeed(const Odom_AngleSpeed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roll_, &from.roll_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:odom.proto.Odom.AngleSpeed)
}

void Odom_AngleSpeed::SharedCtor() {
  ::memset(&roll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
}

Odom_AngleSpeed::~Odom_AngleSpeed() {
  // @@protoc_insertion_point(destructor:odom.proto.Odom.AngleSpeed)
  SharedDtor();
}

void Odom_AngleSpeed::SharedDtor() {
}

void Odom_AngleSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Odom_AngleSpeed::descriptor() {
  ::protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Odom_AngleSpeed& Odom_AngleSpeed::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_odom_2eproto::scc_info_Odom_AngleSpeed.base);
  return *internal_default_instance();
}


void Odom_AngleSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:odom.proto.Odom.AngleSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  _internal_metadata_.Clear();
}

bool Odom_AngleSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:odom.proto.Odom.AngleSpeed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double roll = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pitch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:odom.proto.Odom.AngleSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:odom.proto.Odom.AngleSpeed)
  return false;
#undef DO_
}

void Odom_AngleSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:odom.proto.Odom.AngleSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double roll = 1;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->roll(), output);
  }

  // double pitch = 2;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pitch(), output);
  }

  // double yaw = 3;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->yaw(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:odom.proto.Odom.AngleSpeed)
}

::google::protobuf::uint8* Odom_AngleSpeed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:odom.proto.Odom.AngleSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double roll = 1;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->roll(), target);
  }

  // double pitch = 2;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pitch(), target);
  }

  // double yaw = 3;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->yaw(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odom.proto.Odom.AngleSpeed)
  return target;
}

size_t Odom_AngleSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odom.proto.Odom.AngleSpeed)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double roll = 1;
  if (this->roll() != 0) {
    total_size += 1 + 8;
  }

  // double pitch = 2;
  if (this->pitch() != 0) {
    total_size += 1 + 8;
  }

  // double yaw = 3;
  if (this->yaw() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odom_AngleSpeed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:odom.proto.Odom.AngleSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  const Odom_AngleSpeed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odom_AngleSpeed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:odom.proto.Odom.AngleSpeed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:odom.proto.Odom.AngleSpeed)
    MergeFrom(*source);
  }
}

void Odom_AngleSpeed::MergeFrom(const Odom_AngleSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:odom.proto.Odom.AngleSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
}

void Odom_AngleSpeed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:odom.proto.Odom.AngleSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odom_AngleSpeed::CopyFrom(const Odom_AngleSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odom.proto.Odom.AngleSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odom_AngleSpeed::IsInitialized() const {
  return true;
}

void Odom_AngleSpeed::Swap(Odom_AngleSpeed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odom_AngleSpeed::InternalSwap(Odom_AngleSpeed* other) {
  using std::swap;
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Odom_AngleSpeed::GetMetadata() const {
  protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Odom_AngleSpeedStd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odom_AngleSpeedStd::kRollStdFieldNumber;
const int Odom_AngleSpeedStd::kPitchStdFieldNumber;
const int Odom_AngleSpeedStd::kYawStdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odom_AngleSpeedStd::Odom_AngleSpeedStd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_odom_2eproto::scc_info_Odom_AngleSpeedStd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:odom.proto.Odom.AngleSpeedStd)
}
Odom_AngleSpeedStd::Odom_AngleSpeedStd(const Odom_AngleSpeedStd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roll_std_, &from.roll_std_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_std_) -
    reinterpret_cast<char*>(&roll_std_)) + sizeof(yaw_std_));
  // @@protoc_insertion_point(copy_constructor:odom.proto.Odom.AngleSpeedStd)
}

void Odom_AngleSpeedStd::SharedCtor() {
  ::memset(&roll_std_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_std_) -
      reinterpret_cast<char*>(&roll_std_)) + sizeof(yaw_std_));
}

Odom_AngleSpeedStd::~Odom_AngleSpeedStd() {
  // @@protoc_insertion_point(destructor:odom.proto.Odom.AngleSpeedStd)
  SharedDtor();
}

void Odom_AngleSpeedStd::SharedDtor() {
}

void Odom_AngleSpeedStd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Odom_AngleSpeedStd::descriptor() {
  ::protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Odom_AngleSpeedStd& Odom_AngleSpeedStd::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_odom_2eproto::scc_info_Odom_AngleSpeedStd.base);
  return *internal_default_instance();
}


void Odom_AngleSpeedStd::Clear() {
// @@protoc_insertion_point(message_clear_start:odom.proto.Odom.AngleSpeedStd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_std_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_std_) -
      reinterpret_cast<char*>(&roll_std_)) + sizeof(yaw_std_));
  _internal_metadata_.Clear();
}

bool Odom_AngleSpeedStd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:odom.proto.Odom.AngleSpeedStd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double roll_std = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pitch_std = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw_std = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:odom.proto.Odom.AngleSpeedStd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:odom.proto.Odom.AngleSpeedStd)
  return false;
#undef DO_
}

void Odom_AngleSpeedStd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:odom.proto.Odom.AngleSpeedStd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double roll_std = 1;
  if (this->roll_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->roll_std(), output);
  }

  // double pitch_std = 2;
  if (this->pitch_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pitch_std(), output);
  }

  // double yaw_std = 3;
  if (this->yaw_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->yaw_std(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:odom.proto.Odom.AngleSpeedStd)
}

::google::protobuf::uint8* Odom_AngleSpeedStd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:odom.proto.Odom.AngleSpeedStd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double roll_std = 1;
  if (this->roll_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->roll_std(), target);
  }

  // double pitch_std = 2;
  if (this->pitch_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pitch_std(), target);
  }

  // double yaw_std = 3;
  if (this->yaw_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->yaw_std(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odom.proto.Odom.AngleSpeedStd)
  return target;
}

size_t Odom_AngleSpeedStd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odom.proto.Odom.AngleSpeedStd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double roll_std = 1;
  if (this->roll_std() != 0) {
    total_size += 1 + 8;
  }

  // double pitch_std = 2;
  if (this->pitch_std() != 0) {
    total_size += 1 + 8;
  }

  // double yaw_std = 3;
  if (this->yaw_std() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odom_AngleSpeedStd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:odom.proto.Odom.AngleSpeedStd)
  GOOGLE_DCHECK_NE(&from, this);
  const Odom_AngleSpeedStd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odom_AngleSpeedStd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:odom.proto.Odom.AngleSpeedStd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:odom.proto.Odom.AngleSpeedStd)
    MergeFrom(*source);
  }
}

void Odom_AngleSpeedStd::MergeFrom(const Odom_AngleSpeedStd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:odom.proto.Odom.AngleSpeedStd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roll_std() != 0) {
    set_roll_std(from.roll_std());
  }
  if (from.pitch_std() != 0) {
    set_pitch_std(from.pitch_std());
  }
  if (from.yaw_std() != 0) {
    set_yaw_std(from.yaw_std());
  }
}

void Odom_AngleSpeedStd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:odom.proto.Odom.AngleSpeedStd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odom_AngleSpeedStd::CopyFrom(const Odom_AngleSpeedStd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odom.proto.Odom.AngleSpeedStd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odom_AngleSpeedStd::IsInitialized() const {
  return true;
}

void Odom_AngleSpeedStd::Swap(Odom_AngleSpeedStd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odom_AngleSpeedStd::InternalSwap(Odom_AngleSpeedStd* other) {
  using std::swap;
  swap(roll_std_, other->roll_std_);
  swap(pitch_std_, other->pitch_std_);
  swap(yaw_std_, other->yaw_std_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Odom_AngleSpeedStd::GetMetadata() const {
  protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Odom_LinearSpeed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odom_LinearSpeed::kXFieldNumber;
const int Odom_LinearSpeed::kYFieldNumber;
const int Odom_LinearSpeed::kZFieldNumber;
const int Odom_LinearSpeed::kVehicleSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odom_LinearSpeed::Odom_LinearSpeed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_odom_2eproto::scc_info_Odom_LinearSpeed.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:odom.proto.Odom.LinearSpeed)
}
Odom_LinearSpeed::Odom_LinearSpeed(const Odom_LinearSpeed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&vehicle_speed_) -
    reinterpret_cast<char*>(&x_)) + sizeof(vehicle_speed_));
  // @@protoc_insertion_point(copy_constructor:odom.proto.Odom.LinearSpeed)
}

void Odom_LinearSpeed::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_speed_) -
      reinterpret_cast<char*>(&x_)) + sizeof(vehicle_speed_));
}

Odom_LinearSpeed::~Odom_LinearSpeed() {
  // @@protoc_insertion_point(destructor:odom.proto.Odom.LinearSpeed)
  SharedDtor();
}

void Odom_LinearSpeed::SharedDtor() {
}

void Odom_LinearSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Odom_LinearSpeed::descriptor() {
  ::protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Odom_LinearSpeed& Odom_LinearSpeed::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_odom_2eproto::scc_info_Odom_LinearSpeed.base);
  return *internal_default_instance();
}


void Odom_LinearSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:odom.proto.Odom.LinearSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_speed_) -
      reinterpret_cast<char*>(&x_)) + sizeof(vehicle_speed_));
  _internal_metadata_.Clear();
}

bool Odom_LinearSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:odom.proto.Odom.LinearSpeed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vehicle_speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:odom.proto.Odom.LinearSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:odom.proto.Odom.LinearSpeed)
  return false;
#undef DO_
}

void Odom_LinearSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:odom.proto.Odom.LinearSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // double vehicle_speed = 4;
  if (this->vehicle_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->vehicle_speed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:odom.proto.Odom.LinearSpeed)
}

::google::protobuf::uint8* Odom_LinearSpeed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:odom.proto.Odom.LinearSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // double vehicle_speed = 4;
  if (this->vehicle_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->vehicle_speed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odom.proto.Odom.LinearSpeed)
  return target;
}

size_t Odom_LinearSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odom.proto.Odom.LinearSpeed)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // double vehicle_speed = 4;
  if (this->vehicle_speed() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odom_LinearSpeed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:odom.proto.Odom.LinearSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  const Odom_LinearSpeed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odom_LinearSpeed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:odom.proto.Odom.LinearSpeed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:odom.proto.Odom.LinearSpeed)
    MergeFrom(*source);
  }
}

void Odom_LinearSpeed::MergeFrom(const Odom_LinearSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:odom.proto.Odom.LinearSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.vehicle_speed() != 0) {
    set_vehicle_speed(from.vehicle_speed());
  }
}

void Odom_LinearSpeed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:odom.proto.Odom.LinearSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odom_LinearSpeed::CopyFrom(const Odom_LinearSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odom.proto.Odom.LinearSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odom_LinearSpeed::IsInitialized() const {
  return true;
}

void Odom_LinearSpeed::Swap(Odom_LinearSpeed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odom_LinearSpeed::InternalSwap(Odom_LinearSpeed* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(vehicle_speed_, other->vehicle_speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Odom_LinearSpeed::GetMetadata() const {
  protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Odom_LinearSpeedStd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odom_LinearSpeedStd::kXStdFieldNumber;
const int Odom_LinearSpeedStd::kYStdFieldNumber;
const int Odom_LinearSpeedStd::kZStdFieldNumber;
const int Odom_LinearSpeedStd::kVehicleSpeedStdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odom_LinearSpeedStd::Odom_LinearSpeedStd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_odom_2eproto::scc_info_Odom_LinearSpeedStd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:odom.proto.Odom.LinearSpeedStd)
}
Odom_LinearSpeedStd::Odom_LinearSpeedStd(const Odom_LinearSpeedStd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_std_, &from.x_std_,
    static_cast<size_t>(reinterpret_cast<char*>(&vehicle_speed_std_) -
    reinterpret_cast<char*>(&x_std_)) + sizeof(vehicle_speed_std_));
  // @@protoc_insertion_point(copy_constructor:odom.proto.Odom.LinearSpeedStd)
}

void Odom_LinearSpeedStd::SharedCtor() {
  ::memset(&x_std_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_speed_std_) -
      reinterpret_cast<char*>(&x_std_)) + sizeof(vehicle_speed_std_));
}

Odom_LinearSpeedStd::~Odom_LinearSpeedStd() {
  // @@protoc_insertion_point(destructor:odom.proto.Odom.LinearSpeedStd)
  SharedDtor();
}

void Odom_LinearSpeedStd::SharedDtor() {
}

void Odom_LinearSpeedStd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Odom_LinearSpeedStd::descriptor() {
  ::protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Odom_LinearSpeedStd& Odom_LinearSpeedStd::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_odom_2eproto::scc_info_Odom_LinearSpeedStd.base);
  return *internal_default_instance();
}


void Odom_LinearSpeedStd::Clear() {
// @@protoc_insertion_point(message_clear_start:odom.proto.Odom.LinearSpeedStd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_std_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_speed_std_) -
      reinterpret_cast<char*>(&x_std_)) + sizeof(vehicle_speed_std_));
  _internal_metadata_.Clear();
}

bool Odom_LinearSpeedStd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:odom.proto.Odom.LinearSpeedStd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x_std = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y_std = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z_std = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vehicle_speed_std = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_speed_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:odom.proto.Odom.LinearSpeedStd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:odom.proto.Odom.LinearSpeedStd)
  return false;
#undef DO_
}

void Odom_LinearSpeedStd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:odom.proto.Odom.LinearSpeedStd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x_std = 1;
  if (this->x_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x_std(), output);
  }

  // double y_std = 2;
  if (this->y_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y_std(), output);
  }

  // double z_std = 3;
  if (this->z_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z_std(), output);
  }

  // double vehicle_speed_std = 4;
  if (this->vehicle_speed_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->vehicle_speed_std(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:odom.proto.Odom.LinearSpeedStd)
}

::google::protobuf::uint8* Odom_LinearSpeedStd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:odom.proto.Odom.LinearSpeedStd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x_std = 1;
  if (this->x_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x_std(), target);
  }

  // double y_std = 2;
  if (this->y_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y_std(), target);
  }

  // double z_std = 3;
  if (this->z_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z_std(), target);
  }

  // double vehicle_speed_std = 4;
  if (this->vehicle_speed_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->vehicle_speed_std(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odom.proto.Odom.LinearSpeedStd)
  return target;
}

size_t Odom_LinearSpeedStd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odom.proto.Odom.LinearSpeedStd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x_std = 1;
  if (this->x_std() != 0) {
    total_size += 1 + 8;
  }

  // double y_std = 2;
  if (this->y_std() != 0) {
    total_size += 1 + 8;
  }

  // double z_std = 3;
  if (this->z_std() != 0) {
    total_size += 1 + 8;
  }

  // double vehicle_speed_std = 4;
  if (this->vehicle_speed_std() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odom_LinearSpeedStd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:odom.proto.Odom.LinearSpeedStd)
  GOOGLE_DCHECK_NE(&from, this);
  const Odom_LinearSpeedStd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odom_LinearSpeedStd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:odom.proto.Odom.LinearSpeedStd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:odom.proto.Odom.LinearSpeedStd)
    MergeFrom(*source);
  }
}

void Odom_LinearSpeedStd::MergeFrom(const Odom_LinearSpeedStd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:odom.proto.Odom.LinearSpeedStd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x_std() != 0) {
    set_x_std(from.x_std());
  }
  if (from.y_std() != 0) {
    set_y_std(from.y_std());
  }
  if (from.z_std() != 0) {
    set_z_std(from.z_std());
  }
  if (from.vehicle_speed_std() != 0) {
    set_vehicle_speed_std(from.vehicle_speed_std());
  }
}

void Odom_LinearSpeedStd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:odom.proto.Odom.LinearSpeedStd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odom_LinearSpeedStd::CopyFrom(const Odom_LinearSpeedStd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odom.proto.Odom.LinearSpeedStd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odom_LinearSpeedStd::IsInitialized() const {
  return true;
}

void Odom_LinearSpeedStd::Swap(Odom_LinearSpeedStd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odom_LinearSpeedStd::InternalSwap(Odom_LinearSpeedStd* other) {
  using std::swap;
  swap(x_std_, other->x_std_);
  swap(y_std_, other->y_std_);
  swap(z_std_, other->z_std_);
  swap(vehicle_speed_std_, other->vehicle_speed_std_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Odom_LinearSpeedStd::GetMetadata() const {
  protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Odom_TransformMatrix::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odom_TransformMatrix::kRowsFieldNumber;
const int Odom_TransformMatrix::kColumnsFieldNumber;
const int Odom_TransformMatrix::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odom_TransformMatrix::Odom_TransformMatrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_odom_2eproto::scc_info_Odom_TransformMatrix.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:odom.proto.Odom.TransformMatrix)
}
Odom_TransformMatrix::Odom_TransformMatrix(const Odom_TransformMatrix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rows_, &from.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&columns_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(columns_));
  // @@protoc_insertion_point(copy_constructor:odom.proto.Odom.TransformMatrix)
}

void Odom_TransformMatrix::SharedCtor() {
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&columns_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(columns_));
}

Odom_TransformMatrix::~Odom_TransformMatrix() {
  // @@protoc_insertion_point(destructor:odom.proto.Odom.TransformMatrix)
  SharedDtor();
}

void Odom_TransformMatrix::SharedDtor() {
}

void Odom_TransformMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Odom_TransformMatrix::descriptor() {
  ::protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Odom_TransformMatrix& Odom_TransformMatrix::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_odom_2eproto::scc_info_Odom_TransformMatrix.base);
  return *internal_default_instance();
}


void Odom_TransformMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:odom.proto.Odom.TransformMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&columns_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(columns_));
  _internal_metadata_.Clear();
}

bool Odom_TransformMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:odom.proto.Odom.TransformMatrix)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rows = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 columns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &columns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:odom.proto.Odom.TransformMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:odom.proto.Odom.TransformMatrix)
  return false;
#undef DO_
}

void Odom_TransformMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:odom.proto.Odom.TransformMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rows = 1;
  if (this->rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rows(), output);
  }

  // int32 columns = 2;
  if (this->columns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->columns(), output);
  }

  // repeated double data = 3;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->data().data(), this->data_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:odom.proto.Odom.TransformMatrix)
}

::google::protobuf::uint8* Odom_TransformMatrix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:odom.proto.Odom.TransformMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rows = 1;
  if (this->rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rows(), target);
  }

  // int32 columns = 2;
  if (this->columns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->columns(), target);
  }

  // repeated double data = 3;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->data_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odom.proto.Odom.TransformMatrix)
  return target;
}

size_t Odom_TransformMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odom.proto.Odom.TransformMatrix)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 rows = 1;
  if (this->rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rows());
  }

  // int32 columns = 2;
  if (this->columns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->columns());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odom_TransformMatrix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:odom.proto.Odom.TransformMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const Odom_TransformMatrix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odom_TransformMatrix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:odom.proto.Odom.TransformMatrix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:odom.proto.Odom.TransformMatrix)
    MergeFrom(*source);
  }
}

void Odom_TransformMatrix::MergeFrom(const Odom_TransformMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:odom.proto.Odom.TransformMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.rows() != 0) {
    set_rows(from.rows());
  }
  if (from.columns() != 0) {
    set_columns(from.columns());
  }
}

void Odom_TransformMatrix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:odom.proto.Odom.TransformMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odom_TransformMatrix::CopyFrom(const Odom_TransformMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odom.proto.Odom.TransformMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odom_TransformMatrix::IsInitialized() const {
  return true;
}

void Odom_TransformMatrix::Swap(Odom_TransformMatrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odom_TransformMatrix::InternalSwap(Odom_TransformMatrix* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(rows_, other->rows_);
  swap(columns_, other->columns_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Odom_TransformMatrix::GetMetadata() const {
  protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Odom::InitAsDefaultInstance() {
  ::odom::proto::_Odom_default_instance_._instance.get_mutable()->position_ = const_cast< ::odom::proto::Odom_Position*>(
      ::odom::proto::Odom_Position::internal_default_instance());
  ::odom::proto::_Odom_default_instance_._instance.get_mutable()->position_std_ = const_cast< ::odom::proto::Odom_PositionStd*>(
      ::odom::proto::Odom_PositionStd::internal_default_instance());
  ::odom::proto::_Odom_default_instance_._instance.get_mutable()->pose_quaternion_ = const_cast< ::odom::proto::Odom_PoseQuaternion*>(
      ::odom::proto::Odom_PoseQuaternion::internal_default_instance());
  ::odom::proto::_Odom_default_instance_._instance.get_mutable()->pose_std_ = const_cast< ::odom::proto::Odom_PoseStd*>(
      ::odom::proto::Odom_PoseStd::internal_default_instance());
  ::odom::proto::_Odom_default_instance_._instance.get_mutable()->angle_speed_ = const_cast< ::odom::proto::Odom_AngleSpeed*>(
      ::odom::proto::Odom_AngleSpeed::internal_default_instance());
  ::odom::proto::_Odom_default_instance_._instance.get_mutable()->angle_speed_std_ = const_cast< ::odom::proto::Odom_AngleSpeedStd*>(
      ::odom::proto::Odom_AngleSpeedStd::internal_default_instance());
  ::odom::proto::_Odom_default_instance_._instance.get_mutable()->linear_speed_ = const_cast< ::odom::proto::Odom_LinearSpeed*>(
      ::odom::proto::Odom_LinearSpeed::internal_default_instance());
  ::odom::proto::_Odom_default_instance_._instance.get_mutable()->linear_speed_std_ = const_cast< ::odom::proto::Odom_LinearSpeedStd*>(
      ::odom::proto::Odom_LinearSpeedStd::internal_default_instance());
  ::odom::proto::_Odom_default_instance_._instance.get_mutable()->transform_matrix_ = const_cast< ::odom::proto::Odom_TransformMatrix*>(
      ::odom::proto::Odom_TransformMatrix::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odom::kPositionFieldNumber;
const int Odom::kPositionStdFieldNumber;
const int Odom::kPoseQuaternionFieldNumber;
const int Odom::kPoseStdFieldNumber;
const int Odom::kAngleSpeedFieldNumber;
const int Odom::kAngleSpeedStdFieldNumber;
const int Odom::kLinearSpeedFieldNumber;
const int Odom::kLinearSpeedStdFieldNumber;
const int Odom::kTransformMatrixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odom::Odom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_odom_2eproto::scc_info_Odom.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:odom.proto.Odom)
}
Odom::Odom(const Odom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::odom::proto::Odom_Position(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_position_std()) {
    position_std_ = new ::odom::proto::Odom_PositionStd(*from.position_std_);
  } else {
    position_std_ = NULL;
  }
  if (from.has_pose_quaternion()) {
    pose_quaternion_ = new ::odom::proto::Odom_PoseQuaternion(*from.pose_quaternion_);
  } else {
    pose_quaternion_ = NULL;
  }
  if (from.has_pose_std()) {
    pose_std_ = new ::odom::proto::Odom_PoseStd(*from.pose_std_);
  } else {
    pose_std_ = NULL;
  }
  if (from.has_angle_speed()) {
    angle_speed_ = new ::odom::proto::Odom_AngleSpeed(*from.angle_speed_);
  } else {
    angle_speed_ = NULL;
  }
  if (from.has_angle_speed_std()) {
    angle_speed_std_ = new ::odom::proto::Odom_AngleSpeedStd(*from.angle_speed_std_);
  } else {
    angle_speed_std_ = NULL;
  }
  if (from.has_linear_speed()) {
    linear_speed_ = new ::odom::proto::Odom_LinearSpeed(*from.linear_speed_);
  } else {
    linear_speed_ = NULL;
  }
  if (from.has_linear_speed_std()) {
    linear_speed_std_ = new ::odom::proto::Odom_LinearSpeedStd(*from.linear_speed_std_);
  } else {
    linear_speed_std_ = NULL;
  }
  if (from.has_transform_matrix()) {
    transform_matrix_ = new ::odom::proto::Odom_TransformMatrix(*from.transform_matrix_);
  } else {
    transform_matrix_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:odom.proto.Odom)
}

void Odom::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transform_matrix_) -
      reinterpret_cast<char*>(&position_)) + sizeof(transform_matrix_));
}

Odom::~Odom() {
  // @@protoc_insertion_point(destructor:odom.proto.Odom)
  SharedDtor();
}

void Odom::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete position_std_;
  if (this != internal_default_instance()) delete pose_quaternion_;
  if (this != internal_default_instance()) delete pose_std_;
  if (this != internal_default_instance()) delete angle_speed_;
  if (this != internal_default_instance()) delete angle_speed_std_;
  if (this != internal_default_instance()) delete linear_speed_;
  if (this != internal_default_instance()) delete linear_speed_std_;
  if (this != internal_default_instance()) delete transform_matrix_;
}

void Odom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Odom::descriptor() {
  ::protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Odom& Odom::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_odom_2eproto::scc_info_Odom.base);
  return *internal_default_instance();
}


void Odom::Clear() {
// @@protoc_insertion_point(message_clear_start:odom.proto.Odom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_std_ != NULL) {
    delete position_std_;
  }
  position_std_ = NULL;
  if (GetArenaNoVirtual() == NULL && pose_quaternion_ != NULL) {
    delete pose_quaternion_;
  }
  pose_quaternion_ = NULL;
  if (GetArenaNoVirtual() == NULL && pose_std_ != NULL) {
    delete pose_std_;
  }
  pose_std_ = NULL;
  if (GetArenaNoVirtual() == NULL && angle_speed_ != NULL) {
    delete angle_speed_;
  }
  angle_speed_ = NULL;
  if (GetArenaNoVirtual() == NULL && angle_speed_std_ != NULL) {
    delete angle_speed_std_;
  }
  angle_speed_std_ = NULL;
  if (GetArenaNoVirtual() == NULL && linear_speed_ != NULL) {
    delete linear_speed_;
  }
  linear_speed_ = NULL;
  if (GetArenaNoVirtual() == NULL && linear_speed_std_ != NULL) {
    delete linear_speed_std_;
  }
  linear_speed_std_ = NULL;
  if (GetArenaNoVirtual() == NULL && transform_matrix_ != NULL) {
    delete transform_matrix_;
  }
  transform_matrix_ = NULL;
  _internal_metadata_.Clear();
}

bool Odom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:odom.proto.Odom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .odom.proto.Odom.Position position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .odom.proto.Odom.PositionStd position_std = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position_std()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .odom.proto.Odom.PoseQuaternion pose_quaternion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose_quaternion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .odom.proto.Odom.PoseStd pose_std = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose_std()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .odom.proto.Odom.AngleSpeed angle_speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angle_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .odom.proto.Odom.AngleSpeedStd angle_speed_std = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angle_speed_std()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .odom.proto.Odom.LinearSpeed linear_speed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .odom.proto.Odom.LinearSpeedStd linear_speed_std = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_speed_std()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .odom.proto.Odom.TransformMatrix transform_matrix = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transform_matrix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:odom.proto.Odom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:odom.proto.Odom)
  return false;
#undef DO_
}

void Odom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:odom.proto.Odom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .odom.proto.Odom.Position position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_position(), output);
  }

  // .odom.proto.Odom.PositionStd position_std = 2;
  if (this->has_position_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_position_std(), output);
  }

  // .odom.proto.Odom.PoseQuaternion pose_quaternion = 3;
  if (this->has_pose_quaternion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_pose_quaternion(), output);
  }

  // .odom.proto.Odom.PoseStd pose_std = 4;
  if (this->has_pose_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_pose_std(), output);
  }

  // .odom.proto.Odom.AngleSpeed angle_speed = 5;
  if (this->has_angle_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_angle_speed(), output);
  }

  // .odom.proto.Odom.AngleSpeedStd angle_speed_std = 6;
  if (this->has_angle_speed_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_angle_speed_std(), output);
  }

  // .odom.proto.Odom.LinearSpeed linear_speed = 7;
  if (this->has_linear_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_linear_speed(), output);
  }

  // .odom.proto.Odom.LinearSpeedStd linear_speed_std = 8;
  if (this->has_linear_speed_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_linear_speed_std(), output);
  }

  // .odom.proto.Odom.TransformMatrix transform_matrix = 9;
  if (this->has_transform_matrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_transform_matrix(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:odom.proto.Odom)
}

::google::protobuf::uint8* Odom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:odom.proto.Odom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .odom.proto.Odom.Position position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_position(), deterministic, target);
  }

  // .odom.proto.Odom.PositionStd position_std = 2;
  if (this->has_position_std()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_position_std(), deterministic, target);
  }

  // .odom.proto.Odom.PoseQuaternion pose_quaternion = 3;
  if (this->has_pose_quaternion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_pose_quaternion(), deterministic, target);
  }

  // .odom.proto.Odom.PoseStd pose_std = 4;
  if (this->has_pose_std()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_pose_std(), deterministic, target);
  }

  // .odom.proto.Odom.AngleSpeed angle_speed = 5;
  if (this->has_angle_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_angle_speed(), deterministic, target);
  }

  // .odom.proto.Odom.AngleSpeedStd angle_speed_std = 6;
  if (this->has_angle_speed_std()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_angle_speed_std(), deterministic, target);
  }

  // .odom.proto.Odom.LinearSpeed linear_speed = 7;
  if (this->has_linear_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_linear_speed(), deterministic, target);
  }

  // .odom.proto.Odom.LinearSpeedStd linear_speed_std = 8;
  if (this->has_linear_speed_std()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_linear_speed_std(), deterministic, target);
  }

  // .odom.proto.Odom.TransformMatrix transform_matrix = 9;
  if (this->has_transform_matrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_transform_matrix(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odom.proto.Odom)
  return target;
}

size_t Odom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odom.proto.Odom)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .odom.proto.Odom.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .odom.proto.Odom.PositionStd position_std = 2;
  if (this->has_position_std()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_std_);
  }

  // .odom.proto.Odom.PoseQuaternion pose_quaternion = 3;
  if (this->has_pose_quaternion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_quaternion_);
  }

  // .odom.proto.Odom.PoseStd pose_std = 4;
  if (this->has_pose_std()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_std_);
  }

  // .odom.proto.Odom.AngleSpeed angle_speed = 5;
  if (this->has_angle_speed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angle_speed_);
  }

  // .odom.proto.Odom.AngleSpeedStd angle_speed_std = 6;
  if (this->has_angle_speed_std()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angle_speed_std_);
  }

  // .odom.proto.Odom.LinearSpeed linear_speed = 7;
  if (this->has_linear_speed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_speed_);
  }

  // .odom.proto.Odom.LinearSpeedStd linear_speed_std = 8;
  if (this->has_linear_speed_std()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_speed_std_);
  }

  // .odom.proto.Odom.TransformMatrix transform_matrix = 9;
  if (this->has_transform_matrix()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *transform_matrix_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:odom.proto.Odom)
  GOOGLE_DCHECK_NE(&from, this);
  const Odom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:odom.proto.Odom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:odom.proto.Odom)
    MergeFrom(*source);
  }
}

void Odom::MergeFrom(const Odom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:odom.proto.Odom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::odom::proto::Odom_Position::MergeFrom(from.position());
  }
  if (from.has_position_std()) {
    mutable_position_std()->::odom::proto::Odom_PositionStd::MergeFrom(from.position_std());
  }
  if (from.has_pose_quaternion()) {
    mutable_pose_quaternion()->::odom::proto::Odom_PoseQuaternion::MergeFrom(from.pose_quaternion());
  }
  if (from.has_pose_std()) {
    mutable_pose_std()->::odom::proto::Odom_PoseStd::MergeFrom(from.pose_std());
  }
  if (from.has_angle_speed()) {
    mutable_angle_speed()->::odom::proto::Odom_AngleSpeed::MergeFrom(from.angle_speed());
  }
  if (from.has_angle_speed_std()) {
    mutable_angle_speed_std()->::odom::proto::Odom_AngleSpeedStd::MergeFrom(from.angle_speed_std());
  }
  if (from.has_linear_speed()) {
    mutable_linear_speed()->::odom::proto::Odom_LinearSpeed::MergeFrom(from.linear_speed());
  }
  if (from.has_linear_speed_std()) {
    mutable_linear_speed_std()->::odom::proto::Odom_LinearSpeedStd::MergeFrom(from.linear_speed_std());
  }
  if (from.has_transform_matrix()) {
    mutable_transform_matrix()->::odom::proto::Odom_TransformMatrix::MergeFrom(from.transform_matrix());
  }
}

void Odom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:odom.proto.Odom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odom::CopyFrom(const Odom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odom.proto.Odom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odom::IsInitialized() const {
  return true;
}

void Odom::Swap(Odom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odom::InternalSwap(Odom* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(position_std_, other->position_std_);
  swap(pose_quaternion_, other->pose_quaternion_);
  swap(pose_std_, other->pose_std_);
  swap(angle_speed_, other->angle_speed_);
  swap(angle_speed_std_, other->angle_speed_std_);
  swap(linear_speed_, other->linear_speed_);
  swap(linear_speed_std_, other->linear_speed_std_);
  swap(transform_matrix_, other->transform_matrix_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Odom::GetMetadata() const {
  protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Frame_Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame_Header::kOdomIdFieldNumber;
const int Frame_Header::kSysTimestampFieldNumber;
const int Frame_Header::kRollingCounterFieldNumber;
const int Frame_Header::kFrameIdFieldNumber;
const int Frame_Header::kInsUtmTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame_Header::Frame_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_odom_2eproto::scc_info_Frame_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:odom.proto.Frame.Header)
}
Frame_Header::Frame_Header(const Frame_Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.frame_id().size() > 0) {
    frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  ::memcpy(&sys_timestamp_, &from.sys_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&odom_id_) -
    reinterpret_cast<char*>(&sys_timestamp_)) + sizeof(odom_id_));
  // @@protoc_insertion_point(copy_constructor:odom.proto.Frame.Header)
}

void Frame_Header::SharedCtor() {
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sys_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odom_id_) -
      reinterpret_cast<char*>(&sys_timestamp_)) + sizeof(odom_id_));
}

Frame_Header::~Frame_Header() {
  // @@protoc_insertion_point(destructor:odom.proto.Frame.Header)
  SharedDtor();
}

void Frame_Header::SharedDtor() {
  frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Frame_Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Frame_Header::descriptor() {
  ::protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Frame_Header& Frame_Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_odom_2eproto::scc_info_Frame_Header.base);
  return *internal_default_instance();
}


void Frame_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:odom.proto.Frame.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sys_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odom_id_) -
      reinterpret_cast<char*>(&sys_timestamp_)) + sizeof(odom_id_));
  _internal_metadata_.Clear();
}

bool Frame_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:odom.proto.Frame.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .odom.proto.OdomId odom_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_odom_id(static_cast< ::odom::proto::OdomId >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sys_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sys_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 rolling_counter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rolling_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string frame_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frame_id().data(), static_cast<int>(this->frame_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "odom.proto.Frame.Header.frame_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ins_utm_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ins_utm_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:odom.proto.Frame.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:odom.proto.Frame.Header)
  return false;
#undef DO_
}

void Frame_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:odom.proto.Frame.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .odom.proto.OdomId odom_id = 1;
  if (this->odom_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->odom_id(), output);
  }

  // uint64 sys_timestamp = 2;
  if (this->sys_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sys_timestamp(), output);
  }

  // uint64 rolling_counter = 3;
  if (this->rolling_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rolling_counter(), output);
  }

  // string frame_id = 4;
  if (this->frame_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "odom.proto.Frame.Header.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->frame_id(), output);
  }

  // uint64 ins_utm_timestamp = 5;
  if (this->ins_utm_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ins_utm_timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:odom.proto.Frame.Header)
}

::google::protobuf::uint8* Frame_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:odom.proto.Frame.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .odom.proto.OdomId odom_id = 1;
  if (this->odom_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->odom_id(), target);
  }

  // uint64 sys_timestamp = 2;
  if (this->sys_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sys_timestamp(), target);
  }

  // uint64 rolling_counter = 3;
  if (this->rolling_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rolling_counter(), target);
  }

  // string frame_id = 4;
  if (this->frame_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "odom.proto.Frame.Header.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->frame_id(), target);
  }

  // uint64 ins_utm_timestamp = 5;
  if (this->ins_utm_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ins_utm_timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odom.proto.Frame.Header)
  return target;
}

size_t Frame_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odom.proto.Frame.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string frame_id = 4;
  if (this->frame_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame_id());
  }

  // uint64 sys_timestamp = 2;
  if (this->sys_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sys_timestamp());
  }

  // uint64 rolling_counter = 3;
  if (this->rolling_counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rolling_counter());
  }

  // uint64 ins_utm_timestamp = 5;
  if (this->ins_utm_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ins_utm_timestamp());
  }

  // .odom.proto.OdomId odom_id = 1;
  if (this->odom_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->odom_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:odom.proto.Frame.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame_Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:odom.proto.Frame.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:odom.proto.Frame.Header)
    MergeFrom(*source);
  }
}

void Frame_Header::MergeFrom(const Frame_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:odom.proto.Frame.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_id().size() > 0) {

    frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  if (from.sys_timestamp() != 0) {
    set_sys_timestamp(from.sys_timestamp());
  }
  if (from.rolling_counter() != 0) {
    set_rolling_counter(from.rolling_counter());
  }
  if (from.ins_utm_timestamp() != 0) {
    set_ins_utm_timestamp(from.ins_utm_timestamp());
  }
  if (from.odom_id() != 0) {
    set_odom_id(from.odom_id());
  }
}

void Frame_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:odom.proto.Frame.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame_Header::CopyFrom(const Frame_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odom.proto.Frame.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame_Header::IsInitialized() const {
  return true;
}

void Frame_Header::Swap(Frame_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame_Header::InternalSwap(Frame_Header* other) {
  using std::swap;
  frame_id_.Swap(&other->frame_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sys_timestamp_, other->sys_timestamp_);
  swap(rolling_counter_, other->rolling_counter_);
  swap(ins_utm_timestamp_, other->ins_utm_timestamp_);
  swap(odom_id_, other->odom_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Frame_Header::GetMetadata() const {
  protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Frame_Info::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame_Info::kStatusFieldNumber;
const int Frame_Info::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame_Info::Frame_Info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_odom_2eproto::scc_info_Frame_Info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:odom.proto.Frame.Info)
}
Frame_Info::Frame_Info(const Frame_Info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:odom.proto.Frame.Info)
}

void Frame_Info::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(status_));
}

Frame_Info::~Frame_Info() {
  // @@protoc_insertion_point(destructor:odom.proto.Frame.Info)
  SharedDtor();
}

void Frame_Info::SharedDtor() {
}

void Frame_Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Frame_Info::descriptor() {
  ::protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Frame_Info& Frame_Info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_odom_2eproto::scc_info_Frame_Info.base);
  return *internal_default_instance();
}


void Frame_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:odom.proto.Frame.Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

bool Frame_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:odom.proto.Frame.Info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:odom.proto.Frame.Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:odom.proto.Frame.Info)
  return false;
#undef DO_
}

void Frame_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:odom.proto.Frame.Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  // double confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:odom.proto.Frame.Info)
}

::google::protobuf::uint8* Frame_Info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:odom.proto.Frame.Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  // double confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->confidence(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odom.proto.Frame.Info)
  return target;
}

size_t Frame_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odom.proto.Frame.Info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 8;
  }

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame_Info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:odom.proto.Frame.Info)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame_Info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame_Info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:odom.proto.Frame.Info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:odom.proto.Frame.Info)
    MergeFrom(*source);
  }
}

void Frame_Info::MergeFrom(const Frame_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:odom.proto.Frame.Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Frame_Info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:odom.proto.Frame.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame_Info::CopyFrom(const Frame_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odom.proto.Frame.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame_Info::IsInitialized() const {
  return true;
}

void Frame_Info::Swap(Frame_Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame_Info::InternalSwap(Frame_Info* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Frame_Info::GetMetadata() const {
  protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Frame::InitAsDefaultInstance() {
  ::odom::proto::_Frame_default_instance_._instance.get_mutable()->header_ = const_cast< ::odom::proto::Frame_Header*>(
      ::odom::proto::Frame_Header::internal_default_instance());
  ::odom::proto::_Frame_default_instance_._instance.get_mutable()->info_ = const_cast< ::odom::proto::Frame_Info*>(
      ::odom::proto::Frame_Info::internal_default_instance());
  ::odom::proto::_Frame_default_instance_._instance.get_mutable()->odom_ = const_cast< ::odom::proto::Odom*>(
      ::odom::proto::Odom::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kHeaderFieldNumber;
const int Frame::kInfoFieldNumber;
const int Frame::kOdomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_odom_2eproto::scc_info_Frame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:odom.proto.Frame)
}
Frame::Frame(const Frame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::odom::proto::Frame_Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::odom::proto::Frame_Info(*from.info_);
  } else {
    info_ = NULL;
  }
  if (from.has_odom()) {
    odom_ = new ::odom::proto::Odom(*from.odom_);
  } else {
    odom_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:odom.proto.Frame)
}

void Frame::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odom_) -
      reinterpret_cast<char*>(&header_)) + sizeof(odom_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:odom.proto.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete odom_;
}

void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  ::protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Frame& Frame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_odom_2eproto::scc_info_Frame.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:odom.proto.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  if (GetArenaNoVirtual() == NULL && odom_ != NULL) {
    delete odom_;
  }
  odom_ = NULL;
  _internal_metadata_.Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:odom.proto.Frame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .odom.proto.Frame.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .odom.proto.Frame.Info info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .odom.proto.Odom odom = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_odom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:odom.proto.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:odom.proto.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:odom.proto.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .odom.proto.Frame.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .odom.proto.Frame.Info info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_info(), output);
  }

  // .odom.proto.Odom odom = 3;
  if (this->has_odom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_odom(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:odom.proto.Frame)
}

::google::protobuf::uint8* Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:odom.proto.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .odom.proto.Frame.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .odom.proto.Frame.Info info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_info(), deterministic, target);
  }

  // .odom.proto.Odom odom = 3;
  if (this->has_odom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_odom(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:odom.proto.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:odom.proto.Frame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .odom.proto.Frame.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .odom.proto.Frame.Info info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // .odom.proto.Odom odom = 3;
  if (this->has_odom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *odom_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:odom.proto.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:odom.proto.Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:odom.proto.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:odom.proto.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::odom::proto::Frame_Header::MergeFrom(from.header());
  }
  if (from.has_info()) {
    mutable_info()->::odom::proto::Frame_Info::MergeFrom(from.info());
  }
  if (from.has_odom()) {
    mutable_odom()->::odom::proto::Odom::MergeFrom(from.odom());
  }
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:odom.proto.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:odom.proto.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::Swap(Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame::InternalSwap(Frame* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(info_, other->info_);
  swap(odom_, other->odom_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_odom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace odom
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::odom::proto::Odom_Position* Arena::CreateMaybeMessage< ::odom::proto::Odom_Position >(Arena* arena) {
  return Arena::CreateInternal< ::odom::proto::Odom_Position >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::odom::proto::Odom_PositionStd* Arena::CreateMaybeMessage< ::odom::proto::Odom_PositionStd >(Arena* arena) {
  return Arena::CreateInternal< ::odom::proto::Odom_PositionStd >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::odom::proto::Odom_PoseQuaternion* Arena::CreateMaybeMessage< ::odom::proto::Odom_PoseQuaternion >(Arena* arena) {
  return Arena::CreateInternal< ::odom::proto::Odom_PoseQuaternion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::odom::proto::Odom_PoseStd* Arena::CreateMaybeMessage< ::odom::proto::Odom_PoseStd >(Arena* arena) {
  return Arena::CreateInternal< ::odom::proto::Odom_PoseStd >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::odom::proto::Odom_AngleSpeed* Arena::CreateMaybeMessage< ::odom::proto::Odom_AngleSpeed >(Arena* arena) {
  return Arena::CreateInternal< ::odom::proto::Odom_AngleSpeed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::odom::proto::Odom_AngleSpeedStd* Arena::CreateMaybeMessage< ::odom::proto::Odom_AngleSpeedStd >(Arena* arena) {
  return Arena::CreateInternal< ::odom::proto::Odom_AngleSpeedStd >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::odom::proto::Odom_LinearSpeed* Arena::CreateMaybeMessage< ::odom::proto::Odom_LinearSpeed >(Arena* arena) {
  return Arena::CreateInternal< ::odom::proto::Odom_LinearSpeed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::odom::proto::Odom_LinearSpeedStd* Arena::CreateMaybeMessage< ::odom::proto::Odom_LinearSpeedStd >(Arena* arena) {
  return Arena::CreateInternal< ::odom::proto::Odom_LinearSpeedStd >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::odom::proto::Odom_TransformMatrix* Arena::CreateMaybeMessage< ::odom::proto::Odom_TransformMatrix >(Arena* arena) {
  return Arena::CreateInternal< ::odom::proto::Odom_TransformMatrix >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::odom::proto::Odom* Arena::CreateMaybeMessage< ::odom::proto::Odom >(Arena* arena) {
  return Arena::CreateInternal< ::odom::proto::Odom >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::odom::proto::Frame_Header* Arena::CreateMaybeMessage< ::odom::proto::Frame_Header >(Arena* arena) {
  return Arena::CreateInternal< ::odom::proto::Frame_Header >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::odom::proto::Frame_Info* Arena::CreateMaybeMessage< ::odom::proto::Frame_Info >(Arena* arena) {
  return Arena::CreateInternal< ::odom::proto::Frame_Info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::odom::proto::Frame* Arena::CreateMaybeMessage< ::odom::proto::Frame >(Arena* arena) {
  return Arena::CreateInternal< ::odom::proto::Frame >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
