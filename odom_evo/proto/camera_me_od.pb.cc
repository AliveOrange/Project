// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_me_od.proto

#include "camera_me_od.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_camera_5fme_5fod_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fme_5fod_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MeHeader;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fme_5fod_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MeObjectInfo;
}  // namespace protobuf_camera_5fme_5fod_2eproto
namespace camera_me_od {
namespace proto {
class MeHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MeHeader>
      _instance;
} _MeHeader_default_instance_;
class MeObjectInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MeObjectInfo>
      _instance;
} _MeObjectInfo_default_instance_;
class me_frame_odDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<me_frame_od>
      _instance;
} _me_frame_od_default_instance_;
}  // namespace proto
}  // namespace camera_me_od
namespace protobuf_camera_5fme_5fod_2eproto {
static void InitDefaultsMeHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::camera_me_od::proto::_MeHeader_default_instance_;
    new (ptr) ::camera_me_od::proto::MeHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::camera_me_od::proto::MeHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MeHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMeHeader}, {}};

static void InitDefaultsMeObjectInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::camera_me_od::proto::_MeObjectInfo_default_instance_;
    new (ptr) ::camera_me_od::proto::MeObjectInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::camera_me_od::proto::MeObjectInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MeObjectInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMeObjectInfo}, {}};

static void InitDefaultsme_frame_od() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::camera_me_od::proto::_me_frame_od_default_instance_;
    new (ptr) ::camera_me_od::proto::me_frame_od();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::camera_me_od::proto::me_frame_od::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_me_frame_od =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsme_frame_od}, {
      &protobuf_camera_5fme_5fod_2eproto::scc_info_MeHeader.base,
      &protobuf_camera_5fme_5fod_2eproto::scc_info_MeObjectInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MeHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MeObjectInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_me_frame_od.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeHeader, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeHeader, rolling_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeHeader, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeHeader, obj_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeHeader, line_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeHeader, hazard_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, obj_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, class_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, obj_lane_assign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, motion_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, motion_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, dist_long_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, dist_lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, vrel_long_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, vrel_lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, absoulte_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, absoulte_long_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, yaw_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, orientation_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, brake_light_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, turn_indicator_right_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, turn_indicator_left_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::MeObjectInfo, light_indicator_validity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::me_frame_od, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::me_frame_od, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::me_frame_od, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_od::proto::me_frame_od, objects_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::camera_me_od::proto::MeHeader)},
  { 11, -1, sizeof(::camera_me_od::proto::MeObjectInfo)},
  { 36, -1, sizeof(::camera_me_od::proto::me_frame_od)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::camera_me_od::proto::_MeHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::camera_me_od::proto::_MeObjectInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::camera_me_od::proto::_me_frame_od_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "camera_me_od.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022camera_me_od.proto\022\022camera_me_od.proto"
      "\"\200\001\n\010MeHeader\022\021\n\ttimestamp\030\001 \001(\004\022\027\n\017roll"
      "ing_counter\030\002 \001(\r\022\021\n\tsensor_id\030\003 \001(\r\022\017\n\007"
      "obj_num\030\004 \001(\r\022\020\n\010line_num\030\005 \001(\r\022\022\n\nhazar"
      "d_num\030\006 \001(\r\"\326\003\n\014MeObjectInfo\022\016\n\006obj_id\030\001"
      " \001(\r\022\022\n\nclass_type\030\002 \001(\r\022\027\n\017obj_lane_ass"
      "ign\030\003 \001(\r\022\027\n\017motion_category\030\004 \001(\r\022\025\n\rmo"
      "tion_status\030\005 \001(\r\022\016\n\006height\030\006 \001(\001\022\r\n\005wid"
      "th\030\007 \001(\001\022\016\n\006length\030\010 \001(\001\022\021\n\tdist_long\030\t "
      "\001(\001\022\020\n\010dist_lat\030\n \001(\001\022\021\n\tvrel_long\030\013 \001(\001"
      "\022\020\n\010vrel_lat\030\014 \001(\001\022\026\n\016absoulte_speed\030\r \001"
      "(\001\022\031\n\021absoulte_long_acc\030\016 \001(\001\022\021\n\tyaw_ang"
      "le\030\017 \001(\001\022\031\n\021orientation_angle\030\020 \001(\001\022\030\n\020b"
      "rake_light_flag\030\021 \001(\010\022!\n\031turn_indicator_"
      "right_flag\030\022 \001(\010\022 \n\030turn_indicator_left_"
      "flag\030\023 \001(\010\022 \n\030light_indicator_validity\030\024"
      " \001(\010\"\201\001\n\013me_frame_od\022,\n\006header\030\001 \001(\0132\034.c"
      "amera_me_od.proto.MeHeader\022\021\n\ttimestamp\030"
      "\002 \001(\004\0221\n\007objects\030\003 \003(\0132 .camera_me_od.pr"
      "oto.MeObjectInfob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 784);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "camera_me_od.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_camera_5fme_5fod_2eproto
namespace camera_me_od {
namespace proto {

// ===================================================================

void MeHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeHeader::kTimestampFieldNumber;
const int MeHeader::kRollingCounterFieldNumber;
const int MeHeader::kSensorIdFieldNumber;
const int MeHeader::kObjNumFieldNumber;
const int MeHeader::kLineNumFieldNumber;
const int MeHeader::kHazardNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeHeader::MeHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fme_5fod_2eproto::scc_info_MeHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:camera_me_od.proto.MeHeader)
}
MeHeader::MeHeader(const MeHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&hazard_num_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(hazard_num_));
  // @@protoc_insertion_point(copy_constructor:camera_me_od.proto.MeHeader)
}

void MeHeader::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hazard_num_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(hazard_num_));
}

MeHeader::~MeHeader() {
  // @@protoc_insertion_point(destructor:camera_me_od.proto.MeHeader)
  SharedDtor();
}

void MeHeader::SharedDtor() {
}

void MeHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MeHeader::descriptor() {
  ::protobuf_camera_5fme_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fme_5fod_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MeHeader& MeHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fme_5fod_2eproto::scc_info_MeHeader.base);
  return *internal_default_instance();
}


void MeHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:camera_me_od.proto.MeHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hazard_num_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(hazard_num_));
  _internal_metadata_.Clear();
}

bool MeHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camera_me_od.proto.MeHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rolling_counter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolling_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 obj_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 line_num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hazard_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hazard_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camera_me_od.proto.MeHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camera_me_od.proto.MeHeader)
  return false;
#undef DO_
}

void MeHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camera_me_od.proto.MeHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rolling_counter(), output);
  }

  // uint32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sensor_id(), output);
  }

  // uint32 obj_num = 4;
  if (this->obj_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->obj_num(), output);
  }

  // uint32 line_num = 5;
  if (this->line_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->line_num(), output);
  }

  // uint32 hazard_num = 6;
  if (this->hazard_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hazard_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:camera_me_od.proto.MeHeader)
}

::google::protobuf::uint8* MeHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:camera_me_od.proto.MeHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rolling_counter(), target);
  }

  // uint32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sensor_id(), target);
  }

  // uint32 obj_num = 4;
  if (this->obj_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->obj_num(), target);
  }

  // uint32 line_num = 5;
  if (this->line_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->line_num(), target);
  }

  // uint32 hazard_num = 6;
  if (this->hazard_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hazard_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camera_me_od.proto.MeHeader)
  return target;
}

size_t MeHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camera_me_od.proto.MeHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rolling_counter());
  }

  // uint32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_id());
  }

  // uint32 obj_num = 4;
  if (this->obj_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->obj_num());
  }

  // uint32 line_num = 5;
  if (this->line_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->line_num());
  }

  // uint32 hazard_num = 6;
  if (this->hazard_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hazard_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camera_me_od.proto.MeHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MeHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camera_me_od.proto.MeHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camera_me_od.proto.MeHeader)
    MergeFrom(*source);
  }
}

void MeHeader::MergeFrom(const MeHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camera_me_od.proto.MeHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.rolling_counter() != 0) {
    set_rolling_counter(from.rolling_counter());
  }
  if (from.sensor_id() != 0) {
    set_sensor_id(from.sensor_id());
  }
  if (from.obj_num() != 0) {
    set_obj_num(from.obj_num());
  }
  if (from.line_num() != 0) {
    set_line_num(from.line_num());
  }
  if (from.hazard_num() != 0) {
    set_hazard_num(from.hazard_num());
  }
}

void MeHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camera_me_od.proto.MeHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeHeader::CopyFrom(const MeHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camera_me_od.proto.MeHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeHeader::IsInitialized() const {
  return true;
}

void MeHeader::Swap(MeHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeHeader::InternalSwap(MeHeader* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(rolling_counter_, other->rolling_counter_);
  swap(sensor_id_, other->sensor_id_);
  swap(obj_num_, other->obj_num_);
  swap(line_num_, other->line_num_);
  swap(hazard_num_, other->hazard_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MeHeader::GetMetadata() const {
  protobuf_camera_5fme_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fme_5fod_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MeObjectInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeObjectInfo::kObjIdFieldNumber;
const int MeObjectInfo::kClassTypeFieldNumber;
const int MeObjectInfo::kObjLaneAssignFieldNumber;
const int MeObjectInfo::kMotionCategoryFieldNumber;
const int MeObjectInfo::kMotionStatusFieldNumber;
const int MeObjectInfo::kHeightFieldNumber;
const int MeObjectInfo::kWidthFieldNumber;
const int MeObjectInfo::kLengthFieldNumber;
const int MeObjectInfo::kDistLongFieldNumber;
const int MeObjectInfo::kDistLatFieldNumber;
const int MeObjectInfo::kVrelLongFieldNumber;
const int MeObjectInfo::kVrelLatFieldNumber;
const int MeObjectInfo::kAbsoulteSpeedFieldNumber;
const int MeObjectInfo::kAbsoulteLongAccFieldNumber;
const int MeObjectInfo::kYawAngleFieldNumber;
const int MeObjectInfo::kOrientationAngleFieldNumber;
const int MeObjectInfo::kBrakeLightFlagFieldNumber;
const int MeObjectInfo::kTurnIndicatorRightFlagFieldNumber;
const int MeObjectInfo::kTurnIndicatorLeftFlagFieldNumber;
const int MeObjectInfo::kLightIndicatorValidityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeObjectInfo::MeObjectInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fme_5fod_2eproto::scc_info_MeObjectInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:camera_me_od.proto.MeObjectInfo)
}
MeObjectInfo::MeObjectInfo(const MeObjectInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&obj_id_, &from.obj_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&orientation_angle_) -
    reinterpret_cast<char*>(&obj_id_)) + sizeof(orientation_angle_));
  // @@protoc_insertion_point(copy_constructor:camera_me_od.proto.MeObjectInfo)
}

void MeObjectInfo::SharedCtor() {
  ::memset(&obj_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_angle_) -
      reinterpret_cast<char*>(&obj_id_)) + sizeof(orientation_angle_));
}

MeObjectInfo::~MeObjectInfo() {
  // @@protoc_insertion_point(destructor:camera_me_od.proto.MeObjectInfo)
  SharedDtor();
}

void MeObjectInfo::SharedDtor() {
}

void MeObjectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MeObjectInfo::descriptor() {
  ::protobuf_camera_5fme_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fme_5fod_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MeObjectInfo& MeObjectInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fme_5fod_2eproto::scc_info_MeObjectInfo.base);
  return *internal_default_instance();
}


void MeObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:camera_me_od.proto.MeObjectInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&obj_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_angle_) -
      reinterpret_cast<char*>(&obj_id_)) + sizeof(orientation_angle_));
  _internal_metadata_.Clear();
}

bool MeObjectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camera_me_od.proto.MeObjectInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 obj_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 class_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 obj_lane_assign = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_lane_assign_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 motion_category = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motion_category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 motion_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motion_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dist_long = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_long_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dist_lat = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vrel_long = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vrel_long_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vrel_lat = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vrel_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double absoulte_speed = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &absoulte_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double absoulte_long_acc = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &absoulte_long_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw_angle = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double orientation_angle = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientation_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool brake_light_flag = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brake_light_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool turn_indicator_right_flag = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &turn_indicator_right_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool turn_indicator_left_flag = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &turn_indicator_left_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool light_indicator_validity = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &light_indicator_validity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camera_me_od.proto.MeObjectInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camera_me_od.proto.MeObjectInfo)
  return false;
#undef DO_
}

void MeObjectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camera_me_od.proto.MeObjectInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 obj_id = 1;
  if (this->obj_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->obj_id(), output);
  }

  // uint32 class_type = 2;
  if (this->class_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->class_type(), output);
  }

  // uint32 obj_lane_assign = 3;
  if (this->obj_lane_assign() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->obj_lane_assign(), output);
  }

  // uint32 motion_category = 4;
  if (this->motion_category() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->motion_category(), output);
  }

  // uint32 motion_status = 5;
  if (this->motion_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->motion_status(), output);
  }

  // double height = 6;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->height(), output);
  }

  // double width = 7;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->width(), output);
  }

  // double length = 8;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->length(), output);
  }

  // double dist_long = 9;
  if (this->dist_long() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->dist_long(), output);
  }

  // double dist_lat = 10;
  if (this->dist_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->dist_lat(), output);
  }

  // double vrel_long = 11;
  if (this->vrel_long() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->vrel_long(), output);
  }

  // double vrel_lat = 12;
  if (this->vrel_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->vrel_lat(), output);
  }

  // double absoulte_speed = 13;
  if (this->absoulte_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->absoulte_speed(), output);
  }

  // double absoulte_long_acc = 14;
  if (this->absoulte_long_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->absoulte_long_acc(), output);
  }

  // double yaw_angle = 15;
  if (this->yaw_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->yaw_angle(), output);
  }

  // double orientation_angle = 16;
  if (this->orientation_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->orientation_angle(), output);
  }

  // bool brake_light_flag = 17;
  if (this->brake_light_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->brake_light_flag(), output);
  }

  // bool turn_indicator_right_flag = 18;
  if (this->turn_indicator_right_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->turn_indicator_right_flag(), output);
  }

  // bool turn_indicator_left_flag = 19;
  if (this->turn_indicator_left_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->turn_indicator_left_flag(), output);
  }

  // bool light_indicator_validity = 20;
  if (this->light_indicator_validity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->light_indicator_validity(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:camera_me_od.proto.MeObjectInfo)
}

::google::protobuf::uint8* MeObjectInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:camera_me_od.proto.MeObjectInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 obj_id = 1;
  if (this->obj_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->obj_id(), target);
  }

  // uint32 class_type = 2;
  if (this->class_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->class_type(), target);
  }

  // uint32 obj_lane_assign = 3;
  if (this->obj_lane_assign() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->obj_lane_assign(), target);
  }

  // uint32 motion_category = 4;
  if (this->motion_category() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->motion_category(), target);
  }

  // uint32 motion_status = 5;
  if (this->motion_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->motion_status(), target);
  }

  // double height = 6;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->height(), target);
  }

  // double width = 7;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->width(), target);
  }

  // double length = 8;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->length(), target);
  }

  // double dist_long = 9;
  if (this->dist_long() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->dist_long(), target);
  }

  // double dist_lat = 10;
  if (this->dist_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->dist_lat(), target);
  }

  // double vrel_long = 11;
  if (this->vrel_long() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->vrel_long(), target);
  }

  // double vrel_lat = 12;
  if (this->vrel_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->vrel_lat(), target);
  }

  // double absoulte_speed = 13;
  if (this->absoulte_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->absoulte_speed(), target);
  }

  // double absoulte_long_acc = 14;
  if (this->absoulte_long_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->absoulte_long_acc(), target);
  }

  // double yaw_angle = 15;
  if (this->yaw_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->yaw_angle(), target);
  }

  // double orientation_angle = 16;
  if (this->orientation_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->orientation_angle(), target);
  }

  // bool brake_light_flag = 17;
  if (this->brake_light_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->brake_light_flag(), target);
  }

  // bool turn_indicator_right_flag = 18;
  if (this->turn_indicator_right_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->turn_indicator_right_flag(), target);
  }

  // bool turn_indicator_left_flag = 19;
  if (this->turn_indicator_left_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->turn_indicator_left_flag(), target);
  }

  // bool light_indicator_validity = 20;
  if (this->light_indicator_validity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->light_indicator_validity(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camera_me_od.proto.MeObjectInfo)
  return target;
}

size_t MeObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camera_me_od.proto.MeObjectInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 obj_id = 1;
  if (this->obj_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->obj_id());
  }

  // uint32 class_type = 2;
  if (this->class_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->class_type());
  }

  // uint32 obj_lane_assign = 3;
  if (this->obj_lane_assign() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->obj_lane_assign());
  }

  // uint32 motion_category = 4;
  if (this->motion_category() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->motion_category());
  }

  // double height = 6;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // double width = 7;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // double length = 8;
  if (this->length() != 0) {
    total_size += 1 + 8;
  }

  // double dist_long = 9;
  if (this->dist_long() != 0) {
    total_size += 1 + 8;
  }

  // double dist_lat = 10;
  if (this->dist_lat() != 0) {
    total_size += 1 + 8;
  }

  // double vrel_long = 11;
  if (this->vrel_long() != 0) {
    total_size += 1 + 8;
  }

  // double vrel_lat = 12;
  if (this->vrel_lat() != 0) {
    total_size += 1 + 8;
  }

  // double absoulte_speed = 13;
  if (this->absoulte_speed() != 0) {
    total_size += 1 + 8;
  }

  // double absoulte_long_acc = 14;
  if (this->absoulte_long_acc() != 0) {
    total_size += 1 + 8;
  }

  // double yaw_angle = 15;
  if (this->yaw_angle() != 0) {
    total_size += 1 + 8;
  }

  // uint32 motion_status = 5;
  if (this->motion_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->motion_status());
  }

  // bool brake_light_flag = 17;
  if (this->brake_light_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool turn_indicator_right_flag = 18;
  if (this->turn_indicator_right_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool turn_indicator_left_flag = 19;
  if (this->turn_indicator_left_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool light_indicator_validity = 20;
  if (this->light_indicator_validity() != 0) {
    total_size += 2 + 1;
  }

  // double orientation_angle = 16;
  if (this->orientation_angle() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeObjectInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camera_me_od.proto.MeObjectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MeObjectInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeObjectInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camera_me_od.proto.MeObjectInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camera_me_od.proto.MeObjectInfo)
    MergeFrom(*source);
  }
}

void MeObjectInfo::MergeFrom(const MeObjectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camera_me_od.proto.MeObjectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obj_id() != 0) {
    set_obj_id(from.obj_id());
  }
  if (from.class_type() != 0) {
    set_class_type(from.class_type());
  }
  if (from.obj_lane_assign() != 0) {
    set_obj_lane_assign(from.obj_lane_assign());
  }
  if (from.motion_category() != 0) {
    set_motion_category(from.motion_category());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.dist_long() != 0) {
    set_dist_long(from.dist_long());
  }
  if (from.dist_lat() != 0) {
    set_dist_lat(from.dist_lat());
  }
  if (from.vrel_long() != 0) {
    set_vrel_long(from.vrel_long());
  }
  if (from.vrel_lat() != 0) {
    set_vrel_lat(from.vrel_lat());
  }
  if (from.absoulte_speed() != 0) {
    set_absoulte_speed(from.absoulte_speed());
  }
  if (from.absoulte_long_acc() != 0) {
    set_absoulte_long_acc(from.absoulte_long_acc());
  }
  if (from.yaw_angle() != 0) {
    set_yaw_angle(from.yaw_angle());
  }
  if (from.motion_status() != 0) {
    set_motion_status(from.motion_status());
  }
  if (from.brake_light_flag() != 0) {
    set_brake_light_flag(from.brake_light_flag());
  }
  if (from.turn_indicator_right_flag() != 0) {
    set_turn_indicator_right_flag(from.turn_indicator_right_flag());
  }
  if (from.turn_indicator_left_flag() != 0) {
    set_turn_indicator_left_flag(from.turn_indicator_left_flag());
  }
  if (from.light_indicator_validity() != 0) {
    set_light_indicator_validity(from.light_indicator_validity());
  }
  if (from.orientation_angle() != 0) {
    set_orientation_angle(from.orientation_angle());
  }
}

void MeObjectInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camera_me_od.proto.MeObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeObjectInfo::CopyFrom(const MeObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camera_me_od.proto.MeObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeObjectInfo::IsInitialized() const {
  return true;
}

void MeObjectInfo::Swap(MeObjectInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeObjectInfo::InternalSwap(MeObjectInfo* other) {
  using std::swap;
  swap(obj_id_, other->obj_id_);
  swap(class_type_, other->class_type_);
  swap(obj_lane_assign_, other->obj_lane_assign_);
  swap(motion_category_, other->motion_category_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(length_, other->length_);
  swap(dist_long_, other->dist_long_);
  swap(dist_lat_, other->dist_lat_);
  swap(vrel_long_, other->vrel_long_);
  swap(vrel_lat_, other->vrel_lat_);
  swap(absoulte_speed_, other->absoulte_speed_);
  swap(absoulte_long_acc_, other->absoulte_long_acc_);
  swap(yaw_angle_, other->yaw_angle_);
  swap(motion_status_, other->motion_status_);
  swap(brake_light_flag_, other->brake_light_flag_);
  swap(turn_indicator_right_flag_, other->turn_indicator_right_flag_);
  swap(turn_indicator_left_flag_, other->turn_indicator_left_flag_);
  swap(light_indicator_validity_, other->light_indicator_validity_);
  swap(orientation_angle_, other->orientation_angle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MeObjectInfo::GetMetadata() const {
  protobuf_camera_5fme_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fme_5fod_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void me_frame_od::InitAsDefaultInstance() {
  ::camera_me_od::proto::_me_frame_od_default_instance_._instance.get_mutable()->header_ = const_cast< ::camera_me_od::proto::MeHeader*>(
      ::camera_me_od::proto::MeHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int me_frame_od::kHeaderFieldNumber;
const int me_frame_od::kTimestampFieldNumber;
const int me_frame_od::kObjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

me_frame_od::me_frame_od()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fme_5fod_2eproto::scc_info_me_frame_od.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:camera_me_od.proto.me_frame_od)
}
me_frame_od::me_frame_od(const me_frame_od& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::camera_me_od::proto::MeHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:camera_me_od.proto.me_frame_od)
}

void me_frame_od::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(timestamp_));
}

me_frame_od::~me_frame_od() {
  // @@protoc_insertion_point(destructor:camera_me_od.proto.me_frame_od)
  SharedDtor();
}

void me_frame_od::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void me_frame_od::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* me_frame_od::descriptor() {
  ::protobuf_camera_5fme_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fme_5fod_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const me_frame_od& me_frame_od::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fme_5fod_2eproto::scc_info_me_frame_od.base);
  return *internal_default_instance();
}


void me_frame_od::Clear() {
// @@protoc_insertion_point(message_clear_start:camera_me_od.proto.me_frame_od)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool me_frame_od::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camera_me_od.proto.me_frame_od)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .camera_me_od.proto.MeHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .camera_me_od.proto.MeObjectInfo objects = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camera_me_od.proto.me_frame_od)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camera_me_od.proto.me_frame_od)
  return false;
#undef DO_
}

void me_frame_od::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camera_me_od.proto.me_frame_od)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .camera_me_od.proto.MeHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // repeated .camera_me_od.proto.MeObjectInfo objects = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->objects(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:camera_me_od.proto.me_frame_od)
}

::google::protobuf::uint8* me_frame_od::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:camera_me_od.proto.me_frame_od)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .camera_me_od.proto.MeHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // repeated .camera_me_od.proto.MeObjectInfo objects = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->objects(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camera_me_od.proto.me_frame_od)
  return target;
}

size_t me_frame_od::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camera_me_od.proto.me_frame_od)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .camera_me_od.proto.MeObjectInfo objects = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objects(static_cast<int>(i)));
    }
  }

  // .camera_me_od.proto.MeHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void me_frame_od::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camera_me_od.proto.me_frame_od)
  GOOGLE_DCHECK_NE(&from, this);
  const me_frame_od* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const me_frame_od>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camera_me_od.proto.me_frame_od)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camera_me_od.proto.me_frame_od)
    MergeFrom(*source);
  }
}

void me_frame_od::MergeFrom(const me_frame_od& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camera_me_od.proto.me_frame_od)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  if (from.has_header()) {
    mutable_header()->::camera_me_od::proto::MeHeader::MergeFrom(from.header());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void me_frame_od::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camera_me_od.proto.me_frame_od)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void me_frame_od::CopyFrom(const me_frame_od& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camera_me_od.proto.me_frame_od)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool me_frame_od::IsInitialized() const {
  return true;
}

void me_frame_od::Swap(me_frame_od* other) {
  if (other == this) return;
  InternalSwap(other);
}
void me_frame_od::InternalSwap(me_frame_od* other) {
  using std::swap;
  CastToBase(&objects_)->InternalSwap(CastToBase(&other->objects_));
  swap(header_, other->header_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata me_frame_od::GetMetadata() const {
  protobuf_camera_5fme_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fme_5fod_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace camera_me_od
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::camera_me_od::proto::MeHeader* Arena::CreateMaybeMessage< ::camera_me_od::proto::MeHeader >(Arena* arena) {
  return Arena::CreateInternal< ::camera_me_od::proto::MeHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::camera_me_od::proto::MeObjectInfo* Arena::CreateMaybeMessage< ::camera_me_od::proto::MeObjectInfo >(Arena* arena) {
  return Arena::CreateInternal< ::camera_me_od::proto::MeObjectInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::camera_me_od::proto::me_frame_od* Arena::CreateMaybeMessage< ::camera_me_od::proto::me_frame_od >(Arena* arena) {
  return Arena::CreateInternal< ::camera_me_od::proto::me_frame_od >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
