// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fusion_lane_out_v1_0.proto

#include "fusion_lane_out_v1_0.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Lane;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LaneHeader;
}  // namespace protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto
namespace fusion_lane_out {
namespace proto {
class LaneHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneHeader>
      _instance;
} _LaneHeader_default_instance_;
class LaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lane>
      _instance;
} _Lane_default_instance_;
class LaneFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneFrame>
      _instance;
} _LaneFrame_default_instance_;
}  // namespace proto
}  // namespace fusion_lane_out
namespace protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto {
static void InitDefaultsLaneHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fusion_lane_out::proto::_LaneHeader_default_instance_;
    new (ptr) ::fusion_lane_out::proto::LaneHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fusion_lane_out::proto::LaneHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaneHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaneHeader}, {}};

static void InitDefaultsLane() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fusion_lane_out::proto::_Lane_default_instance_;
    new (ptr) ::fusion_lane_out::proto::Lane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fusion_lane_out::proto::Lane::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Lane =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLane}, {}};

static void InitDefaultsLaneFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fusion_lane_out::proto::_LaneFrame_default_instance_;
    new (ptr) ::fusion_lane_out::proto::LaneFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fusion_lane_out::proto::LaneFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LaneFrame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLaneFrame}, {
      &protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::scc_info_LaneHeader.base,
      &protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::scc_info_Lane.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LaneHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Lane.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneFrame.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::LaneHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::LaneHeader, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::LaneHeader, rolling_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::LaneHeader, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::LaneHeader, line_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, line_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, coordinate_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, c0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, c1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, c2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, c3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, line_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, line_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, start_long_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, start_lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, end_long_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, end_lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, c0_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, c1_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, c2_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, c3_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::Lane, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::LaneFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::LaneFrame, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::LaneFrame, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fusion_lane_out::proto::LaneFrame, lanes_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fusion_lane_out::proto::LaneHeader)},
  { 9, -1, sizeof(::fusion_lane_out::proto::Lane)},
  { 35, -1, sizeof(::fusion_lane_out::proto::LaneFrame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fusion_lane_out::proto::_LaneHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fusion_lane_out::proto::_Lane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fusion_lane_out::proto::_LaneFrame_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "fusion_lane_out_v1_0.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032fusion_lane_out_v1_0.proto\022\025fusion_lan"
      "e_out.proto\"]\n\nLaneHeader\022\021\n\ttimestamp\030\001"
      " \001(\004\022\027\n\017rolling_counter\030\002 \001(\r\022\021\n\tsensor_"
      "id\030\003 \001(\r\022\020\n\010line_num\030\004 \001(\r\"\344\002\n\004Lane\022\017\n\007l"
      "ine_id\030\001 \001(\r\022\027\n\017coordinate_type\030\002 \001(\r\022\n\n"
      "\002C0\030\003 \001(\001\022\n\n\002C1\030\004 \001(\001\022\n\n\002C2\030\005 \001(\001\022\n\n\002C3\030"
      "\006 \001(\001\022\r\n\005index\030\007 \001(\r\022\017\n\007quality\030\010 \001(\r\022\021\n"
      "\tline_type\030\t \001(\r\022\022\n\nline_color\030\n \001(\r\022\022\n\n"
      "start_long\030\013 \001(\001\022\021\n\tstart_lat\030\014 \001(\001\022\020\n\010e"
      "nd_long\030\r \001(\001\022\017\n\007end_lat\030\016 \001(\001\022\r\n\005width\030"
      "\017 \001(\001\022\016\n\006length\030\020 \001(\001\022\016\n\006C0_rms\030\021 \001(\001\022\016\n"
      "\006C1_rms\030\022 \001(\001\022\016\n\006C2_rms\030\023 \001(\001\022\016\n\006C3_rms\030"
      "\024 \001(\001\022\022\n\nconfidence\030\025 \001(\001\"}\n\tLaneFrame\0221"
      "\n\006header\030\001 \001(\0132!.fusion_lane_out.proto.L"
      "aneHeader\022\021\n\ttimestamp\030\002 \001(\004\022*\n\005lanes\030\003 "
      "\003(\0132\033.fusion_lane_out.proto.Laneb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 640);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fusion_lane_out_v1_0.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto
namespace fusion_lane_out {
namespace proto {

// ===================================================================

void LaneHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneHeader::kTimestampFieldNumber;
const int LaneHeader::kRollingCounterFieldNumber;
const int LaneHeader::kSensorIdFieldNumber;
const int LaneHeader::kLineNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneHeader::LaneHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::scc_info_LaneHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fusion_lane_out.proto.LaneHeader)
}
LaneHeader::LaneHeader(const LaneHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&line_num_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(line_num_));
  // @@protoc_insertion_point(copy_constructor:fusion_lane_out.proto.LaneHeader)
}

void LaneHeader::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_num_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(line_num_));
}

LaneHeader::~LaneHeader() {
  // @@protoc_insertion_point(destructor:fusion_lane_out.proto.LaneHeader)
  SharedDtor();
}

void LaneHeader::SharedDtor() {
}

void LaneHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneHeader::descriptor() {
  ::protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneHeader& LaneHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::scc_info_LaneHeader.base);
  return *internal_default_instance();
}


void LaneHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:fusion_lane_out.proto.LaneHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_num_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(line_num_));
  _internal_metadata_.Clear();
}

bool LaneHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fusion_lane_out.proto.LaneHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rolling_counter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolling_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 line_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fusion_lane_out.proto.LaneHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fusion_lane_out.proto.LaneHeader)
  return false;
#undef DO_
}

void LaneHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fusion_lane_out.proto.LaneHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rolling_counter(), output);
  }

  // uint32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sensor_id(), output);
  }

  // uint32 line_num = 4;
  if (this->line_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->line_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fusion_lane_out.proto.LaneHeader)
}

::google::protobuf::uint8* LaneHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fusion_lane_out.proto.LaneHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rolling_counter(), target);
  }

  // uint32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sensor_id(), target);
  }

  // uint32 line_num = 4;
  if (this->line_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->line_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fusion_lane_out.proto.LaneHeader)
  return target;
}

size_t LaneHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fusion_lane_out.proto.LaneHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rolling_counter());
  }

  // uint32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_id());
  }

  // uint32 line_num = 4;
  if (this->line_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->line_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fusion_lane_out.proto.LaneHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fusion_lane_out.proto.LaneHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fusion_lane_out.proto.LaneHeader)
    MergeFrom(*source);
  }
}

void LaneHeader::MergeFrom(const LaneHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fusion_lane_out.proto.LaneHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.rolling_counter() != 0) {
    set_rolling_counter(from.rolling_counter());
  }
  if (from.sensor_id() != 0) {
    set_sensor_id(from.sensor_id());
  }
  if (from.line_num() != 0) {
    set_line_num(from.line_num());
  }
}

void LaneHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fusion_lane_out.proto.LaneHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneHeader::CopyFrom(const LaneHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fusion_lane_out.proto.LaneHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneHeader::IsInitialized() const {
  return true;
}

void LaneHeader::Swap(LaneHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneHeader::InternalSwap(LaneHeader* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(rolling_counter_, other->rolling_counter_);
  swap(sensor_id_, other->sensor_id_);
  swap(line_num_, other->line_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneHeader::GetMetadata() const {
  protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Lane::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane::kLineIdFieldNumber;
const int Lane::kCoordinateTypeFieldNumber;
const int Lane::kC0FieldNumber;
const int Lane::kC1FieldNumber;
const int Lane::kC2FieldNumber;
const int Lane::kC3FieldNumber;
const int Lane::kIndexFieldNumber;
const int Lane::kQualityFieldNumber;
const int Lane::kLineTypeFieldNumber;
const int Lane::kLineColorFieldNumber;
const int Lane::kStartLongFieldNumber;
const int Lane::kStartLatFieldNumber;
const int Lane::kEndLongFieldNumber;
const int Lane::kEndLatFieldNumber;
const int Lane::kWidthFieldNumber;
const int Lane::kLengthFieldNumber;
const int Lane::kC0RmsFieldNumber;
const int Lane::kC1RmsFieldNumber;
const int Lane::kC2RmsFieldNumber;
const int Lane::kC3RmsFieldNumber;
const int Lane::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane::Lane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::scc_info_Lane.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fusion_lane_out.proto.Lane)
}
Lane::Lane(const Lane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&line_id_, &from.line_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&line_id_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:fusion_lane_out.proto.Lane)
}

void Lane::SharedCtor() {
  ::memset(&line_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&line_id_)) + sizeof(confidence_));
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:fusion_lane_out.proto.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
}

void Lane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Lane::descriptor() {
  ::protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane& Lane::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::scc_info_Lane.base);
  return *internal_default_instance();
}


void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:fusion_lane_out.proto.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&line_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&line_id_)) + sizeof(confidence_));
  _internal_metadata_.Clear();
}

bool Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fusion_lane_out.proto.Lane)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 line_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coordinate_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coordinate_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double C0 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double C1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double C2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double C3 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 quality = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 line_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 line_color = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_long = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_long_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_lat = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_long = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_long_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_lat = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double C0_rms = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c0_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double C1_rms = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c1_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double C2_rms = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c2_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double C3_rms = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c3_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double confidence = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fusion_lane_out.proto.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fusion_lane_out.proto.Lane)
  return false;
#undef DO_
}

void Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fusion_lane_out.proto.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 line_id = 1;
  if (this->line_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->line_id(), output);
  }

  // uint32 coordinate_type = 2;
  if (this->coordinate_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coordinate_type(), output);
  }

  // double C0 = 3;
  if (this->c0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->c0(), output);
  }

  // double C1 = 4;
  if (this->c1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->c1(), output);
  }

  // double C2 = 5;
  if (this->c2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->c2(), output);
  }

  // double C3 = 6;
  if (this->c3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->c3(), output);
  }

  // uint32 index = 7;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->index(), output);
  }

  // uint32 quality = 8;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->quality(), output);
  }

  // uint32 line_type = 9;
  if (this->line_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->line_type(), output);
  }

  // uint32 line_color = 10;
  if (this->line_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->line_color(), output);
  }

  // double start_long = 11;
  if (this->start_long() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->start_long(), output);
  }

  // double start_lat = 12;
  if (this->start_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->start_lat(), output);
  }

  // double end_long = 13;
  if (this->end_long() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->end_long(), output);
  }

  // double end_lat = 14;
  if (this->end_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->end_lat(), output);
  }

  // double width = 15;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->width(), output);
  }

  // double length = 16;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->length(), output);
  }

  // double C0_rms = 17;
  if (this->c0_rms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->c0_rms(), output);
  }

  // double C1_rms = 18;
  if (this->c1_rms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->c1_rms(), output);
  }

  // double C2_rms = 19;
  if (this->c2_rms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->c2_rms(), output);
  }

  // double C3_rms = 20;
  if (this->c3_rms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->c3_rms(), output);
  }

  // double confidence = 21;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fusion_lane_out.proto.Lane)
}

::google::protobuf::uint8* Lane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fusion_lane_out.proto.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 line_id = 1;
  if (this->line_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->line_id(), target);
  }

  // uint32 coordinate_type = 2;
  if (this->coordinate_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coordinate_type(), target);
  }

  // double C0 = 3;
  if (this->c0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->c0(), target);
  }

  // double C1 = 4;
  if (this->c1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->c1(), target);
  }

  // double C2 = 5;
  if (this->c2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->c2(), target);
  }

  // double C3 = 6;
  if (this->c3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->c3(), target);
  }

  // uint32 index = 7;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->index(), target);
  }

  // uint32 quality = 8;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->quality(), target);
  }

  // uint32 line_type = 9;
  if (this->line_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->line_type(), target);
  }

  // uint32 line_color = 10;
  if (this->line_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->line_color(), target);
  }

  // double start_long = 11;
  if (this->start_long() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->start_long(), target);
  }

  // double start_lat = 12;
  if (this->start_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->start_lat(), target);
  }

  // double end_long = 13;
  if (this->end_long() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->end_long(), target);
  }

  // double end_lat = 14;
  if (this->end_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->end_lat(), target);
  }

  // double width = 15;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->width(), target);
  }

  // double length = 16;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->length(), target);
  }

  // double C0_rms = 17;
  if (this->c0_rms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->c0_rms(), target);
  }

  // double C1_rms = 18;
  if (this->c1_rms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->c1_rms(), target);
  }

  // double C2_rms = 19;
  if (this->c2_rms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->c2_rms(), target);
  }

  // double C3_rms = 20;
  if (this->c3_rms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->c3_rms(), target);
  }

  // double confidence = 21;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->confidence(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fusion_lane_out.proto.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fusion_lane_out.proto.Lane)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 line_id = 1;
  if (this->line_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->line_id());
  }

  // uint32 coordinate_type = 2;
  if (this->coordinate_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coordinate_type());
  }

  // double C0 = 3;
  if (this->c0() != 0) {
    total_size += 1 + 8;
  }

  // double C1 = 4;
  if (this->c1() != 0) {
    total_size += 1 + 8;
  }

  // double C2 = 5;
  if (this->c2() != 0) {
    total_size += 1 + 8;
  }

  // double C3 = 6;
  if (this->c3() != 0) {
    total_size += 1 + 8;
  }

  // uint32 index = 7;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  // uint32 quality = 8;
  if (this->quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quality());
  }

  // uint32 line_type = 9;
  if (this->line_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->line_type());
  }

  // uint32 line_color = 10;
  if (this->line_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->line_color());
  }

  // double start_long = 11;
  if (this->start_long() != 0) {
    total_size += 1 + 8;
  }

  // double start_lat = 12;
  if (this->start_lat() != 0) {
    total_size += 1 + 8;
  }

  // double end_long = 13;
  if (this->end_long() != 0) {
    total_size += 1 + 8;
  }

  // double end_lat = 14;
  if (this->end_lat() != 0) {
    total_size += 1 + 8;
  }

  // double width = 15;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // double length = 16;
  if (this->length() != 0) {
    total_size += 2 + 8;
  }

  // double C0_rms = 17;
  if (this->c0_rms() != 0) {
    total_size += 2 + 8;
  }

  // double C1_rms = 18;
  if (this->c1_rms() != 0) {
    total_size += 2 + 8;
  }

  // double C2_rms = 19;
  if (this->c2_rms() != 0) {
    total_size += 2 + 8;
  }

  // double C3_rms = 20;
  if (this->c3_rms() != 0) {
    total_size += 2 + 8;
  }

  // double confidence = 21;
  if (this->confidence() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fusion_lane_out.proto.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fusion_lane_out.proto.Lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fusion_lane_out.proto.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fusion_lane_out.proto.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.line_id() != 0) {
    set_line_id(from.line_id());
  }
  if (from.coordinate_type() != 0) {
    set_coordinate_type(from.coordinate_type());
  }
  if (from.c0() != 0) {
    set_c0(from.c0());
  }
  if (from.c1() != 0) {
    set_c1(from.c1());
  }
  if (from.c2() != 0) {
    set_c2(from.c2());
  }
  if (from.c3() != 0) {
    set_c3(from.c3());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
  if (from.line_type() != 0) {
    set_line_type(from.line_type());
  }
  if (from.line_color() != 0) {
    set_line_color(from.line_color());
  }
  if (from.start_long() != 0) {
    set_start_long(from.start_long());
  }
  if (from.start_lat() != 0) {
    set_start_lat(from.start_lat());
  }
  if (from.end_long() != 0) {
    set_end_long(from.end_long());
  }
  if (from.end_lat() != 0) {
    set_end_lat(from.end_lat());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.c0_rms() != 0) {
    set_c0_rms(from.c0_rms());
  }
  if (from.c1_rms() != 0) {
    set_c1_rms(from.c1_rms());
  }
  if (from.c2_rms() != 0) {
    set_c2_rms(from.c2_rms());
  }
  if (from.c3_rms() != 0) {
    set_c3_rms(from.c3_rms());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void Lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fusion_lane_out.proto.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fusion_lane_out.proto.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::Swap(Lane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane::InternalSwap(Lane* other) {
  using std::swap;
  swap(line_id_, other->line_id_);
  swap(coordinate_type_, other->coordinate_type_);
  swap(c0_, other->c0_);
  swap(c1_, other->c1_);
  swap(c2_, other->c2_);
  swap(c3_, other->c3_);
  swap(index_, other->index_);
  swap(quality_, other->quality_);
  swap(line_type_, other->line_type_);
  swap(line_color_, other->line_color_);
  swap(start_long_, other->start_long_);
  swap(start_lat_, other->start_lat_);
  swap(end_long_, other->end_long_);
  swap(end_lat_, other->end_lat_);
  swap(width_, other->width_);
  swap(length_, other->length_);
  swap(c0_rms_, other->c0_rms_);
  swap(c1_rms_, other->c1_rms_);
  swap(c2_rms_, other->c2_rms_);
  swap(c3_rms_, other->c3_rms_);
  swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneFrame::InitAsDefaultInstance() {
  ::fusion_lane_out::proto::_LaneFrame_default_instance_._instance.get_mutable()->header_ = const_cast< ::fusion_lane_out::proto::LaneHeader*>(
      ::fusion_lane_out::proto::LaneHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneFrame::kHeaderFieldNumber;
const int LaneFrame::kTimestampFieldNumber;
const int LaneFrame::kLanesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneFrame::LaneFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::scc_info_LaneFrame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fusion_lane_out.proto.LaneFrame)
}
LaneFrame::LaneFrame(const LaneFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lanes_(from.lanes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::fusion_lane_out::proto::LaneHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:fusion_lane_out.proto.LaneFrame)
}

void LaneFrame::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(timestamp_));
}

LaneFrame::~LaneFrame() {
  // @@protoc_insertion_point(destructor:fusion_lane_out.proto.LaneFrame)
  SharedDtor();
}

void LaneFrame::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void LaneFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneFrame::descriptor() {
  ::protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneFrame& LaneFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::scc_info_LaneFrame.base);
  return *internal_default_instance();
}


void LaneFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:fusion_lane_out.proto.LaneFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lanes_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool LaneFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fusion_lane_out.proto.LaneFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fusion_lane_out.proto.LaneHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fusion_lane_out.proto.Lane lanes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lanes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fusion_lane_out.proto.LaneFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fusion_lane_out.proto.LaneFrame)
  return false;
#undef DO_
}

void LaneFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fusion_lane_out.proto.LaneFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fusion_lane_out.proto.LaneHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // repeated .fusion_lane_out.proto.Lane lanes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lanes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->lanes(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fusion_lane_out.proto.LaneFrame)
}

::google::protobuf::uint8* LaneFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fusion_lane_out.proto.LaneFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fusion_lane_out.proto.LaneHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // repeated .fusion_lane_out.proto.Lane lanes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lanes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->lanes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fusion_lane_out.proto.LaneFrame)
  return target;
}

size_t LaneFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fusion_lane_out.proto.LaneFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .fusion_lane_out.proto.Lane lanes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->lanes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lanes(static_cast<int>(i)));
    }
  }

  // .fusion_lane_out.proto.LaneHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fusion_lane_out.proto.LaneFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fusion_lane_out.proto.LaneFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fusion_lane_out.proto.LaneFrame)
    MergeFrom(*source);
  }
}

void LaneFrame::MergeFrom(const LaneFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fusion_lane_out.proto.LaneFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lanes_.MergeFrom(from.lanes_);
  if (from.has_header()) {
    mutable_header()->::fusion_lane_out::proto::LaneHeader::MergeFrom(from.header());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void LaneFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fusion_lane_out.proto.LaneFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneFrame::CopyFrom(const LaneFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fusion_lane_out.proto.LaneFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneFrame::IsInitialized() const {
  return true;
}

void LaneFrame::Swap(LaneFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneFrame::InternalSwap(LaneFrame* other) {
  using std::swap;
  CastToBase(&lanes_)->InternalSwap(CastToBase(&other->lanes_));
  swap(header_, other->header_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneFrame::GetMetadata() const {
  protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace fusion_lane_out
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fusion_lane_out::proto::LaneHeader* Arena::CreateMaybeMessage< ::fusion_lane_out::proto::LaneHeader >(Arena* arena) {
  return Arena::CreateInternal< ::fusion_lane_out::proto::LaneHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fusion_lane_out::proto::Lane* Arena::CreateMaybeMessage< ::fusion_lane_out::proto::Lane >(Arena* arena) {
  return Arena::CreateInternal< ::fusion_lane_out::proto::Lane >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fusion_lane_out::proto::LaneFrame* Arena::CreateMaybeMessage< ::fusion_lane_out::proto::LaneFrame >(Arena* arena) {
  return Arena::CreateInternal< ::fusion_lane_out::proto::LaneFrame >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
