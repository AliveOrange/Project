// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ins_in.proto

#ifndef PROTOBUF_INCLUDED_ins_5fin_2eproto
#define PROTOBUF_INCLUDED_ins_5fin_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ins_5fin_2eproto 

namespace protobuf_ins_5fin_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ins_5fin_2eproto
namespace ins_in {
namespace proto {
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Frame_Header;
class Frame_HeaderDefaultTypeInternal;
extern Frame_HeaderDefaultTypeInternal _Frame_Header_default_instance_;
class Ins;
class InsDefaultTypeInternal;
extern InsDefaultTypeInternal _Ins_default_instance_;
class Ins_AngularVelocity;
class Ins_AngularVelocityDefaultTypeInternal;
extern Ins_AngularVelocityDefaultTypeInternal _Ins_AngularVelocity_default_instance_;
class Ins_DataInfo;
class Ins_DataInfoDefaultTypeInternal;
extern Ins_DataInfoDefaultTypeInternal _Ins_DataInfo_default_instance_;
class Ins_LinearAcceleration;
class Ins_LinearAccelerationDefaultTypeInternal;
extern Ins_LinearAccelerationDefaultTypeInternal _Ins_LinearAcceleration_default_instance_;
class Ins_Orientation;
class Ins_OrientationDefaultTypeInternal;
extern Ins_OrientationDefaultTypeInternal _Ins_Orientation_default_instance_;
class Ins_Position;
class Ins_PositionDefaultTypeInternal;
extern Ins_PositionDefaultTypeInternal _Ins_Position_default_instance_;
class Ins_Speed;
class Ins_SpeedDefaultTypeInternal;
extern Ins_SpeedDefaultTypeInternal _Ins_Speed_default_instance_;
class Ins_Std;
class Ins_StdDefaultTypeInternal;
extern Ins_StdDefaultTypeInternal _Ins_Std_default_instance_;
}  // namespace proto
}  // namespace ins_in
namespace google {
namespace protobuf {
template<> ::ins_in::proto::Frame* Arena::CreateMaybeMessage<::ins_in::proto::Frame>(Arena*);
template<> ::ins_in::proto::Frame_Header* Arena::CreateMaybeMessage<::ins_in::proto::Frame_Header>(Arena*);
template<> ::ins_in::proto::Ins* Arena::CreateMaybeMessage<::ins_in::proto::Ins>(Arena*);
template<> ::ins_in::proto::Ins_AngularVelocity* Arena::CreateMaybeMessage<::ins_in::proto::Ins_AngularVelocity>(Arena*);
template<> ::ins_in::proto::Ins_DataInfo* Arena::CreateMaybeMessage<::ins_in::proto::Ins_DataInfo>(Arena*);
template<> ::ins_in::proto::Ins_LinearAcceleration* Arena::CreateMaybeMessage<::ins_in::proto::Ins_LinearAcceleration>(Arena*);
template<> ::ins_in::proto::Ins_Orientation* Arena::CreateMaybeMessage<::ins_in::proto::Ins_Orientation>(Arena*);
template<> ::ins_in::proto::Ins_Position* Arena::CreateMaybeMessage<::ins_in::proto::Ins_Position>(Arena*);
template<> ::ins_in::proto::Ins_Speed* Arena::CreateMaybeMessage<::ins_in::proto::Ins_Speed>(Arena*);
template<> ::ins_in::proto::Ins_Std* Arena::CreateMaybeMessage<::ins_in::proto::Ins_Std>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ins_in {
namespace proto {

// ===================================================================

class Ins_AngularVelocity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ins_in.proto.Ins.AngularVelocity) */ {
 public:
  Ins_AngularVelocity();
  virtual ~Ins_AngularVelocity();

  Ins_AngularVelocity(const Ins_AngularVelocity& from);

  inline Ins_AngularVelocity& operator=(const Ins_AngularVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ins_AngularVelocity(Ins_AngularVelocity&& from) noexcept
    : Ins_AngularVelocity() {
    *this = ::std::move(from);
  }

  inline Ins_AngularVelocity& operator=(Ins_AngularVelocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins_AngularVelocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ins_AngularVelocity* internal_default_instance() {
    return reinterpret_cast<const Ins_AngularVelocity*>(
               &_Ins_AngularVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Ins_AngularVelocity* other);
  friend void swap(Ins_AngularVelocity& a, Ins_AngularVelocity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ins_AngularVelocity* New() const final {
    return CreateMaybeMessage<Ins_AngularVelocity>(NULL);
  }

  Ins_AngularVelocity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ins_AngularVelocity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ins_AngularVelocity& from);
  void MergeFrom(const Ins_AngularVelocity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ins_AngularVelocity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:ins_in.proto.Ins.AngularVelocity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ins_5fin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ins_LinearAcceleration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ins_in.proto.Ins.LinearAcceleration) */ {
 public:
  Ins_LinearAcceleration();
  virtual ~Ins_LinearAcceleration();

  Ins_LinearAcceleration(const Ins_LinearAcceleration& from);

  inline Ins_LinearAcceleration& operator=(const Ins_LinearAcceleration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ins_LinearAcceleration(Ins_LinearAcceleration&& from) noexcept
    : Ins_LinearAcceleration() {
    *this = ::std::move(from);
  }

  inline Ins_LinearAcceleration& operator=(Ins_LinearAcceleration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins_LinearAcceleration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ins_LinearAcceleration* internal_default_instance() {
    return reinterpret_cast<const Ins_LinearAcceleration*>(
               &_Ins_LinearAcceleration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Ins_LinearAcceleration* other);
  friend void swap(Ins_LinearAcceleration& a, Ins_LinearAcceleration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ins_LinearAcceleration* New() const final {
    return CreateMaybeMessage<Ins_LinearAcceleration>(NULL);
  }

  Ins_LinearAcceleration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ins_LinearAcceleration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ins_LinearAcceleration& from);
  void MergeFrom(const Ins_LinearAcceleration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ins_LinearAcceleration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:ins_in.proto.Ins.LinearAcceleration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ins_5fin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ins_Orientation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ins_in.proto.Ins.Orientation) */ {
 public:
  Ins_Orientation();
  virtual ~Ins_Orientation();

  Ins_Orientation(const Ins_Orientation& from);

  inline Ins_Orientation& operator=(const Ins_Orientation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ins_Orientation(Ins_Orientation&& from) noexcept
    : Ins_Orientation() {
    *this = ::std::move(from);
  }

  inline Ins_Orientation& operator=(Ins_Orientation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins_Orientation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ins_Orientation* internal_default_instance() {
    return reinterpret_cast<const Ins_Orientation*>(
               &_Ins_Orientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Ins_Orientation* other);
  friend void swap(Ins_Orientation& a, Ins_Orientation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ins_Orientation* New() const final {
    return CreateMaybeMessage<Ins_Orientation>(NULL);
  }

  Ins_Orientation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ins_Orientation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ins_Orientation& from);
  void MergeFrom(const Ins_Orientation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ins_Orientation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double pitch = 1;
  void clear_pitch();
  static const int kPitchFieldNumber = 1;
  double pitch() const;
  void set_pitch(double value);

  // double roll = 2;
  void clear_roll();
  static const int kRollFieldNumber = 2;
  double roll() const;
  void set_roll(double value);

  // double heading = 3;
  void clear_heading();
  static const int kHeadingFieldNumber = 3;
  double heading() const;
  void set_heading(double value);

  // @@protoc_insertion_point(class_scope:ins_in.proto.Ins.Orientation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double pitch_;
  double roll_;
  double heading_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ins_5fin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ins_Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ins_in.proto.Ins.Position) */ {
 public:
  Ins_Position();
  virtual ~Ins_Position();

  Ins_Position(const Ins_Position& from);

  inline Ins_Position& operator=(const Ins_Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ins_Position(Ins_Position&& from) noexcept
    : Ins_Position() {
    *this = ::std::move(from);
  }

  inline Ins_Position& operator=(Ins_Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ins_Position* internal_default_instance() {
    return reinterpret_cast<const Ins_Position*>(
               &_Ins_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Ins_Position* other);
  friend void swap(Ins_Position& a, Ins_Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ins_Position* New() const final {
    return CreateMaybeMessage<Ins_Position>(NULL);
  }

  Ins_Position* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ins_Position>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ins_Position& from);
  void MergeFrom(const Ins_Position& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ins_Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double latitude = 1;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  double latitude() const;
  void set_latitude(double value);

  // double longitude = 2;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // double altitude = 3;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  double altitude() const;
  void set_altitude(double value);

  // @@protoc_insertion_point(class_scope:ins_in.proto.Ins.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double latitude_;
  double longitude_;
  double altitude_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ins_5fin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ins_Speed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ins_in.proto.Ins.Speed) */ {
 public:
  Ins_Speed();
  virtual ~Ins_Speed();

  Ins_Speed(const Ins_Speed& from);

  inline Ins_Speed& operator=(const Ins_Speed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ins_Speed(Ins_Speed&& from) noexcept
    : Ins_Speed() {
    *this = ::std::move(from);
  }

  inline Ins_Speed& operator=(Ins_Speed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins_Speed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ins_Speed* internal_default_instance() {
    return reinterpret_cast<const Ins_Speed*>(
               &_Ins_Speed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Ins_Speed* other);
  friend void swap(Ins_Speed& a, Ins_Speed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ins_Speed* New() const final {
    return CreateMaybeMessage<Ins_Speed>(NULL);
  }

  Ins_Speed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ins_Speed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ins_Speed& from);
  void MergeFrom(const Ins_Speed& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ins_Speed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double east_spd = 1;
  void clear_east_spd();
  static const int kEastSpdFieldNumber = 1;
  double east_spd() const;
  void set_east_spd(double value);

  // double north_spd = 2;
  void clear_north_spd();
  static const int kNorthSpdFieldNumber = 2;
  double north_spd() const;
  void set_north_spd(double value);

  // double to_ground_spd = 3;
  void clear_to_ground_spd();
  static const int kToGroundSpdFieldNumber = 3;
  double to_ground_spd() const;
  void set_to_ground_spd(double value);

  // @@protoc_insertion_point(class_scope:ins_in.proto.Ins.Speed)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double east_spd_;
  double north_spd_;
  double to_ground_spd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ins_5fin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ins_DataInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ins_in.proto.Ins.DataInfo) */ {
 public:
  Ins_DataInfo();
  virtual ~Ins_DataInfo();

  Ins_DataInfo(const Ins_DataInfo& from);

  inline Ins_DataInfo& operator=(const Ins_DataInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ins_DataInfo(Ins_DataInfo&& from) noexcept
    : Ins_DataInfo() {
    *this = ::std::move(from);
  }

  inline Ins_DataInfo& operator=(Ins_DataInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins_DataInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ins_DataInfo* internal_default_instance() {
    return reinterpret_cast<const Ins_DataInfo*>(
               &_Ins_DataInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Ins_DataInfo* other);
  friend void swap(Ins_DataInfo& a, Ins_DataInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ins_DataInfo* New() const final {
    return CreateMaybeMessage<Ins_DataInfo>(NULL);
  }

  Ins_DataInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ins_DataInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ins_DataInfo& from);
  void MergeFrom(const Ins_DataInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ins_DataInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 gnss_age = 1;
  void clear_gnss_age();
  static const int kGnssAgeFieldNumber = 1;
  ::google::protobuf::uint32 gnss_age() const;
  void set_gnss_age(::google::protobuf::uint32 value);

  // uint32 car_status = 2;
  void clear_car_status();
  static const int kCarStatusFieldNumber = 2;
  ::google::protobuf::uint32 car_status() const;
  void set_car_status(::google::protobuf::uint32 value);

  // uint32 gnss_flag_heading = 3;
  void clear_gnss_flag_heading();
  static const int kGnssFlagHeadingFieldNumber = 3;
  ::google::protobuf::uint32 gnss_flag_heading() const;
  void set_gnss_flag_heading(::google::protobuf::uint32 value);

  // uint32 num_sv = 4;
  void clear_num_sv();
  static const int kNumSvFieldNumber = 4;
  ::google::protobuf::uint32 num_sv() const;
  void set_num_sv(::google::protobuf::uint32 value);

  // uint32 gnss_flag_pos = 5;
  void clear_gnss_flag_pos();
  static const int kGnssFlagPosFieldNumber = 5;
  ::google::protobuf::uint32 gnss_flag_pos() const;
  void set_gnss_flag_pos(::google::protobuf::uint32 value);

  // uint32 status = 6;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ins_in.proto.Ins.DataInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 gnss_age_;
  ::google::protobuf::uint32 car_status_;
  ::google::protobuf::uint32 gnss_flag_heading_;
  ::google::protobuf::uint32 num_sv_;
  ::google::protobuf::uint32 gnss_flag_pos_;
  ::google::protobuf::uint32 status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ins_5fin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ins_Std : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ins_in.proto.Ins.Std) */ {
 public:
  Ins_Std();
  virtual ~Ins_Std();

  Ins_Std(const Ins_Std& from);

  inline Ins_Std& operator=(const Ins_Std& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ins_Std(Ins_Std&& from) noexcept
    : Ins_Std() {
    *this = ::std::move(from);
  }

  inline Ins_Std& operator=(Ins_Std&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins_Std& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ins_Std* internal_default_instance() {
    return reinterpret_cast<const Ins_Std*>(
               &_Ins_Std_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Ins_Std* other);
  friend void swap(Ins_Std& a, Ins_Std& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ins_Std* New() const final {
    return CreateMaybeMessage<Ins_Std>(NULL);
  }

  Ins_Std* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ins_Std>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ins_Std& from);
  void MergeFrom(const Ins_Std& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ins_Std* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double latitude_std = 1;
  void clear_latitude_std();
  static const int kLatitudeStdFieldNumber = 1;
  double latitude_std() const;
  void set_latitude_std(double value);

  // double longitude_std = 2;
  void clear_longitude_std();
  static const int kLongitudeStdFieldNumber = 2;
  double longitude_std() const;
  void set_longitude_std(double value);

  // double altitude_std = 3;
  void clear_altitude_std();
  static const int kAltitudeStdFieldNumber = 3;
  double altitude_std() const;
  void set_altitude_std(double value);

  // double heading_std = 4;
  void clear_heading_std();
  static const int kHeadingStdFieldNumber = 4;
  double heading_std() const;
  void set_heading_std(double value);

  // @@protoc_insertion_point(class_scope:ins_in.proto.Ins.Std)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double latitude_std_;
  double longitude_std_;
  double altitude_std_;
  double heading_std_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ins_5fin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ins : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ins_in.proto.Ins) */ {
 public:
  Ins();
  virtual ~Ins();

  Ins(const Ins& from);

  inline Ins& operator=(const Ins& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ins(Ins&& from) noexcept
    : Ins() {
    *this = ::std::move(from);
  }

  inline Ins& operator=(Ins&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ins* internal_default_instance() {
    return reinterpret_cast<const Ins*>(
               &_Ins_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Ins* other);
  friend void swap(Ins& a, Ins& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ins* New() const final {
    return CreateMaybeMessage<Ins>(NULL);
  }

  Ins* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ins>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ins& from);
  void MergeFrom(const Ins& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ins* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Ins_AngularVelocity AngularVelocity;
  typedef Ins_LinearAcceleration LinearAcceleration;
  typedef Ins_Orientation Orientation;
  typedef Ins_Position Position;
  typedef Ins_Speed Speed;
  typedef Ins_DataInfo DataInfo;
  typedef Ins_Std Std;

  // accessors -------------------------------------------------------

  // .ins_in.proto.Ins.AngularVelocity angular_velocity = 1;
  bool has_angular_velocity() const;
  void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 1;
  private:
  const ::ins_in::proto::Ins_AngularVelocity& _internal_angular_velocity() const;
  public:
  const ::ins_in::proto::Ins_AngularVelocity& angular_velocity() const;
  ::ins_in::proto::Ins_AngularVelocity* release_angular_velocity();
  ::ins_in::proto::Ins_AngularVelocity* mutable_angular_velocity();
  void set_allocated_angular_velocity(::ins_in::proto::Ins_AngularVelocity* angular_velocity);

  // .ins_in.proto.Ins.LinearAcceleration linear_acceleration = 2;
  bool has_linear_acceleration() const;
  void clear_linear_acceleration();
  static const int kLinearAccelerationFieldNumber = 2;
  private:
  const ::ins_in::proto::Ins_LinearAcceleration& _internal_linear_acceleration() const;
  public:
  const ::ins_in::proto::Ins_LinearAcceleration& linear_acceleration() const;
  ::ins_in::proto::Ins_LinearAcceleration* release_linear_acceleration();
  ::ins_in::proto::Ins_LinearAcceleration* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::ins_in::proto::Ins_LinearAcceleration* linear_acceleration);

  // .ins_in.proto.Ins.Orientation orientation = 3;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 3;
  private:
  const ::ins_in::proto::Ins_Orientation& _internal_orientation() const;
  public:
  const ::ins_in::proto::Ins_Orientation& orientation() const;
  ::ins_in::proto::Ins_Orientation* release_orientation();
  ::ins_in::proto::Ins_Orientation* mutable_orientation();
  void set_allocated_orientation(::ins_in::proto::Ins_Orientation* orientation);

  // .ins_in.proto.Ins.Position position = 4;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  private:
  const ::ins_in::proto::Ins_Position& _internal_position() const;
  public:
  const ::ins_in::proto::Ins_Position& position() const;
  ::ins_in::proto::Ins_Position* release_position();
  ::ins_in::proto::Ins_Position* mutable_position();
  void set_allocated_position(::ins_in::proto::Ins_Position* position);

  // .ins_in.proto.Ins.Speed speed = 5;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 5;
  private:
  const ::ins_in::proto::Ins_Speed& _internal_speed() const;
  public:
  const ::ins_in::proto::Ins_Speed& speed() const;
  ::ins_in::proto::Ins_Speed* release_speed();
  ::ins_in::proto::Ins_Speed* mutable_speed();
  void set_allocated_speed(::ins_in::proto::Ins_Speed* speed);

  // .ins_in.proto.Ins.DataInfo data_info = 6;
  bool has_data_info() const;
  void clear_data_info();
  static const int kDataInfoFieldNumber = 6;
  private:
  const ::ins_in::proto::Ins_DataInfo& _internal_data_info() const;
  public:
  const ::ins_in::proto::Ins_DataInfo& data_info() const;
  ::ins_in::proto::Ins_DataInfo* release_data_info();
  ::ins_in::proto::Ins_DataInfo* mutable_data_info();
  void set_allocated_data_info(::ins_in::proto::Ins_DataInfo* data_info);

  // .ins_in.proto.Ins.Std std = 7;
  bool has_std() const;
  void clear_std();
  static const int kStdFieldNumber = 7;
  private:
  const ::ins_in::proto::Ins_Std& _internal_std() const;
  public:
  const ::ins_in::proto::Ins_Std& std() const;
  ::ins_in::proto::Ins_Std* release_std();
  ::ins_in::proto::Ins_Std* mutable_std();
  void set_allocated_std(::ins_in::proto::Ins_Std* std);

  // @@protoc_insertion_point(class_scope:ins_in.proto.Ins)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ins_in::proto::Ins_AngularVelocity* angular_velocity_;
  ::ins_in::proto::Ins_LinearAcceleration* linear_acceleration_;
  ::ins_in::proto::Ins_Orientation* orientation_;
  ::ins_in::proto::Ins_Position* position_;
  ::ins_in::proto::Ins_Speed* speed_;
  ::ins_in::proto::Ins_DataInfo* data_info_;
  ::ins_in::proto::Ins_Std* std_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ins_5fin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Frame_Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ins_in.proto.Frame.Header) */ {
 public:
  Frame_Header();
  virtual ~Frame_Header();

  Frame_Header(const Frame_Header& from);

  inline Frame_Header& operator=(const Frame_Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Frame_Header(Frame_Header&& from) noexcept
    : Frame_Header() {
    *this = ::std::move(from);
  }

  inline Frame_Header& operator=(Frame_Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame_Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame_Header* internal_default_instance() {
    return reinterpret_cast<const Frame_Header*>(
               &_Frame_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Frame_Header* other);
  friend void swap(Frame_Header& a, Frame_Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Frame_Header* New() const final {
    return CreateMaybeMessage<Frame_Header>(NULL);
  }

  Frame_Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Frame_Header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Frame_Header& from);
  void MergeFrom(const Frame_Header& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame_Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string frame_id = 4;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 4;
  const ::std::string& frame_id() const;
  void set_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_id(::std::string&& value);
  #endif
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  ::std::string* mutable_frame_id();
  ::std::string* release_frame_id();
  void set_allocated_frame_id(::std::string* frame_id);

  // uint64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // uint64 rolling_counter = 3;
  void clear_rolling_counter();
  static const int kRollingCounterFieldNumber = 3;
  ::google::protobuf::uint64 rolling_counter() const;
  void set_rolling_counter(::google::protobuf::uint64 value);

  // uint32 ins_id = 1;
  void clear_ins_id();
  static const int kInsIdFieldNumber = 1;
  ::google::protobuf::uint32 ins_id() const;
  void set_ins_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ins_in.proto.Frame.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr frame_id_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 rolling_counter_;
  ::google::protobuf::uint32 ins_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ins_5fin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ins_in.proto.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Frame* other);
  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(NULL);
  }

  Frame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Frame_Header Header;

  // accessors -------------------------------------------------------

  // .ins_in.proto.Frame.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ins_in::proto::Frame_Header& _internal_header() const;
  public:
  const ::ins_in::proto::Frame_Header& header() const;
  ::ins_in::proto::Frame_Header* release_header();
  ::ins_in::proto::Frame_Header* mutable_header();
  void set_allocated_header(::ins_in::proto::Frame_Header* header);

  // .ins_in.proto.Ins ins = 3;
  bool has_ins() const;
  void clear_ins();
  static const int kInsFieldNumber = 3;
  private:
  const ::ins_in::proto::Ins& _internal_ins() const;
  public:
  const ::ins_in::proto::Ins& ins() const;
  ::ins_in::proto::Ins* release_ins();
  ::ins_in::proto::Ins* mutable_ins();
  void set_allocated_ins(::ins_in::proto::Ins* ins);

  // uint64 sys_timestamp = 2;
  void clear_sys_timestamp();
  static const int kSysTimestampFieldNumber = 2;
  ::google::protobuf::uint64 sys_timestamp() const;
  void set_sys_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ins_in.proto.Frame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ins_in::proto::Frame_Header* header_;
  ::ins_in::proto::Ins* ins_;
  ::google::protobuf::uint64 sys_timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ins_5fin_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ins_AngularVelocity

// double x = 1;
inline void Ins_AngularVelocity::clear_x() {
  x_ = 0;
}
inline double Ins_AngularVelocity::x() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.AngularVelocity.x)
  return x_;
}
inline void Ins_AngularVelocity::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.AngularVelocity.x)
}

// double y = 2;
inline void Ins_AngularVelocity::clear_y() {
  y_ = 0;
}
inline double Ins_AngularVelocity::y() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.AngularVelocity.y)
  return y_;
}
inline void Ins_AngularVelocity::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.AngularVelocity.y)
}

// double z = 3;
inline void Ins_AngularVelocity::clear_z() {
  z_ = 0;
}
inline double Ins_AngularVelocity::z() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.AngularVelocity.z)
  return z_;
}
inline void Ins_AngularVelocity::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.AngularVelocity.z)
}

// -------------------------------------------------------------------

// Ins_LinearAcceleration

// double x = 1;
inline void Ins_LinearAcceleration::clear_x() {
  x_ = 0;
}
inline double Ins_LinearAcceleration::x() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.LinearAcceleration.x)
  return x_;
}
inline void Ins_LinearAcceleration::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.LinearAcceleration.x)
}

// double y = 2;
inline void Ins_LinearAcceleration::clear_y() {
  y_ = 0;
}
inline double Ins_LinearAcceleration::y() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.LinearAcceleration.y)
  return y_;
}
inline void Ins_LinearAcceleration::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.LinearAcceleration.y)
}

// double z = 3;
inline void Ins_LinearAcceleration::clear_z() {
  z_ = 0;
}
inline double Ins_LinearAcceleration::z() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.LinearAcceleration.z)
  return z_;
}
inline void Ins_LinearAcceleration::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.LinearAcceleration.z)
}

// -------------------------------------------------------------------

// Ins_Orientation

// double pitch = 1;
inline void Ins_Orientation::clear_pitch() {
  pitch_ = 0;
}
inline double Ins_Orientation::pitch() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.Orientation.pitch)
  return pitch_;
}
inline void Ins_Orientation::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.Orientation.pitch)
}

// double roll = 2;
inline void Ins_Orientation::clear_roll() {
  roll_ = 0;
}
inline double Ins_Orientation::roll() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.Orientation.roll)
  return roll_;
}
inline void Ins_Orientation::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.Orientation.roll)
}

// double heading = 3;
inline void Ins_Orientation::clear_heading() {
  heading_ = 0;
}
inline double Ins_Orientation::heading() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.Orientation.heading)
  return heading_;
}
inline void Ins_Orientation::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.Orientation.heading)
}

// -------------------------------------------------------------------

// Ins_Position

// double latitude = 1;
inline void Ins_Position::clear_latitude() {
  latitude_ = 0;
}
inline double Ins_Position::latitude() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.Position.latitude)
  return latitude_;
}
inline void Ins_Position::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.Position.latitude)
}

// double longitude = 2;
inline void Ins_Position::clear_longitude() {
  longitude_ = 0;
}
inline double Ins_Position::longitude() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.Position.longitude)
  return longitude_;
}
inline void Ins_Position::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.Position.longitude)
}

// double altitude = 3;
inline void Ins_Position::clear_altitude() {
  altitude_ = 0;
}
inline double Ins_Position::altitude() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.Position.altitude)
  return altitude_;
}
inline void Ins_Position::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.Position.altitude)
}

// -------------------------------------------------------------------

// Ins_Speed

// double east_spd = 1;
inline void Ins_Speed::clear_east_spd() {
  east_spd_ = 0;
}
inline double Ins_Speed::east_spd() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.Speed.east_spd)
  return east_spd_;
}
inline void Ins_Speed::set_east_spd(double value) {
  
  east_spd_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.Speed.east_spd)
}

// double north_spd = 2;
inline void Ins_Speed::clear_north_spd() {
  north_spd_ = 0;
}
inline double Ins_Speed::north_spd() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.Speed.north_spd)
  return north_spd_;
}
inline void Ins_Speed::set_north_spd(double value) {
  
  north_spd_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.Speed.north_spd)
}

// double to_ground_spd = 3;
inline void Ins_Speed::clear_to_ground_spd() {
  to_ground_spd_ = 0;
}
inline double Ins_Speed::to_ground_spd() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.Speed.to_ground_spd)
  return to_ground_spd_;
}
inline void Ins_Speed::set_to_ground_spd(double value) {
  
  to_ground_spd_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.Speed.to_ground_spd)
}

// -------------------------------------------------------------------

// Ins_DataInfo

// uint32 gnss_age = 1;
inline void Ins_DataInfo::clear_gnss_age() {
  gnss_age_ = 0u;
}
inline ::google::protobuf::uint32 Ins_DataInfo::gnss_age() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.DataInfo.gnss_age)
  return gnss_age_;
}
inline void Ins_DataInfo::set_gnss_age(::google::protobuf::uint32 value) {
  
  gnss_age_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.DataInfo.gnss_age)
}

// uint32 car_status = 2;
inline void Ins_DataInfo::clear_car_status() {
  car_status_ = 0u;
}
inline ::google::protobuf::uint32 Ins_DataInfo::car_status() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.DataInfo.car_status)
  return car_status_;
}
inline void Ins_DataInfo::set_car_status(::google::protobuf::uint32 value) {
  
  car_status_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.DataInfo.car_status)
}

// uint32 gnss_flag_heading = 3;
inline void Ins_DataInfo::clear_gnss_flag_heading() {
  gnss_flag_heading_ = 0u;
}
inline ::google::protobuf::uint32 Ins_DataInfo::gnss_flag_heading() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.DataInfo.gnss_flag_heading)
  return gnss_flag_heading_;
}
inline void Ins_DataInfo::set_gnss_flag_heading(::google::protobuf::uint32 value) {
  
  gnss_flag_heading_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.DataInfo.gnss_flag_heading)
}

// uint32 num_sv = 4;
inline void Ins_DataInfo::clear_num_sv() {
  num_sv_ = 0u;
}
inline ::google::protobuf::uint32 Ins_DataInfo::num_sv() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.DataInfo.num_sv)
  return num_sv_;
}
inline void Ins_DataInfo::set_num_sv(::google::protobuf::uint32 value) {
  
  num_sv_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.DataInfo.num_sv)
}

// uint32 gnss_flag_pos = 5;
inline void Ins_DataInfo::clear_gnss_flag_pos() {
  gnss_flag_pos_ = 0u;
}
inline ::google::protobuf::uint32 Ins_DataInfo::gnss_flag_pos() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.DataInfo.gnss_flag_pos)
  return gnss_flag_pos_;
}
inline void Ins_DataInfo::set_gnss_flag_pos(::google::protobuf::uint32 value) {
  
  gnss_flag_pos_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.DataInfo.gnss_flag_pos)
}

// uint32 status = 6;
inline void Ins_DataInfo::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 Ins_DataInfo::status() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.DataInfo.status)
  return status_;
}
inline void Ins_DataInfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.DataInfo.status)
}

// -------------------------------------------------------------------

// Ins_Std

// double latitude_std = 1;
inline void Ins_Std::clear_latitude_std() {
  latitude_std_ = 0;
}
inline double Ins_Std::latitude_std() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.Std.latitude_std)
  return latitude_std_;
}
inline void Ins_Std::set_latitude_std(double value) {
  
  latitude_std_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.Std.latitude_std)
}

// double longitude_std = 2;
inline void Ins_Std::clear_longitude_std() {
  longitude_std_ = 0;
}
inline double Ins_Std::longitude_std() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.Std.longitude_std)
  return longitude_std_;
}
inline void Ins_Std::set_longitude_std(double value) {
  
  longitude_std_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.Std.longitude_std)
}

// double altitude_std = 3;
inline void Ins_Std::clear_altitude_std() {
  altitude_std_ = 0;
}
inline double Ins_Std::altitude_std() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.Std.altitude_std)
  return altitude_std_;
}
inline void Ins_Std::set_altitude_std(double value) {
  
  altitude_std_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.Std.altitude_std)
}

// double heading_std = 4;
inline void Ins_Std::clear_heading_std() {
  heading_std_ = 0;
}
inline double Ins_Std::heading_std() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.Std.heading_std)
  return heading_std_;
}
inline void Ins_Std::set_heading_std(double value) {
  
  heading_std_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Ins.Std.heading_std)
}

// -------------------------------------------------------------------

// Ins

// .ins_in.proto.Ins.AngularVelocity angular_velocity = 1;
inline bool Ins::has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != NULL;
}
inline void Ins::clear_angular_velocity() {
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) {
    delete angular_velocity_;
  }
  angular_velocity_ = NULL;
}
inline const ::ins_in::proto::Ins_AngularVelocity& Ins::_internal_angular_velocity() const {
  return *angular_velocity_;
}
inline const ::ins_in::proto::Ins_AngularVelocity& Ins::angular_velocity() const {
  const ::ins_in::proto::Ins_AngularVelocity* p = angular_velocity_;
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.angular_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::ins_in::proto::Ins_AngularVelocity*>(
      &::ins_in::proto::_Ins_AngularVelocity_default_instance_);
}
inline ::ins_in::proto::Ins_AngularVelocity* Ins::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:ins_in.proto.Ins.angular_velocity)
  
  ::ins_in::proto::Ins_AngularVelocity* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
inline ::ins_in::proto::Ins_AngularVelocity* Ins::mutable_angular_velocity() {
  
  if (angular_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::ins_in::proto::Ins_AngularVelocity>(GetArenaNoVirtual());
    angular_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ins_in.proto.Ins.angular_velocity)
  return angular_velocity_;
}
inline void Ins::set_allocated_angular_velocity(::ins_in::proto::Ins_AngularVelocity* angular_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete angular_velocity_;
  }
  if (angular_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      angular_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:ins_in.proto.Ins.angular_velocity)
}

// .ins_in.proto.Ins.LinearAcceleration linear_acceleration = 2;
inline bool Ins::has_linear_acceleration() const {
  return this != internal_default_instance() && linear_acceleration_ != NULL;
}
inline void Ins::clear_linear_acceleration() {
  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = NULL;
}
inline const ::ins_in::proto::Ins_LinearAcceleration& Ins::_internal_linear_acceleration() const {
  return *linear_acceleration_;
}
inline const ::ins_in::proto::Ins_LinearAcceleration& Ins::linear_acceleration() const {
  const ::ins_in::proto::Ins_LinearAcceleration* p = linear_acceleration_;
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.linear_acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::ins_in::proto::Ins_LinearAcceleration*>(
      &::ins_in::proto::_Ins_LinearAcceleration_default_instance_);
}
inline ::ins_in::proto::Ins_LinearAcceleration* Ins::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:ins_in.proto.Ins.linear_acceleration)
  
  ::ins_in::proto::Ins_LinearAcceleration* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
inline ::ins_in::proto::Ins_LinearAcceleration* Ins::mutable_linear_acceleration() {
  
  if (linear_acceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::ins_in::proto::Ins_LinearAcceleration>(GetArenaNoVirtual());
    linear_acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ins_in.proto.Ins.linear_acceleration)
  return linear_acceleration_;
}
inline void Ins::set_allocated_linear_acceleration(::ins_in::proto::Ins_LinearAcceleration* linear_acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete linear_acceleration_;
  }
  if (linear_acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  linear_acceleration_ = linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:ins_in.proto.Ins.linear_acceleration)
}

// .ins_in.proto.Ins.Orientation orientation = 3;
inline bool Ins::has_orientation() const {
  return this != internal_default_instance() && orientation_ != NULL;
}
inline void Ins::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) {
    delete orientation_;
  }
  orientation_ = NULL;
}
inline const ::ins_in::proto::Ins_Orientation& Ins::_internal_orientation() const {
  return *orientation_;
}
inline const ::ins_in::proto::Ins_Orientation& Ins::orientation() const {
  const ::ins_in::proto::Ins_Orientation* p = orientation_;
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.orientation)
  return p != NULL ? *p : *reinterpret_cast<const ::ins_in::proto::Ins_Orientation*>(
      &::ins_in::proto::_Ins_Orientation_default_instance_);
}
inline ::ins_in::proto::Ins_Orientation* Ins::release_orientation() {
  // @@protoc_insertion_point(field_release:ins_in.proto.Ins.orientation)
  
  ::ins_in::proto::Ins_Orientation* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline ::ins_in::proto::Ins_Orientation* Ins::mutable_orientation() {
  
  if (orientation_ == NULL) {
    auto* p = CreateMaybeMessage<::ins_in::proto::Ins_Orientation>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ins_in.proto.Ins.orientation)
  return orientation_;
}
inline void Ins::set_allocated_orientation(::ins_in::proto::Ins_Orientation* orientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete orientation_;
  }
  if (orientation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orientation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:ins_in.proto.Ins.orientation)
}

// .ins_in.proto.Ins.Position position = 4;
inline bool Ins::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void Ins::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::ins_in::proto::Ins_Position& Ins::_internal_position() const {
  return *position_;
}
inline const ::ins_in::proto::Ins_Position& Ins::position() const {
  const ::ins_in::proto::Ins_Position* p = position_;
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.position)
  return p != NULL ? *p : *reinterpret_cast<const ::ins_in::proto::Ins_Position*>(
      &::ins_in::proto::_Ins_Position_default_instance_);
}
inline ::ins_in::proto::Ins_Position* Ins::release_position() {
  // @@protoc_insertion_point(field_release:ins_in.proto.Ins.position)
  
  ::ins_in::proto::Ins_Position* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::ins_in::proto::Ins_Position* Ins::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::ins_in::proto::Ins_Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ins_in.proto.Ins.position)
  return position_;
}
inline void Ins::set_allocated_position(::ins_in::proto::Ins_Position* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ins_in.proto.Ins.position)
}

// .ins_in.proto.Ins.Speed speed = 5;
inline bool Ins::has_speed() const {
  return this != internal_default_instance() && speed_ != NULL;
}
inline void Ins::clear_speed() {
  if (GetArenaNoVirtual() == NULL && speed_ != NULL) {
    delete speed_;
  }
  speed_ = NULL;
}
inline const ::ins_in::proto::Ins_Speed& Ins::_internal_speed() const {
  return *speed_;
}
inline const ::ins_in::proto::Ins_Speed& Ins::speed() const {
  const ::ins_in::proto::Ins_Speed* p = speed_;
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.speed)
  return p != NULL ? *p : *reinterpret_cast<const ::ins_in::proto::Ins_Speed*>(
      &::ins_in::proto::_Ins_Speed_default_instance_);
}
inline ::ins_in::proto::Ins_Speed* Ins::release_speed() {
  // @@protoc_insertion_point(field_release:ins_in.proto.Ins.speed)
  
  ::ins_in::proto::Ins_Speed* temp = speed_;
  speed_ = NULL;
  return temp;
}
inline ::ins_in::proto::Ins_Speed* Ins::mutable_speed() {
  
  if (speed_ == NULL) {
    auto* p = CreateMaybeMessage<::ins_in::proto::Ins_Speed>(GetArenaNoVirtual());
    speed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ins_in.proto.Ins.speed)
  return speed_;
}
inline void Ins::set_allocated_speed(::ins_in::proto::Ins_Speed* speed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete speed_;
  }
  if (speed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      speed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed, submessage_arena);
    }
    
  } else {
    
  }
  speed_ = speed;
  // @@protoc_insertion_point(field_set_allocated:ins_in.proto.Ins.speed)
}

// .ins_in.proto.Ins.DataInfo data_info = 6;
inline bool Ins::has_data_info() const {
  return this != internal_default_instance() && data_info_ != NULL;
}
inline void Ins::clear_data_info() {
  if (GetArenaNoVirtual() == NULL && data_info_ != NULL) {
    delete data_info_;
  }
  data_info_ = NULL;
}
inline const ::ins_in::proto::Ins_DataInfo& Ins::_internal_data_info() const {
  return *data_info_;
}
inline const ::ins_in::proto::Ins_DataInfo& Ins::data_info() const {
  const ::ins_in::proto::Ins_DataInfo* p = data_info_;
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.data_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ins_in::proto::Ins_DataInfo*>(
      &::ins_in::proto::_Ins_DataInfo_default_instance_);
}
inline ::ins_in::proto::Ins_DataInfo* Ins::release_data_info() {
  // @@protoc_insertion_point(field_release:ins_in.proto.Ins.data_info)
  
  ::ins_in::proto::Ins_DataInfo* temp = data_info_;
  data_info_ = NULL;
  return temp;
}
inline ::ins_in::proto::Ins_DataInfo* Ins::mutable_data_info() {
  
  if (data_info_ == NULL) {
    auto* p = CreateMaybeMessage<::ins_in::proto::Ins_DataInfo>(GetArenaNoVirtual());
    data_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ins_in.proto.Ins.data_info)
  return data_info_;
}
inline void Ins::set_allocated_data_info(::ins_in::proto::Ins_DataInfo* data_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_info_;
  }
  if (data_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_info, submessage_arena);
    }
    
  } else {
    
  }
  data_info_ = data_info;
  // @@protoc_insertion_point(field_set_allocated:ins_in.proto.Ins.data_info)
}

// .ins_in.proto.Ins.Std std = 7;
inline bool Ins::has_std() const {
  return this != internal_default_instance() && std_ != NULL;
}
inline void Ins::clear_std() {
  if (GetArenaNoVirtual() == NULL && std_ != NULL) {
    delete std_;
  }
  std_ = NULL;
}
inline const ::ins_in::proto::Ins_Std& Ins::_internal_std() const {
  return *std_;
}
inline const ::ins_in::proto::Ins_Std& Ins::std() const {
  const ::ins_in::proto::Ins_Std* p = std_;
  // @@protoc_insertion_point(field_get:ins_in.proto.Ins.std)
  return p != NULL ? *p : *reinterpret_cast<const ::ins_in::proto::Ins_Std*>(
      &::ins_in::proto::_Ins_Std_default_instance_);
}
inline ::ins_in::proto::Ins_Std* Ins::release_std() {
  // @@protoc_insertion_point(field_release:ins_in.proto.Ins.std)
  
  ::ins_in::proto::Ins_Std* temp = std_;
  std_ = NULL;
  return temp;
}
inline ::ins_in::proto::Ins_Std* Ins::mutable_std() {
  
  if (std_ == NULL) {
    auto* p = CreateMaybeMessage<::ins_in::proto::Ins_Std>(GetArenaNoVirtual());
    std_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ins_in.proto.Ins.std)
  return std_;
}
inline void Ins::set_allocated_std(::ins_in::proto::Ins_Std* std) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete std_;
  }
  if (std) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      std = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, std, submessage_arena);
    }
    
  } else {
    
  }
  std_ = std;
  // @@protoc_insertion_point(field_set_allocated:ins_in.proto.Ins.std)
}

// -------------------------------------------------------------------

// Frame_Header

// uint32 ins_id = 1;
inline void Frame_Header::clear_ins_id() {
  ins_id_ = 0u;
}
inline ::google::protobuf::uint32 Frame_Header::ins_id() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Frame.Header.ins_id)
  return ins_id_;
}
inline void Frame_Header::set_ins_id(::google::protobuf::uint32 value) {
  
  ins_id_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Frame.Header.ins_id)
}

// uint64 timestamp = 2;
inline void Frame_Header::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Frame_Header::timestamp() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Frame.Header.timestamp)
  return timestamp_;
}
inline void Frame_Header::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Frame.Header.timestamp)
}

// uint64 rolling_counter = 3;
inline void Frame_Header::clear_rolling_counter() {
  rolling_counter_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Frame_Header::rolling_counter() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Frame.Header.rolling_counter)
  return rolling_counter_;
}
inline void Frame_Header::set_rolling_counter(::google::protobuf::uint64 value) {
  
  rolling_counter_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Frame.Header.rolling_counter)
}

// string frame_id = 4;
inline void Frame_Header::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Frame_Header::frame_id() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Frame.Header.frame_id)
  return frame_id_.GetNoArena();
}
inline void Frame_Header::set_frame_id(const ::std::string& value) {
  
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ins_in.proto.Frame.Header.frame_id)
}
#if LANG_CXX11
inline void Frame_Header::set_frame_id(::std::string&& value) {
  
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ins_in.proto.Frame.Header.frame_id)
}
#endif
inline void Frame_Header::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ins_in.proto.Frame.Header.frame_id)
}
inline void Frame_Header::set_frame_id(const char* value, size_t size) {
  
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ins_in.proto.Frame.Header.frame_id)
}
inline ::std::string* Frame_Header::mutable_frame_id() {
  
  // @@protoc_insertion_point(field_mutable:ins_in.proto.Frame.Header.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Frame_Header::release_frame_id() {
  // @@protoc_insertion_point(field_release:ins_in.proto.Frame.Header.frame_id)
  
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Frame_Header::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    
  } else {
    
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:ins_in.proto.Frame.Header.frame_id)
}

// -------------------------------------------------------------------

// Frame

// .ins_in.proto.Frame.Header header = 1;
inline bool Frame::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void Frame::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::ins_in::proto::Frame_Header& Frame::_internal_header() const {
  return *header_;
}
inline const ::ins_in::proto::Frame_Header& Frame::header() const {
  const ::ins_in::proto::Frame_Header* p = header_;
  // @@protoc_insertion_point(field_get:ins_in.proto.Frame.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ins_in::proto::Frame_Header*>(
      &::ins_in::proto::_Frame_Header_default_instance_);
}
inline ::ins_in::proto::Frame_Header* Frame::release_header() {
  // @@protoc_insertion_point(field_release:ins_in.proto.Frame.header)
  
  ::ins_in::proto::Frame_Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ins_in::proto::Frame_Header* Frame::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ins_in::proto::Frame_Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ins_in.proto.Frame.header)
  return header_;
}
inline void Frame::set_allocated_header(::ins_in::proto::Frame_Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ins_in.proto.Frame.header)
}

// uint64 sys_timestamp = 2;
inline void Frame::clear_sys_timestamp() {
  sys_timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Frame::sys_timestamp() const {
  // @@protoc_insertion_point(field_get:ins_in.proto.Frame.sys_timestamp)
  return sys_timestamp_;
}
inline void Frame::set_sys_timestamp(::google::protobuf::uint64 value) {
  
  sys_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ins_in.proto.Frame.sys_timestamp)
}

// .ins_in.proto.Ins ins = 3;
inline bool Frame::has_ins() const {
  return this != internal_default_instance() && ins_ != NULL;
}
inline void Frame::clear_ins() {
  if (GetArenaNoVirtual() == NULL && ins_ != NULL) {
    delete ins_;
  }
  ins_ = NULL;
}
inline const ::ins_in::proto::Ins& Frame::_internal_ins() const {
  return *ins_;
}
inline const ::ins_in::proto::Ins& Frame::ins() const {
  const ::ins_in::proto::Ins* p = ins_;
  // @@protoc_insertion_point(field_get:ins_in.proto.Frame.ins)
  return p != NULL ? *p : *reinterpret_cast<const ::ins_in::proto::Ins*>(
      &::ins_in::proto::_Ins_default_instance_);
}
inline ::ins_in::proto::Ins* Frame::release_ins() {
  // @@protoc_insertion_point(field_release:ins_in.proto.Frame.ins)
  
  ::ins_in::proto::Ins* temp = ins_;
  ins_ = NULL;
  return temp;
}
inline ::ins_in::proto::Ins* Frame::mutable_ins() {
  
  if (ins_ == NULL) {
    auto* p = CreateMaybeMessage<::ins_in::proto::Ins>(GetArenaNoVirtual());
    ins_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ins_in.proto.Frame.ins)
  return ins_;
}
inline void Frame::set_allocated_ins(::ins_in::proto::Ins* ins) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ins_;
  }
  if (ins) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ins = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ins, submessage_arena);
    }
    
  } else {
    
  }
  ins_ = ins;
  // @@protoc_insertion_point(field_set_allocated:ins_in.proto.Frame.ins)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ins_in

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ins_5fin_2eproto
