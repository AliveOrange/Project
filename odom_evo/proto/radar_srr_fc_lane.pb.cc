// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: radar_srr_fc_lane.proto

#include "radar_srr_fc_lane.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_radar_5fsrr_5ffc_5flane_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_radar_5fsrr_5ffc_5flane_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SrrHeader;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_radar_5fsrr_5ffc_5flane_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SrrLane;
}  // namespace protobuf_radar_5fsrr_5ffc_5flane_2eproto
namespace radar_srr_fc_lane {
namespace proto {
class SrrHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SrrHeader>
      _instance;
} _SrrHeader_default_instance_;
class SrrLaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SrrLane>
      _instance;
} _SrrLane_default_instance_;
class srr_fc_frame_laneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<srr_fc_frame_lane>
      _instance;
} _srr_fc_frame_lane_default_instance_;
}  // namespace proto
}  // namespace radar_srr_fc_lane
namespace protobuf_radar_5fsrr_5ffc_5flane_2eproto {
static void InitDefaultsSrrHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::radar_srr_fc_lane::proto::_SrrHeader_default_instance_;
    new (ptr) ::radar_srr_fc_lane::proto::SrrHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::radar_srr_fc_lane::proto::SrrHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SrrHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSrrHeader}, {}};

static void InitDefaultsSrrLane() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::radar_srr_fc_lane::proto::_SrrLane_default_instance_;
    new (ptr) ::radar_srr_fc_lane::proto::SrrLane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::radar_srr_fc_lane::proto::SrrLane::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SrrLane =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSrrLane}, {}};

static void InitDefaultssrr_fc_frame_lane() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::radar_srr_fc_lane::proto::_srr_fc_frame_lane_default_instance_;
    new (ptr) ::radar_srr_fc_lane::proto::srr_fc_frame_lane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::radar_srr_fc_lane::proto::srr_fc_frame_lane::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_srr_fc_frame_lane =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultssrr_fc_frame_lane}, {
      &protobuf_radar_5fsrr_5ffc_5flane_2eproto::scc_info_SrrHeader.base,
      &protobuf_radar_5fsrr_5ffc_5flane_2eproto::scc_info_SrrLane.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SrrHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SrrLane.base);
  ::google::protobuf::internal::InitSCC(&scc_info_srr_fc_frame_lane.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrHeader, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrHeader, rolling_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrHeader, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrHeader, obj_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrHeader, line_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrHeader, fs_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrLane, line_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrLane, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrLane, c0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrLane, c1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrLane, c2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrLane, c3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrLane, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrLane, start_long_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrLane, start_lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrLane, end_long_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::SrrLane, end_lat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::srr_fc_frame_lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::srr_fc_frame_lane, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::srr_fc_frame_lane, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_srr_fc_lane::proto::srr_fc_frame_lane, lanes_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::radar_srr_fc_lane::proto::SrrHeader)},
  { 11, -1, sizeof(::radar_srr_fc_lane::proto::SrrLane)},
  { 27, -1, sizeof(::radar_srr_fc_lane::proto::srr_fc_frame_lane)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::radar_srr_fc_lane::proto::_SrrHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::radar_srr_fc_lane::proto::_SrrLane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::radar_srr_fc_lane::proto::_srr_fc_frame_lane_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "radar_srr_fc_lane.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027radar_srr_fc_lane.proto\022\027radar_srr_fc_"
      "lane.proto\"}\n\tSrrHeader\022\021\n\ttimestamp\030\001 \001"
      "(\004\022\027\n\017rolling_counter\030\002 \001(\r\022\021\n\tsensor_id"
      "\030\003 \001(\r\022\017\n\007obj_num\030\004 \001(\r\022\020\n\010line_num\030\005 \001("
      "\r\022\016\n\006fs_num\030\006 \001(\r\"\267\001\n\007SrrLane\022\017\n\007line_id"
      "\030\001 \001(\r\022\r\n\005index\030\002 \001(\r\022\n\n\002C0\030\003 \001(\001\022\n\n\002C1\030"
      "\004 \001(\001\022\n\n\002C2\030\005 \001(\001\022\n\n\002C3\030\006 \001(\001\022\022\n\nconfide"
      "nce\030\007 \001(\r\022\022\n\nstart_long\030\010 \001(\001\022\021\n\tstart_l"
      "at\030\t \001(\001\022\020\n\010end_long\030\n \001(\001\022\017\n\007end_lat\030\013 "
      "\001(\001\"\213\001\n\021srr_fc_frame_lane\0222\n\006header\030\001 \001("
      "\0132\".radar_srr_fc_lane.proto.SrrHeader\022\021\n"
      "\ttimestamp\030\002 \001(\004\022/\n\005lanes\030\003 \003(\0132 .radar_"
      "srr_fc_lane.proto.SrrLaneb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 513);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "radar_srr_fc_lane.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_radar_5fsrr_5ffc_5flane_2eproto
namespace radar_srr_fc_lane {
namespace proto {

// ===================================================================

void SrrHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SrrHeader::kTimestampFieldNumber;
const int SrrHeader::kRollingCounterFieldNumber;
const int SrrHeader::kSensorIdFieldNumber;
const int SrrHeader::kObjNumFieldNumber;
const int SrrHeader::kLineNumFieldNumber;
const int SrrHeader::kFsNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrrHeader::SrrHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_radar_5fsrr_5ffc_5flane_2eproto::scc_info_SrrHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:radar_srr_fc_lane.proto.SrrHeader)
}
SrrHeader::SrrHeader(const SrrHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&fs_num_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(fs_num_));
  // @@protoc_insertion_point(copy_constructor:radar_srr_fc_lane.proto.SrrHeader)
}

void SrrHeader::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fs_num_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(fs_num_));
}

SrrHeader::~SrrHeader() {
  // @@protoc_insertion_point(destructor:radar_srr_fc_lane.proto.SrrHeader)
  SharedDtor();
}

void SrrHeader::SharedDtor() {
}

void SrrHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SrrHeader::descriptor() {
  ::protobuf_radar_5fsrr_5ffc_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_radar_5fsrr_5ffc_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SrrHeader& SrrHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_radar_5fsrr_5ffc_5flane_2eproto::scc_info_SrrHeader.base);
  return *internal_default_instance();
}


void SrrHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:radar_srr_fc_lane.proto.SrrHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fs_num_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(fs_num_));
  _internal_metadata_.Clear();
}

bool SrrHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:radar_srr_fc_lane.proto.SrrHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rolling_counter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolling_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 obj_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 line_num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fs_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fs_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:radar_srr_fc_lane.proto.SrrHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:radar_srr_fc_lane.proto.SrrHeader)
  return false;
#undef DO_
}

void SrrHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:radar_srr_fc_lane.proto.SrrHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rolling_counter(), output);
  }

  // uint32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sensor_id(), output);
  }

  // uint32 obj_num = 4;
  if (this->obj_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->obj_num(), output);
  }

  // uint32 line_num = 5;
  if (this->line_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->line_num(), output);
  }

  // uint32 fs_num = 6;
  if (this->fs_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fs_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:radar_srr_fc_lane.proto.SrrHeader)
}

::google::protobuf::uint8* SrrHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:radar_srr_fc_lane.proto.SrrHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rolling_counter(), target);
  }

  // uint32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sensor_id(), target);
  }

  // uint32 obj_num = 4;
  if (this->obj_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->obj_num(), target);
  }

  // uint32 line_num = 5;
  if (this->line_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->line_num(), target);
  }

  // uint32 fs_num = 6;
  if (this->fs_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fs_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar_srr_fc_lane.proto.SrrHeader)
  return target;
}

size_t SrrHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radar_srr_fc_lane.proto.SrrHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rolling_counter());
  }

  // uint32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_id());
  }

  // uint32 obj_num = 4;
  if (this->obj_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->obj_num());
  }

  // uint32 line_num = 5;
  if (this->line_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->line_num());
  }

  // uint32 fs_num = 6;
  if (this->fs_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fs_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SrrHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:radar_srr_fc_lane.proto.SrrHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const SrrHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SrrHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:radar_srr_fc_lane.proto.SrrHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:radar_srr_fc_lane.proto.SrrHeader)
    MergeFrom(*source);
  }
}

void SrrHeader::MergeFrom(const SrrHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:radar_srr_fc_lane.proto.SrrHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.rolling_counter() != 0) {
    set_rolling_counter(from.rolling_counter());
  }
  if (from.sensor_id() != 0) {
    set_sensor_id(from.sensor_id());
  }
  if (from.obj_num() != 0) {
    set_obj_num(from.obj_num());
  }
  if (from.line_num() != 0) {
    set_line_num(from.line_num());
  }
  if (from.fs_num() != 0) {
    set_fs_num(from.fs_num());
  }
}

void SrrHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:radar_srr_fc_lane.proto.SrrHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrrHeader::CopyFrom(const SrrHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar_srr_fc_lane.proto.SrrHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrrHeader::IsInitialized() const {
  return true;
}

void SrrHeader::Swap(SrrHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrrHeader::InternalSwap(SrrHeader* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(rolling_counter_, other->rolling_counter_);
  swap(sensor_id_, other->sensor_id_);
  swap(obj_num_, other->obj_num_);
  swap(line_num_, other->line_num_);
  swap(fs_num_, other->fs_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SrrHeader::GetMetadata() const {
  protobuf_radar_5fsrr_5ffc_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_radar_5fsrr_5ffc_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SrrLane::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SrrLane::kLineIdFieldNumber;
const int SrrLane::kIndexFieldNumber;
const int SrrLane::kC0FieldNumber;
const int SrrLane::kC1FieldNumber;
const int SrrLane::kC2FieldNumber;
const int SrrLane::kC3FieldNumber;
const int SrrLane::kConfidenceFieldNumber;
const int SrrLane::kStartLongFieldNumber;
const int SrrLane::kStartLatFieldNumber;
const int SrrLane::kEndLongFieldNumber;
const int SrrLane::kEndLatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrrLane::SrrLane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_radar_5fsrr_5ffc_5flane_2eproto::scc_info_SrrLane.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:radar_srr_fc_lane.proto.SrrLane)
}
SrrLane::SrrLane(const SrrLane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&line_id_, &from.line_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&line_id_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:radar_srr_fc_lane.proto.SrrLane)
}

void SrrLane::SharedCtor() {
  ::memset(&line_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&line_id_)) + sizeof(confidence_));
}

SrrLane::~SrrLane() {
  // @@protoc_insertion_point(destructor:radar_srr_fc_lane.proto.SrrLane)
  SharedDtor();
}

void SrrLane::SharedDtor() {
}

void SrrLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SrrLane::descriptor() {
  ::protobuf_radar_5fsrr_5ffc_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_radar_5fsrr_5ffc_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SrrLane& SrrLane::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_radar_5fsrr_5ffc_5flane_2eproto::scc_info_SrrLane.base);
  return *internal_default_instance();
}


void SrrLane::Clear() {
// @@protoc_insertion_point(message_clear_start:radar_srr_fc_lane.proto.SrrLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&line_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&line_id_)) + sizeof(confidence_));
  _internal_metadata_.Clear();
}

bool SrrLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:radar_srr_fc_lane.proto.SrrLane)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 line_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double C0 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double C1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double C2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double C3 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 confidence = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_long = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_long_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_lat = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_long = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_long_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_lat = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:radar_srr_fc_lane.proto.SrrLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:radar_srr_fc_lane.proto.SrrLane)
  return false;
#undef DO_
}

void SrrLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:radar_srr_fc_lane.proto.SrrLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 line_id = 1;
  if (this->line_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->line_id(), output);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // double C0 = 3;
  if (this->c0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->c0(), output);
  }

  // double C1 = 4;
  if (this->c1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->c1(), output);
  }

  // double C2 = 5;
  if (this->c2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->c2(), output);
  }

  // double C3 = 6;
  if (this->c3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->c3(), output);
  }

  // uint32 confidence = 7;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->confidence(), output);
  }

  // double start_long = 8;
  if (this->start_long() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->start_long(), output);
  }

  // double start_lat = 9;
  if (this->start_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->start_lat(), output);
  }

  // double end_long = 10;
  if (this->end_long() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->end_long(), output);
  }

  // double end_lat = 11;
  if (this->end_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->end_lat(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:radar_srr_fc_lane.proto.SrrLane)
}

::google::protobuf::uint8* SrrLane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:radar_srr_fc_lane.proto.SrrLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 line_id = 1;
  if (this->line_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->line_id(), target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // double C0 = 3;
  if (this->c0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->c0(), target);
  }

  // double C1 = 4;
  if (this->c1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->c1(), target);
  }

  // double C2 = 5;
  if (this->c2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->c2(), target);
  }

  // double C3 = 6;
  if (this->c3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->c3(), target);
  }

  // uint32 confidence = 7;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->confidence(), target);
  }

  // double start_long = 8;
  if (this->start_long() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->start_long(), target);
  }

  // double start_lat = 9;
  if (this->start_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->start_lat(), target);
  }

  // double end_long = 10;
  if (this->end_long() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->end_long(), target);
  }

  // double end_lat = 11;
  if (this->end_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->end_lat(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar_srr_fc_lane.proto.SrrLane)
  return target;
}

size_t SrrLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radar_srr_fc_lane.proto.SrrLane)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 line_id = 1;
  if (this->line_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->line_id());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  // double C0 = 3;
  if (this->c0() != 0) {
    total_size += 1 + 8;
  }

  // double C1 = 4;
  if (this->c1() != 0) {
    total_size += 1 + 8;
  }

  // double C2 = 5;
  if (this->c2() != 0) {
    total_size += 1 + 8;
  }

  // double C3 = 6;
  if (this->c3() != 0) {
    total_size += 1 + 8;
  }

  // double start_long = 8;
  if (this->start_long() != 0) {
    total_size += 1 + 8;
  }

  // double start_lat = 9;
  if (this->start_lat() != 0) {
    total_size += 1 + 8;
  }

  // double end_long = 10;
  if (this->end_long() != 0) {
    total_size += 1 + 8;
  }

  // double end_lat = 11;
  if (this->end_lat() != 0) {
    total_size += 1 + 8;
  }

  // uint32 confidence = 7;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->confidence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SrrLane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:radar_srr_fc_lane.proto.SrrLane)
  GOOGLE_DCHECK_NE(&from, this);
  const SrrLane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SrrLane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:radar_srr_fc_lane.proto.SrrLane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:radar_srr_fc_lane.proto.SrrLane)
    MergeFrom(*source);
  }
}

void SrrLane::MergeFrom(const SrrLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:radar_srr_fc_lane.proto.SrrLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.line_id() != 0) {
    set_line_id(from.line_id());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.c0() != 0) {
    set_c0(from.c0());
  }
  if (from.c1() != 0) {
    set_c1(from.c1());
  }
  if (from.c2() != 0) {
    set_c2(from.c2());
  }
  if (from.c3() != 0) {
    set_c3(from.c3());
  }
  if (from.start_long() != 0) {
    set_start_long(from.start_long());
  }
  if (from.start_lat() != 0) {
    set_start_lat(from.start_lat());
  }
  if (from.end_long() != 0) {
    set_end_long(from.end_long());
  }
  if (from.end_lat() != 0) {
    set_end_lat(from.end_lat());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void SrrLane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:radar_srr_fc_lane.proto.SrrLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrrLane::CopyFrom(const SrrLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar_srr_fc_lane.proto.SrrLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrrLane::IsInitialized() const {
  return true;
}

void SrrLane::Swap(SrrLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrrLane::InternalSwap(SrrLane* other) {
  using std::swap;
  swap(line_id_, other->line_id_);
  swap(index_, other->index_);
  swap(c0_, other->c0_);
  swap(c1_, other->c1_);
  swap(c2_, other->c2_);
  swap(c3_, other->c3_);
  swap(start_long_, other->start_long_);
  swap(start_lat_, other->start_lat_);
  swap(end_long_, other->end_long_);
  swap(end_lat_, other->end_lat_);
  swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SrrLane::GetMetadata() const {
  protobuf_radar_5fsrr_5ffc_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_radar_5fsrr_5ffc_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void srr_fc_frame_lane::InitAsDefaultInstance() {
  ::radar_srr_fc_lane::proto::_srr_fc_frame_lane_default_instance_._instance.get_mutable()->header_ = const_cast< ::radar_srr_fc_lane::proto::SrrHeader*>(
      ::radar_srr_fc_lane::proto::SrrHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int srr_fc_frame_lane::kHeaderFieldNumber;
const int srr_fc_frame_lane::kTimestampFieldNumber;
const int srr_fc_frame_lane::kLanesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

srr_fc_frame_lane::srr_fc_frame_lane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_radar_5fsrr_5ffc_5flane_2eproto::scc_info_srr_fc_frame_lane.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:radar_srr_fc_lane.proto.srr_fc_frame_lane)
}
srr_fc_frame_lane::srr_fc_frame_lane(const srr_fc_frame_lane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lanes_(from.lanes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::radar_srr_fc_lane::proto::SrrHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:radar_srr_fc_lane.proto.srr_fc_frame_lane)
}

void srr_fc_frame_lane::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(timestamp_));
}

srr_fc_frame_lane::~srr_fc_frame_lane() {
  // @@protoc_insertion_point(destructor:radar_srr_fc_lane.proto.srr_fc_frame_lane)
  SharedDtor();
}

void srr_fc_frame_lane::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void srr_fc_frame_lane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* srr_fc_frame_lane::descriptor() {
  ::protobuf_radar_5fsrr_5ffc_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_radar_5fsrr_5ffc_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const srr_fc_frame_lane& srr_fc_frame_lane::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_radar_5fsrr_5ffc_5flane_2eproto::scc_info_srr_fc_frame_lane.base);
  return *internal_default_instance();
}


void srr_fc_frame_lane::Clear() {
// @@protoc_insertion_point(message_clear_start:radar_srr_fc_lane.proto.srr_fc_frame_lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lanes_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool srr_fc_frame_lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:radar_srr_fc_lane.proto.srr_fc_frame_lane)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .radar_srr_fc_lane.proto.SrrHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .radar_srr_fc_lane.proto.SrrLane lanes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lanes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:radar_srr_fc_lane.proto.srr_fc_frame_lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:radar_srr_fc_lane.proto.srr_fc_frame_lane)
  return false;
#undef DO_
}

void srr_fc_frame_lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:radar_srr_fc_lane.proto.srr_fc_frame_lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .radar_srr_fc_lane.proto.SrrHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // repeated .radar_srr_fc_lane.proto.SrrLane lanes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lanes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->lanes(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:radar_srr_fc_lane.proto.srr_fc_frame_lane)
}

::google::protobuf::uint8* srr_fc_frame_lane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:radar_srr_fc_lane.proto.srr_fc_frame_lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .radar_srr_fc_lane.proto.SrrHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // repeated .radar_srr_fc_lane.proto.SrrLane lanes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lanes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->lanes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar_srr_fc_lane.proto.srr_fc_frame_lane)
  return target;
}

size_t srr_fc_frame_lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radar_srr_fc_lane.proto.srr_fc_frame_lane)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .radar_srr_fc_lane.proto.SrrLane lanes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->lanes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lanes(static_cast<int>(i)));
    }
  }

  // .radar_srr_fc_lane.proto.SrrHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void srr_fc_frame_lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:radar_srr_fc_lane.proto.srr_fc_frame_lane)
  GOOGLE_DCHECK_NE(&from, this);
  const srr_fc_frame_lane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const srr_fc_frame_lane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:radar_srr_fc_lane.proto.srr_fc_frame_lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:radar_srr_fc_lane.proto.srr_fc_frame_lane)
    MergeFrom(*source);
  }
}

void srr_fc_frame_lane::MergeFrom(const srr_fc_frame_lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:radar_srr_fc_lane.proto.srr_fc_frame_lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lanes_.MergeFrom(from.lanes_);
  if (from.has_header()) {
    mutable_header()->::radar_srr_fc_lane::proto::SrrHeader::MergeFrom(from.header());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void srr_fc_frame_lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:radar_srr_fc_lane.proto.srr_fc_frame_lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void srr_fc_frame_lane::CopyFrom(const srr_fc_frame_lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar_srr_fc_lane.proto.srr_fc_frame_lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srr_fc_frame_lane::IsInitialized() const {
  return true;
}

void srr_fc_frame_lane::Swap(srr_fc_frame_lane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void srr_fc_frame_lane::InternalSwap(srr_fc_frame_lane* other) {
  using std::swap;
  CastToBase(&lanes_)->InternalSwap(CastToBase(&other->lanes_));
  swap(header_, other->header_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata srr_fc_frame_lane::GetMetadata() const {
  protobuf_radar_5fsrr_5ffc_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_radar_5fsrr_5ffc_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace radar_srr_fc_lane
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::radar_srr_fc_lane::proto::SrrHeader* Arena::CreateMaybeMessage< ::radar_srr_fc_lane::proto::SrrHeader >(Arena* arena) {
  return Arena::CreateInternal< ::radar_srr_fc_lane::proto::SrrHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::radar_srr_fc_lane::proto::SrrLane* Arena::CreateMaybeMessage< ::radar_srr_fc_lane::proto::SrrLane >(Arena* arena) {
  return Arena::CreateInternal< ::radar_srr_fc_lane::proto::SrrLane >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::radar_srr_fc_lane::proto::srr_fc_frame_lane* Arena::CreateMaybeMessage< ::radar_srr_fc_lane::proto::srr_fc_frame_lane >(Arena* arena) {
  return Arena::CreateInternal< ::radar_srr_fc_lane::proto::srr_fc_frame_lane >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
