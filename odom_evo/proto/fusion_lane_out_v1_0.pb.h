// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fusion_lane_out_v1_0.proto

#ifndef PROTOBUF_INCLUDED_fusion_5flane_5fout_5fv1_5f0_2eproto
#define PROTOBUF_INCLUDED_fusion_5flane_5fout_5fv1_5f0_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto 

namespace protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto
namespace fusion_lane_out {
namespace proto {
class Lane;
class LaneDefaultTypeInternal;
extern LaneDefaultTypeInternal _Lane_default_instance_;
class LaneFrame;
class LaneFrameDefaultTypeInternal;
extern LaneFrameDefaultTypeInternal _LaneFrame_default_instance_;
class LaneHeader;
class LaneHeaderDefaultTypeInternal;
extern LaneHeaderDefaultTypeInternal _LaneHeader_default_instance_;
}  // namespace proto
}  // namespace fusion_lane_out
namespace google {
namespace protobuf {
template<> ::fusion_lane_out::proto::Lane* Arena::CreateMaybeMessage<::fusion_lane_out::proto::Lane>(Arena*);
template<> ::fusion_lane_out::proto::LaneFrame* Arena::CreateMaybeMessage<::fusion_lane_out::proto::LaneFrame>(Arena*);
template<> ::fusion_lane_out::proto::LaneHeader* Arena::CreateMaybeMessage<::fusion_lane_out::proto::LaneHeader>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace fusion_lane_out {
namespace proto {

// ===================================================================

class LaneHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fusion_lane_out.proto.LaneHeader) */ {
 public:
  LaneHeader();
  virtual ~LaneHeader();

  LaneHeader(const LaneHeader& from);

  inline LaneHeader& operator=(const LaneHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneHeader(LaneHeader&& from) noexcept
    : LaneHeader() {
    *this = ::std::move(from);
  }

  inline LaneHeader& operator=(LaneHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneHeader* internal_default_instance() {
    return reinterpret_cast<const LaneHeader*>(
               &_LaneHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LaneHeader* other);
  friend void swap(LaneHeader& a, LaneHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneHeader* New() const final {
    return CreateMaybeMessage<LaneHeader>(NULL);
  }

  LaneHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneHeader& from);
  void MergeFrom(const LaneHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // uint32 rolling_counter = 2;
  void clear_rolling_counter();
  static const int kRollingCounterFieldNumber = 2;
  ::google::protobuf::uint32 rolling_counter() const;
  void set_rolling_counter(::google::protobuf::uint32 value);

  // uint32 sensor_id = 3;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 3;
  ::google::protobuf::uint32 sensor_id() const;
  void set_sensor_id(::google::protobuf::uint32 value);

  // uint32 line_num = 4;
  void clear_line_num();
  static const int kLineNumFieldNumber = 4;
  ::google::protobuf::uint32 line_num() const;
  void set_line_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fusion_lane_out.proto.LaneHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 rolling_counter_;
  ::google::protobuf::uint32 sensor_id_;
  ::google::protobuf::uint32 line_num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Lane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fusion_lane_out.proto.Lane) */ {
 public:
  Lane();
  virtual ~Lane();

  Lane(const Lane& from);

  inline Lane& operator=(const Lane& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lane(Lane&& from) noexcept
    : Lane() {
    *this = ::std::move(from);
  }

  inline Lane& operator=(Lane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lane* internal_default_instance() {
    return reinterpret_cast<const Lane*>(
               &_Lane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Lane* other);
  friend void swap(Lane& a, Lane& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lane* New() const final {
    return CreateMaybeMessage<Lane>(NULL);
  }

  Lane* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Lane>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Lane& from);
  void MergeFrom(const Lane& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 line_id = 1;
  void clear_line_id();
  static const int kLineIdFieldNumber = 1;
  ::google::protobuf::uint32 line_id() const;
  void set_line_id(::google::protobuf::uint32 value);

  // uint32 coordinate_type = 2;
  void clear_coordinate_type();
  static const int kCoordinateTypeFieldNumber = 2;
  ::google::protobuf::uint32 coordinate_type() const;
  void set_coordinate_type(::google::protobuf::uint32 value);

  // double C0 = 3;
  void clear_c0();
  static const int kC0FieldNumber = 3;
  double c0() const;
  void set_c0(double value);

  // double C1 = 4;
  void clear_c1();
  static const int kC1FieldNumber = 4;
  double c1() const;
  void set_c1(double value);

  // double C2 = 5;
  void clear_c2();
  static const int kC2FieldNumber = 5;
  double c2() const;
  void set_c2(double value);

  // double C3 = 6;
  void clear_c3();
  static const int kC3FieldNumber = 6;
  double c3() const;
  void set_c3(double value);

  // uint32 index = 7;
  void clear_index();
  static const int kIndexFieldNumber = 7;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // uint32 quality = 8;
  void clear_quality();
  static const int kQualityFieldNumber = 8;
  ::google::protobuf::uint32 quality() const;
  void set_quality(::google::protobuf::uint32 value);

  // uint32 line_type = 9;
  void clear_line_type();
  static const int kLineTypeFieldNumber = 9;
  ::google::protobuf::uint32 line_type() const;
  void set_line_type(::google::protobuf::uint32 value);

  // uint32 line_color = 10;
  void clear_line_color();
  static const int kLineColorFieldNumber = 10;
  ::google::protobuf::uint32 line_color() const;
  void set_line_color(::google::protobuf::uint32 value);

  // double start_long = 11;
  void clear_start_long();
  static const int kStartLongFieldNumber = 11;
  double start_long() const;
  void set_start_long(double value);

  // double start_lat = 12;
  void clear_start_lat();
  static const int kStartLatFieldNumber = 12;
  double start_lat() const;
  void set_start_lat(double value);

  // double end_long = 13;
  void clear_end_long();
  static const int kEndLongFieldNumber = 13;
  double end_long() const;
  void set_end_long(double value);

  // double end_lat = 14;
  void clear_end_lat();
  static const int kEndLatFieldNumber = 14;
  double end_lat() const;
  void set_end_lat(double value);

  // double width = 15;
  void clear_width();
  static const int kWidthFieldNumber = 15;
  double width() const;
  void set_width(double value);

  // double length = 16;
  void clear_length();
  static const int kLengthFieldNumber = 16;
  double length() const;
  void set_length(double value);

  // double C0_rms = 17;
  void clear_c0_rms();
  static const int kC0RmsFieldNumber = 17;
  double c0_rms() const;
  void set_c0_rms(double value);

  // double C1_rms = 18;
  void clear_c1_rms();
  static const int kC1RmsFieldNumber = 18;
  double c1_rms() const;
  void set_c1_rms(double value);

  // double C2_rms = 19;
  void clear_c2_rms();
  static const int kC2RmsFieldNumber = 19;
  double c2_rms() const;
  void set_c2_rms(double value);

  // double C3_rms = 20;
  void clear_c3_rms();
  static const int kC3RmsFieldNumber = 20;
  double c3_rms() const;
  void set_c3_rms(double value);

  // double confidence = 21;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 21;
  double confidence() const;
  void set_confidence(double value);

  // @@protoc_insertion_point(class_scope:fusion_lane_out.proto.Lane)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 line_id_;
  ::google::protobuf::uint32 coordinate_type_;
  double c0_;
  double c1_;
  double c2_;
  double c3_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 line_type_;
  ::google::protobuf::uint32 line_color_;
  double start_long_;
  double start_lat_;
  double end_long_;
  double end_lat_;
  double width_;
  double length_;
  double c0_rms_;
  double c1_rms_;
  double c2_rms_;
  double c3_rms_;
  double confidence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fusion_lane_out.proto.LaneFrame) */ {
 public:
  LaneFrame();
  virtual ~LaneFrame();

  LaneFrame(const LaneFrame& from);

  inline LaneFrame& operator=(const LaneFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneFrame(LaneFrame&& from) noexcept
    : LaneFrame() {
    *this = ::std::move(from);
  }

  inline LaneFrame& operator=(LaneFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneFrame* internal_default_instance() {
    return reinterpret_cast<const LaneFrame*>(
               &_LaneFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LaneFrame* other);
  friend void swap(LaneFrame& a, LaneFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneFrame* New() const final {
    return CreateMaybeMessage<LaneFrame>(NULL);
  }

  LaneFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneFrame& from);
  void MergeFrom(const LaneFrame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fusion_lane_out.proto.Lane lanes = 3;
  int lanes_size() const;
  void clear_lanes();
  static const int kLanesFieldNumber = 3;
  ::fusion_lane_out::proto::Lane* mutable_lanes(int index);
  ::google::protobuf::RepeatedPtrField< ::fusion_lane_out::proto::Lane >*
      mutable_lanes();
  const ::fusion_lane_out::proto::Lane& lanes(int index) const;
  ::fusion_lane_out::proto::Lane* add_lanes();
  const ::google::protobuf::RepeatedPtrField< ::fusion_lane_out::proto::Lane >&
      lanes() const;

  // .fusion_lane_out.proto.LaneHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::fusion_lane_out::proto::LaneHeader& _internal_header() const;
  public:
  const ::fusion_lane_out::proto::LaneHeader& header() const;
  ::fusion_lane_out::proto::LaneHeader* release_header();
  ::fusion_lane_out::proto::LaneHeader* mutable_header();
  void set_allocated_header(::fusion_lane_out::proto::LaneHeader* header);

  // uint64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fusion_lane_out.proto.LaneFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::fusion_lane_out::proto::Lane > lanes_;
  ::fusion_lane_out::proto::LaneHeader* header_;
  ::google::protobuf::uint64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_fusion_5flane_5fout_5fv1_5f0_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaneHeader

// uint64 timestamp = 1;
inline void LaneHeader::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LaneHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.LaneHeader.timestamp)
  return timestamp_;
}
inline void LaneHeader::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.LaneHeader.timestamp)
}

// uint32 rolling_counter = 2;
inline void LaneHeader::clear_rolling_counter() {
  rolling_counter_ = 0u;
}
inline ::google::protobuf::uint32 LaneHeader::rolling_counter() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.LaneHeader.rolling_counter)
  return rolling_counter_;
}
inline void LaneHeader::set_rolling_counter(::google::protobuf::uint32 value) {
  
  rolling_counter_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.LaneHeader.rolling_counter)
}

// uint32 sensor_id = 3;
inline void LaneHeader::clear_sensor_id() {
  sensor_id_ = 0u;
}
inline ::google::protobuf::uint32 LaneHeader::sensor_id() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.LaneHeader.sensor_id)
  return sensor_id_;
}
inline void LaneHeader::set_sensor_id(::google::protobuf::uint32 value) {
  
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.LaneHeader.sensor_id)
}

// uint32 line_num = 4;
inline void LaneHeader::clear_line_num() {
  line_num_ = 0u;
}
inline ::google::protobuf::uint32 LaneHeader::line_num() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.LaneHeader.line_num)
  return line_num_;
}
inline void LaneHeader::set_line_num(::google::protobuf::uint32 value) {
  
  line_num_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.LaneHeader.line_num)
}

// -------------------------------------------------------------------

// Lane

// uint32 line_id = 1;
inline void Lane::clear_line_id() {
  line_id_ = 0u;
}
inline ::google::protobuf::uint32 Lane::line_id() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.line_id)
  return line_id_;
}
inline void Lane::set_line_id(::google::protobuf::uint32 value) {
  
  line_id_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.line_id)
}

// uint32 coordinate_type = 2;
inline void Lane::clear_coordinate_type() {
  coordinate_type_ = 0u;
}
inline ::google::protobuf::uint32 Lane::coordinate_type() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.coordinate_type)
  return coordinate_type_;
}
inline void Lane::set_coordinate_type(::google::protobuf::uint32 value) {
  
  coordinate_type_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.coordinate_type)
}

// double C0 = 3;
inline void Lane::clear_c0() {
  c0_ = 0;
}
inline double Lane::c0() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.C0)
  return c0_;
}
inline void Lane::set_c0(double value) {
  
  c0_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.C0)
}

// double C1 = 4;
inline void Lane::clear_c1() {
  c1_ = 0;
}
inline double Lane::c1() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.C1)
  return c1_;
}
inline void Lane::set_c1(double value) {
  
  c1_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.C1)
}

// double C2 = 5;
inline void Lane::clear_c2() {
  c2_ = 0;
}
inline double Lane::c2() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.C2)
  return c2_;
}
inline void Lane::set_c2(double value) {
  
  c2_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.C2)
}

// double C3 = 6;
inline void Lane::clear_c3() {
  c3_ = 0;
}
inline double Lane::c3() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.C3)
  return c3_;
}
inline void Lane::set_c3(double value) {
  
  c3_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.C3)
}

// uint32 index = 7;
inline void Lane::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 Lane::index() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.index)
  return index_;
}
inline void Lane::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.index)
}

// uint32 quality = 8;
inline void Lane::clear_quality() {
  quality_ = 0u;
}
inline ::google::protobuf::uint32 Lane::quality() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.quality)
  return quality_;
}
inline void Lane::set_quality(::google::protobuf::uint32 value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.quality)
}

// uint32 line_type = 9;
inline void Lane::clear_line_type() {
  line_type_ = 0u;
}
inline ::google::protobuf::uint32 Lane::line_type() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.line_type)
  return line_type_;
}
inline void Lane::set_line_type(::google::protobuf::uint32 value) {
  
  line_type_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.line_type)
}

// uint32 line_color = 10;
inline void Lane::clear_line_color() {
  line_color_ = 0u;
}
inline ::google::protobuf::uint32 Lane::line_color() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.line_color)
  return line_color_;
}
inline void Lane::set_line_color(::google::protobuf::uint32 value) {
  
  line_color_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.line_color)
}

// double start_long = 11;
inline void Lane::clear_start_long() {
  start_long_ = 0;
}
inline double Lane::start_long() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.start_long)
  return start_long_;
}
inline void Lane::set_start_long(double value) {
  
  start_long_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.start_long)
}

// double start_lat = 12;
inline void Lane::clear_start_lat() {
  start_lat_ = 0;
}
inline double Lane::start_lat() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.start_lat)
  return start_lat_;
}
inline void Lane::set_start_lat(double value) {
  
  start_lat_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.start_lat)
}

// double end_long = 13;
inline void Lane::clear_end_long() {
  end_long_ = 0;
}
inline double Lane::end_long() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.end_long)
  return end_long_;
}
inline void Lane::set_end_long(double value) {
  
  end_long_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.end_long)
}

// double end_lat = 14;
inline void Lane::clear_end_lat() {
  end_lat_ = 0;
}
inline double Lane::end_lat() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.end_lat)
  return end_lat_;
}
inline void Lane::set_end_lat(double value) {
  
  end_lat_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.end_lat)
}

// double width = 15;
inline void Lane::clear_width() {
  width_ = 0;
}
inline double Lane::width() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.width)
  return width_;
}
inline void Lane::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.width)
}

// double length = 16;
inline void Lane::clear_length() {
  length_ = 0;
}
inline double Lane::length() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.length)
  return length_;
}
inline void Lane::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.length)
}

// double C0_rms = 17;
inline void Lane::clear_c0_rms() {
  c0_rms_ = 0;
}
inline double Lane::c0_rms() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.C0_rms)
  return c0_rms_;
}
inline void Lane::set_c0_rms(double value) {
  
  c0_rms_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.C0_rms)
}

// double C1_rms = 18;
inline void Lane::clear_c1_rms() {
  c1_rms_ = 0;
}
inline double Lane::c1_rms() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.C1_rms)
  return c1_rms_;
}
inline void Lane::set_c1_rms(double value) {
  
  c1_rms_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.C1_rms)
}

// double C2_rms = 19;
inline void Lane::clear_c2_rms() {
  c2_rms_ = 0;
}
inline double Lane::c2_rms() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.C2_rms)
  return c2_rms_;
}
inline void Lane::set_c2_rms(double value) {
  
  c2_rms_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.C2_rms)
}

// double C3_rms = 20;
inline void Lane::clear_c3_rms() {
  c3_rms_ = 0;
}
inline double Lane::c3_rms() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.C3_rms)
  return c3_rms_;
}
inline void Lane::set_c3_rms(double value) {
  
  c3_rms_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.C3_rms)
}

// double confidence = 21;
inline void Lane::clear_confidence() {
  confidence_ = 0;
}
inline double Lane::confidence() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.Lane.confidence)
  return confidence_;
}
inline void Lane::set_confidence(double value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.Lane.confidence)
}

// -------------------------------------------------------------------

// LaneFrame

// .fusion_lane_out.proto.LaneHeader header = 1;
inline bool LaneFrame::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void LaneFrame::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::fusion_lane_out::proto::LaneHeader& LaneFrame::_internal_header() const {
  return *header_;
}
inline const ::fusion_lane_out::proto::LaneHeader& LaneFrame::header() const {
  const ::fusion_lane_out::proto::LaneHeader* p = header_;
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.LaneFrame.header)
  return p != NULL ? *p : *reinterpret_cast<const ::fusion_lane_out::proto::LaneHeader*>(
      &::fusion_lane_out::proto::_LaneHeader_default_instance_);
}
inline ::fusion_lane_out::proto::LaneHeader* LaneFrame::release_header() {
  // @@protoc_insertion_point(field_release:fusion_lane_out.proto.LaneFrame.header)
  
  ::fusion_lane_out::proto::LaneHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::fusion_lane_out::proto::LaneHeader* LaneFrame::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::fusion_lane_out::proto::LaneHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fusion_lane_out.proto.LaneFrame.header)
  return header_;
}
inline void LaneFrame::set_allocated_header(::fusion_lane_out::proto::LaneHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:fusion_lane_out.proto.LaneFrame.header)
}

// uint64 timestamp = 2;
inline void LaneFrame::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LaneFrame::timestamp() const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.LaneFrame.timestamp)
  return timestamp_;
}
inline void LaneFrame::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:fusion_lane_out.proto.LaneFrame.timestamp)
}

// repeated .fusion_lane_out.proto.Lane lanes = 3;
inline int LaneFrame::lanes_size() const {
  return lanes_.size();
}
inline void LaneFrame::clear_lanes() {
  lanes_.Clear();
}
inline ::fusion_lane_out::proto::Lane* LaneFrame::mutable_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:fusion_lane_out.proto.LaneFrame.lanes)
  return lanes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::fusion_lane_out::proto::Lane >*
LaneFrame::mutable_lanes() {
  // @@protoc_insertion_point(field_mutable_list:fusion_lane_out.proto.LaneFrame.lanes)
  return &lanes_;
}
inline const ::fusion_lane_out::proto::Lane& LaneFrame::lanes(int index) const {
  // @@protoc_insertion_point(field_get:fusion_lane_out.proto.LaneFrame.lanes)
  return lanes_.Get(index);
}
inline ::fusion_lane_out::proto::Lane* LaneFrame::add_lanes() {
  // @@protoc_insertion_point(field_add:fusion_lane_out.proto.LaneFrame.lanes)
  return lanes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fusion_lane_out::proto::Lane >&
LaneFrame::lanes() const {
  // @@protoc_insertion_point(field_list:fusion_lane_out.proto.LaneFrame.lanes)
  return lanes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace fusion_lane_out

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_fusion_5flane_5fout_5fv1_5f0_2eproto
