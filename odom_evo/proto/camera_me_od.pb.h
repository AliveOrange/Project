// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_me_od.proto

#ifndef PROTOBUF_INCLUDED_camera_5fme_5fod_2eproto
#define PROTOBUF_INCLUDED_camera_5fme_5fod_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fme_5fod_2eproto 

namespace protobuf_camera_5fme_5fod_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_camera_5fme_5fod_2eproto
namespace camera_me_od {
namespace proto {
class MeHeader;
class MeHeaderDefaultTypeInternal;
extern MeHeaderDefaultTypeInternal _MeHeader_default_instance_;
class MeObjectInfo;
class MeObjectInfoDefaultTypeInternal;
extern MeObjectInfoDefaultTypeInternal _MeObjectInfo_default_instance_;
class me_frame_od;
class me_frame_odDefaultTypeInternal;
extern me_frame_odDefaultTypeInternal _me_frame_od_default_instance_;
}  // namespace proto
}  // namespace camera_me_od
namespace google {
namespace protobuf {
template<> ::camera_me_od::proto::MeHeader* Arena::CreateMaybeMessage<::camera_me_od::proto::MeHeader>(Arena*);
template<> ::camera_me_od::proto::MeObjectInfo* Arena::CreateMaybeMessage<::camera_me_od::proto::MeObjectInfo>(Arena*);
template<> ::camera_me_od::proto::me_frame_od* Arena::CreateMaybeMessage<::camera_me_od::proto::me_frame_od>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace camera_me_od {
namespace proto {

// ===================================================================

class MeHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camera_me_od.proto.MeHeader) */ {
 public:
  MeHeader();
  virtual ~MeHeader();

  MeHeader(const MeHeader& from);

  inline MeHeader& operator=(const MeHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MeHeader(MeHeader&& from) noexcept
    : MeHeader() {
    *this = ::std::move(from);
  }

  inline MeHeader& operator=(MeHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MeHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeHeader* internal_default_instance() {
    return reinterpret_cast<const MeHeader*>(
               &_MeHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MeHeader* other);
  friend void swap(MeHeader& a, MeHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MeHeader* New() const final {
    return CreateMaybeMessage<MeHeader>(NULL);
  }

  MeHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MeHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MeHeader& from);
  void MergeFrom(const MeHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // uint32 rolling_counter = 2;
  void clear_rolling_counter();
  static const int kRollingCounterFieldNumber = 2;
  ::google::protobuf::uint32 rolling_counter() const;
  void set_rolling_counter(::google::protobuf::uint32 value);

  // uint32 sensor_id = 3;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 3;
  ::google::protobuf::uint32 sensor_id() const;
  void set_sensor_id(::google::protobuf::uint32 value);

  // uint32 obj_num = 4;
  void clear_obj_num();
  static const int kObjNumFieldNumber = 4;
  ::google::protobuf::uint32 obj_num() const;
  void set_obj_num(::google::protobuf::uint32 value);

  // uint32 line_num = 5;
  void clear_line_num();
  static const int kLineNumFieldNumber = 5;
  ::google::protobuf::uint32 line_num() const;
  void set_line_num(::google::protobuf::uint32 value);

  // uint32 hazard_num = 6;
  void clear_hazard_num();
  static const int kHazardNumFieldNumber = 6;
  ::google::protobuf::uint32 hazard_num() const;
  void set_hazard_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:camera_me_od.proto.MeHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 rolling_counter_;
  ::google::protobuf::uint32 sensor_id_;
  ::google::protobuf::uint32 obj_num_;
  ::google::protobuf::uint32 line_num_;
  ::google::protobuf::uint32 hazard_num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fme_5fod_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MeObjectInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camera_me_od.proto.MeObjectInfo) */ {
 public:
  MeObjectInfo();
  virtual ~MeObjectInfo();

  MeObjectInfo(const MeObjectInfo& from);

  inline MeObjectInfo& operator=(const MeObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MeObjectInfo(MeObjectInfo&& from) noexcept
    : MeObjectInfo() {
    *this = ::std::move(from);
  }

  inline MeObjectInfo& operator=(MeObjectInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MeObjectInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeObjectInfo* internal_default_instance() {
    return reinterpret_cast<const MeObjectInfo*>(
               &_MeObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MeObjectInfo* other);
  friend void swap(MeObjectInfo& a, MeObjectInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MeObjectInfo* New() const final {
    return CreateMaybeMessage<MeObjectInfo>(NULL);
  }

  MeObjectInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MeObjectInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MeObjectInfo& from);
  void MergeFrom(const MeObjectInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeObjectInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 obj_id = 1;
  void clear_obj_id();
  static const int kObjIdFieldNumber = 1;
  ::google::protobuf::uint32 obj_id() const;
  void set_obj_id(::google::protobuf::uint32 value);

  // uint32 class_type = 2;
  void clear_class_type();
  static const int kClassTypeFieldNumber = 2;
  ::google::protobuf::uint32 class_type() const;
  void set_class_type(::google::protobuf::uint32 value);

  // uint32 obj_lane_assign = 3;
  void clear_obj_lane_assign();
  static const int kObjLaneAssignFieldNumber = 3;
  ::google::protobuf::uint32 obj_lane_assign() const;
  void set_obj_lane_assign(::google::protobuf::uint32 value);

  // uint32 motion_category = 4;
  void clear_motion_category();
  static const int kMotionCategoryFieldNumber = 4;
  ::google::protobuf::uint32 motion_category() const;
  void set_motion_category(::google::protobuf::uint32 value);

  // double height = 6;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  double height() const;
  void set_height(double value);

  // double width = 7;
  void clear_width();
  static const int kWidthFieldNumber = 7;
  double width() const;
  void set_width(double value);

  // double length = 8;
  void clear_length();
  static const int kLengthFieldNumber = 8;
  double length() const;
  void set_length(double value);

  // double dist_long = 9;
  void clear_dist_long();
  static const int kDistLongFieldNumber = 9;
  double dist_long() const;
  void set_dist_long(double value);

  // double dist_lat = 10;
  void clear_dist_lat();
  static const int kDistLatFieldNumber = 10;
  double dist_lat() const;
  void set_dist_lat(double value);

  // double vrel_long = 11;
  void clear_vrel_long();
  static const int kVrelLongFieldNumber = 11;
  double vrel_long() const;
  void set_vrel_long(double value);

  // double vrel_lat = 12;
  void clear_vrel_lat();
  static const int kVrelLatFieldNumber = 12;
  double vrel_lat() const;
  void set_vrel_lat(double value);

  // double absoulte_speed = 13;
  void clear_absoulte_speed();
  static const int kAbsoulteSpeedFieldNumber = 13;
  double absoulte_speed() const;
  void set_absoulte_speed(double value);

  // double absoulte_long_acc = 14;
  void clear_absoulte_long_acc();
  static const int kAbsoulteLongAccFieldNumber = 14;
  double absoulte_long_acc() const;
  void set_absoulte_long_acc(double value);

  // double yaw_angle = 15;
  void clear_yaw_angle();
  static const int kYawAngleFieldNumber = 15;
  double yaw_angle() const;
  void set_yaw_angle(double value);

  // uint32 motion_status = 5;
  void clear_motion_status();
  static const int kMotionStatusFieldNumber = 5;
  ::google::protobuf::uint32 motion_status() const;
  void set_motion_status(::google::protobuf::uint32 value);

  // bool brake_light_flag = 17;
  void clear_brake_light_flag();
  static const int kBrakeLightFlagFieldNumber = 17;
  bool brake_light_flag() const;
  void set_brake_light_flag(bool value);

  // bool turn_indicator_right_flag = 18;
  void clear_turn_indicator_right_flag();
  static const int kTurnIndicatorRightFlagFieldNumber = 18;
  bool turn_indicator_right_flag() const;
  void set_turn_indicator_right_flag(bool value);

  // bool turn_indicator_left_flag = 19;
  void clear_turn_indicator_left_flag();
  static const int kTurnIndicatorLeftFlagFieldNumber = 19;
  bool turn_indicator_left_flag() const;
  void set_turn_indicator_left_flag(bool value);

  // bool light_indicator_validity = 20;
  void clear_light_indicator_validity();
  static const int kLightIndicatorValidityFieldNumber = 20;
  bool light_indicator_validity() const;
  void set_light_indicator_validity(bool value);

  // double orientation_angle = 16;
  void clear_orientation_angle();
  static const int kOrientationAngleFieldNumber = 16;
  double orientation_angle() const;
  void set_orientation_angle(double value);

  // @@protoc_insertion_point(class_scope:camera_me_od.proto.MeObjectInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 obj_id_;
  ::google::protobuf::uint32 class_type_;
  ::google::protobuf::uint32 obj_lane_assign_;
  ::google::protobuf::uint32 motion_category_;
  double height_;
  double width_;
  double length_;
  double dist_long_;
  double dist_lat_;
  double vrel_long_;
  double vrel_lat_;
  double absoulte_speed_;
  double absoulte_long_acc_;
  double yaw_angle_;
  ::google::protobuf::uint32 motion_status_;
  bool brake_light_flag_;
  bool turn_indicator_right_flag_;
  bool turn_indicator_left_flag_;
  bool light_indicator_validity_;
  double orientation_angle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fme_5fod_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class me_frame_od : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camera_me_od.proto.me_frame_od) */ {
 public:
  me_frame_od();
  virtual ~me_frame_od();

  me_frame_od(const me_frame_od& from);

  inline me_frame_od& operator=(const me_frame_od& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  me_frame_od(me_frame_od&& from) noexcept
    : me_frame_od() {
    *this = ::std::move(from);
  }

  inline me_frame_od& operator=(me_frame_od&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const me_frame_od& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const me_frame_od* internal_default_instance() {
    return reinterpret_cast<const me_frame_od*>(
               &_me_frame_od_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(me_frame_od* other);
  friend void swap(me_frame_od& a, me_frame_od& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline me_frame_od* New() const final {
    return CreateMaybeMessage<me_frame_od>(NULL);
  }

  me_frame_od* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<me_frame_od>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const me_frame_od& from);
  void MergeFrom(const me_frame_od& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(me_frame_od* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .camera_me_od.proto.MeObjectInfo objects = 3;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 3;
  ::camera_me_od::proto::MeObjectInfo* mutable_objects(int index);
  ::google::protobuf::RepeatedPtrField< ::camera_me_od::proto::MeObjectInfo >*
      mutable_objects();
  const ::camera_me_od::proto::MeObjectInfo& objects(int index) const;
  ::camera_me_od::proto::MeObjectInfo* add_objects();
  const ::google::protobuf::RepeatedPtrField< ::camera_me_od::proto::MeObjectInfo >&
      objects() const;

  // .camera_me_od.proto.MeHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::camera_me_od::proto::MeHeader& _internal_header() const;
  public:
  const ::camera_me_od::proto::MeHeader& header() const;
  ::camera_me_od::proto::MeHeader* release_header();
  ::camera_me_od::proto::MeHeader* mutable_header();
  void set_allocated_header(::camera_me_od::proto::MeHeader* header);

  // uint64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:camera_me_od.proto.me_frame_od)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::camera_me_od::proto::MeObjectInfo > objects_;
  ::camera_me_od::proto::MeHeader* header_;
  ::google::protobuf::uint64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fme_5fod_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MeHeader

// uint64 timestamp = 1;
inline void MeHeader::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MeHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeHeader.timestamp)
  return timestamp_;
}
inline void MeHeader::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeHeader.timestamp)
}

// uint32 rolling_counter = 2;
inline void MeHeader::clear_rolling_counter() {
  rolling_counter_ = 0u;
}
inline ::google::protobuf::uint32 MeHeader::rolling_counter() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeHeader.rolling_counter)
  return rolling_counter_;
}
inline void MeHeader::set_rolling_counter(::google::protobuf::uint32 value) {
  
  rolling_counter_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeHeader.rolling_counter)
}

// uint32 sensor_id = 3;
inline void MeHeader::clear_sensor_id() {
  sensor_id_ = 0u;
}
inline ::google::protobuf::uint32 MeHeader::sensor_id() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeHeader.sensor_id)
  return sensor_id_;
}
inline void MeHeader::set_sensor_id(::google::protobuf::uint32 value) {
  
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeHeader.sensor_id)
}

// uint32 obj_num = 4;
inline void MeHeader::clear_obj_num() {
  obj_num_ = 0u;
}
inline ::google::protobuf::uint32 MeHeader::obj_num() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeHeader.obj_num)
  return obj_num_;
}
inline void MeHeader::set_obj_num(::google::protobuf::uint32 value) {
  
  obj_num_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeHeader.obj_num)
}

// uint32 line_num = 5;
inline void MeHeader::clear_line_num() {
  line_num_ = 0u;
}
inline ::google::protobuf::uint32 MeHeader::line_num() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeHeader.line_num)
  return line_num_;
}
inline void MeHeader::set_line_num(::google::protobuf::uint32 value) {
  
  line_num_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeHeader.line_num)
}

// uint32 hazard_num = 6;
inline void MeHeader::clear_hazard_num() {
  hazard_num_ = 0u;
}
inline ::google::protobuf::uint32 MeHeader::hazard_num() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeHeader.hazard_num)
  return hazard_num_;
}
inline void MeHeader::set_hazard_num(::google::protobuf::uint32 value) {
  
  hazard_num_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeHeader.hazard_num)
}

// -------------------------------------------------------------------

// MeObjectInfo

// uint32 obj_id = 1;
inline void MeObjectInfo::clear_obj_id() {
  obj_id_ = 0u;
}
inline ::google::protobuf::uint32 MeObjectInfo::obj_id() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.obj_id)
  return obj_id_;
}
inline void MeObjectInfo::set_obj_id(::google::protobuf::uint32 value) {
  
  obj_id_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.obj_id)
}

// uint32 class_type = 2;
inline void MeObjectInfo::clear_class_type() {
  class_type_ = 0u;
}
inline ::google::protobuf::uint32 MeObjectInfo::class_type() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.class_type)
  return class_type_;
}
inline void MeObjectInfo::set_class_type(::google::protobuf::uint32 value) {
  
  class_type_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.class_type)
}

// uint32 obj_lane_assign = 3;
inline void MeObjectInfo::clear_obj_lane_assign() {
  obj_lane_assign_ = 0u;
}
inline ::google::protobuf::uint32 MeObjectInfo::obj_lane_assign() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.obj_lane_assign)
  return obj_lane_assign_;
}
inline void MeObjectInfo::set_obj_lane_assign(::google::protobuf::uint32 value) {
  
  obj_lane_assign_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.obj_lane_assign)
}

// uint32 motion_category = 4;
inline void MeObjectInfo::clear_motion_category() {
  motion_category_ = 0u;
}
inline ::google::protobuf::uint32 MeObjectInfo::motion_category() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.motion_category)
  return motion_category_;
}
inline void MeObjectInfo::set_motion_category(::google::protobuf::uint32 value) {
  
  motion_category_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.motion_category)
}

// uint32 motion_status = 5;
inline void MeObjectInfo::clear_motion_status() {
  motion_status_ = 0u;
}
inline ::google::protobuf::uint32 MeObjectInfo::motion_status() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.motion_status)
  return motion_status_;
}
inline void MeObjectInfo::set_motion_status(::google::protobuf::uint32 value) {
  
  motion_status_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.motion_status)
}

// double height = 6;
inline void MeObjectInfo::clear_height() {
  height_ = 0;
}
inline double MeObjectInfo::height() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.height)
  return height_;
}
inline void MeObjectInfo::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.height)
}

// double width = 7;
inline void MeObjectInfo::clear_width() {
  width_ = 0;
}
inline double MeObjectInfo::width() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.width)
  return width_;
}
inline void MeObjectInfo::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.width)
}

// double length = 8;
inline void MeObjectInfo::clear_length() {
  length_ = 0;
}
inline double MeObjectInfo::length() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.length)
  return length_;
}
inline void MeObjectInfo::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.length)
}

// double dist_long = 9;
inline void MeObjectInfo::clear_dist_long() {
  dist_long_ = 0;
}
inline double MeObjectInfo::dist_long() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.dist_long)
  return dist_long_;
}
inline void MeObjectInfo::set_dist_long(double value) {
  
  dist_long_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.dist_long)
}

// double dist_lat = 10;
inline void MeObjectInfo::clear_dist_lat() {
  dist_lat_ = 0;
}
inline double MeObjectInfo::dist_lat() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.dist_lat)
  return dist_lat_;
}
inline void MeObjectInfo::set_dist_lat(double value) {
  
  dist_lat_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.dist_lat)
}

// double vrel_long = 11;
inline void MeObjectInfo::clear_vrel_long() {
  vrel_long_ = 0;
}
inline double MeObjectInfo::vrel_long() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.vrel_long)
  return vrel_long_;
}
inline void MeObjectInfo::set_vrel_long(double value) {
  
  vrel_long_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.vrel_long)
}

// double vrel_lat = 12;
inline void MeObjectInfo::clear_vrel_lat() {
  vrel_lat_ = 0;
}
inline double MeObjectInfo::vrel_lat() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.vrel_lat)
  return vrel_lat_;
}
inline void MeObjectInfo::set_vrel_lat(double value) {
  
  vrel_lat_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.vrel_lat)
}

// double absoulte_speed = 13;
inline void MeObjectInfo::clear_absoulte_speed() {
  absoulte_speed_ = 0;
}
inline double MeObjectInfo::absoulte_speed() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.absoulte_speed)
  return absoulte_speed_;
}
inline void MeObjectInfo::set_absoulte_speed(double value) {
  
  absoulte_speed_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.absoulte_speed)
}

// double absoulte_long_acc = 14;
inline void MeObjectInfo::clear_absoulte_long_acc() {
  absoulte_long_acc_ = 0;
}
inline double MeObjectInfo::absoulte_long_acc() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.absoulte_long_acc)
  return absoulte_long_acc_;
}
inline void MeObjectInfo::set_absoulte_long_acc(double value) {
  
  absoulte_long_acc_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.absoulte_long_acc)
}

// double yaw_angle = 15;
inline void MeObjectInfo::clear_yaw_angle() {
  yaw_angle_ = 0;
}
inline double MeObjectInfo::yaw_angle() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.yaw_angle)
  return yaw_angle_;
}
inline void MeObjectInfo::set_yaw_angle(double value) {
  
  yaw_angle_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.yaw_angle)
}

// double orientation_angle = 16;
inline void MeObjectInfo::clear_orientation_angle() {
  orientation_angle_ = 0;
}
inline double MeObjectInfo::orientation_angle() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.orientation_angle)
  return orientation_angle_;
}
inline void MeObjectInfo::set_orientation_angle(double value) {
  
  orientation_angle_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.orientation_angle)
}

// bool brake_light_flag = 17;
inline void MeObjectInfo::clear_brake_light_flag() {
  brake_light_flag_ = false;
}
inline bool MeObjectInfo::brake_light_flag() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.brake_light_flag)
  return brake_light_flag_;
}
inline void MeObjectInfo::set_brake_light_flag(bool value) {
  
  brake_light_flag_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.brake_light_flag)
}

// bool turn_indicator_right_flag = 18;
inline void MeObjectInfo::clear_turn_indicator_right_flag() {
  turn_indicator_right_flag_ = false;
}
inline bool MeObjectInfo::turn_indicator_right_flag() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.turn_indicator_right_flag)
  return turn_indicator_right_flag_;
}
inline void MeObjectInfo::set_turn_indicator_right_flag(bool value) {
  
  turn_indicator_right_flag_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.turn_indicator_right_flag)
}

// bool turn_indicator_left_flag = 19;
inline void MeObjectInfo::clear_turn_indicator_left_flag() {
  turn_indicator_left_flag_ = false;
}
inline bool MeObjectInfo::turn_indicator_left_flag() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.turn_indicator_left_flag)
  return turn_indicator_left_flag_;
}
inline void MeObjectInfo::set_turn_indicator_left_flag(bool value) {
  
  turn_indicator_left_flag_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.turn_indicator_left_flag)
}

// bool light_indicator_validity = 20;
inline void MeObjectInfo::clear_light_indicator_validity() {
  light_indicator_validity_ = false;
}
inline bool MeObjectInfo::light_indicator_validity() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.MeObjectInfo.light_indicator_validity)
  return light_indicator_validity_;
}
inline void MeObjectInfo::set_light_indicator_validity(bool value) {
  
  light_indicator_validity_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.MeObjectInfo.light_indicator_validity)
}

// -------------------------------------------------------------------

// me_frame_od

// .camera_me_od.proto.MeHeader header = 1;
inline bool me_frame_od::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void me_frame_od::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::camera_me_od::proto::MeHeader& me_frame_od::_internal_header() const {
  return *header_;
}
inline const ::camera_me_od::proto::MeHeader& me_frame_od::header() const {
  const ::camera_me_od::proto::MeHeader* p = header_;
  // @@protoc_insertion_point(field_get:camera_me_od.proto.me_frame_od.header)
  return p != NULL ? *p : *reinterpret_cast<const ::camera_me_od::proto::MeHeader*>(
      &::camera_me_od::proto::_MeHeader_default_instance_);
}
inline ::camera_me_od::proto::MeHeader* me_frame_od::release_header() {
  // @@protoc_insertion_point(field_release:camera_me_od.proto.me_frame_od.header)
  
  ::camera_me_od::proto::MeHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::camera_me_od::proto::MeHeader* me_frame_od::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::camera_me_od::proto::MeHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:camera_me_od.proto.me_frame_od.header)
  return header_;
}
inline void me_frame_od::set_allocated_header(::camera_me_od::proto::MeHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:camera_me_od.proto.me_frame_od.header)
}

// uint64 timestamp = 2;
inline void me_frame_od::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 me_frame_od::timestamp() const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.me_frame_od.timestamp)
  return timestamp_;
}
inline void me_frame_od::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:camera_me_od.proto.me_frame_od.timestamp)
}

// repeated .camera_me_od.proto.MeObjectInfo objects = 3;
inline int me_frame_od::objects_size() const {
  return objects_.size();
}
inline void me_frame_od::clear_objects() {
  objects_.Clear();
}
inline ::camera_me_od::proto::MeObjectInfo* me_frame_od::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:camera_me_od.proto.me_frame_od.objects)
  return objects_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::camera_me_od::proto::MeObjectInfo >*
me_frame_od::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:camera_me_od.proto.me_frame_od.objects)
  return &objects_;
}
inline const ::camera_me_od::proto::MeObjectInfo& me_frame_od::objects(int index) const {
  // @@protoc_insertion_point(field_get:camera_me_od.proto.me_frame_od.objects)
  return objects_.Get(index);
}
inline ::camera_me_od::proto::MeObjectInfo* me_frame_od::add_objects() {
  // @@protoc_insertion_point(field_add:camera_me_od.proto.me_frame_od.objects)
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::camera_me_od::proto::MeObjectInfo >&
me_frame_od::objects() const {
  // @@protoc_insertion_point(field_list:camera_me_od.proto.me_frame_od.objects)
  return objects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace camera_me_od

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_camera_5fme_5fod_2eproto
