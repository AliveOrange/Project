// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception.proto

#include "perception.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FloatValue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int32Value;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_perception_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perception_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Failsafe;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perception_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perception_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MeasuringStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perception_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrafficLight;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perception_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrafficSign;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perception_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrafficSignType;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perception_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Object;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perception_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_TrafficSignStatus;
}  // namespace protobuf_perception_2eproto
namespace protobuf_perception_5fbarricade_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perception_5fbarricade_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Barricade;
}  // namespace protobuf_perception_5fbarricade_2eproto
namespace protobuf_perception_5froad_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perception_5froad_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RoadMark;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perception_5froad_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_FreeSpace;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perception_5froad_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Lane;
}  // namespace protobuf_perception_5froad_2eproto
namespace protobuf_perception_5ftypes_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perception_5ftypes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Rect;
}  // namespace protobuf_perception_5ftypes_2eproto
namespace protobuf_perception_5fvehicle_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perception_5fvehicle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Vehicle;
}  // namespace protobuf_perception_5fvehicle_2eproto
namespace calmcar {
namespace perception {
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class MeasuringStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MeasuringStatus>
      _instance;
} _MeasuringStatus_default_instance_;
class ObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Object>
      _instance;
} _Object_default_instance_;
class TrafficLightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLight>
      _instance;
} _TrafficLight_default_instance_;
class TrafficSignDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign>
      _instance;
} _TrafficSign_default_instance_;
class TrafficSignTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignType>
      _instance;
} _TrafficSignType_default_instance_;
class TrafficSignStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignStatus>
      _instance;
} _TrafficSignStatus_default_instance_;
class FailsafeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Failsafe>
      _instance;
} _Failsafe_default_instance_;
class PerceptionFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerceptionFrame>
      _instance;
} _PerceptionFrame_default_instance_;
}  // namespace perception
}  // namespace calmcar
namespace protobuf_perception_2eproto {
static void InitDefaultsHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmcar::perception::_Header_default_instance_;
    new (ptr) ::calmcar::perception::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeader}, {}};

static void InitDefaultsMeasuringStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmcar::perception::_MeasuringStatus_default_instance_;
    new (ptr) ::calmcar::perception::MeasuringStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::MeasuringStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MeasuringStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMeasuringStatus}, {}};

static void InitDefaultsObject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmcar::perception::_Object_default_instance_;
    new (ptr) ::calmcar::perception::Object();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::Object::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Object =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsObject}, {
      &protobuf_perception_5ftypes_2eproto::scc_info_Rect.base,
      &protobuf_perception_2eproto::scc_info_MeasuringStatus.base,}};

static void InitDefaultsTrafficLight() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmcar::perception::_TrafficLight_default_instance_;
    new (ptr) ::calmcar::perception::TrafficLight();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::TrafficLight::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrafficLight =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrafficLight}, {
      &protobuf_perception_5ftypes_2eproto::scc_info_Rect.base,}};

static void InitDefaultsTrafficSign() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmcar::perception::_TrafficSign_default_instance_;
    new (ptr) ::calmcar::perception::TrafficSign();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::TrafficSign::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrafficSign =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrafficSign}, {
      &protobuf_perception_5ftypes_2eproto::scc_info_Rect.base,}};

static void InitDefaultsTrafficSignType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmcar::perception::_TrafficSignType_default_instance_;
    new (ptr) ::calmcar::perception::TrafficSignType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::TrafficSignType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrafficSignType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrafficSignType}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsTrafficSignStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmcar::perception::_TrafficSignStatus_default_instance_;
    new (ptr) ::calmcar::perception::TrafficSignStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::TrafficSignStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TrafficSignStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTrafficSignStatus}, {
      &protobuf_perception_2eproto::scc_info_TrafficSignType.base,
      &protobuf_perception_5ftypes_2eproto::scc_info_Rect.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_FloatValue.base,}};

static void InitDefaultsFailsafe() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmcar::perception::_Failsafe_default_instance_;
    new (ptr) ::calmcar::perception::Failsafe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::Failsafe::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Failsafe =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFailsafe}, {}};

static void InitDefaultsPerceptionFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmcar::perception::_PerceptionFrame_default_instance_;
    new (ptr) ::calmcar::perception::PerceptionFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::PerceptionFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<11> scc_info_PerceptionFrame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsPerceptionFrame}, {
      &protobuf_perception_2eproto::scc_info_Header.base,
      &protobuf_perception_2eproto::scc_info_Object.base,
      &protobuf_perception_5froad_2eproto::scc_info_RoadMark.base,
      &protobuf_perception_5froad_2eproto::scc_info_Lane.base,
      &protobuf_perception_5froad_2eproto::scc_info_FreeSpace.base,
      &protobuf_perception_2eproto::scc_info_TrafficLight.base,
      &protobuf_perception_2eproto::scc_info_TrafficSign.base,
      &protobuf_perception_2eproto::scc_info_TrafficSignStatus.base,
      &protobuf_perception_2eproto::scc_info_Failsafe.base,
      &protobuf_perception_5fvehicle_2eproto::scc_info_Vehicle.base,
      &protobuf_perception_5fbarricade_2eproto::scc_info_Barricade.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Header.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MeasuringStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Object.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficLight.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSign.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSignType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSignStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Failsafe.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerceptionFrame.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[32];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, frame_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, perception_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, protobuf_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, object_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, tfl_struct_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, tfl_spot_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, traffic_sign_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, fail_safe_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, lane_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, road_mark_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, free_space_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, barricade_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::MeasuringStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::MeasuringStatus, measuring_status_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::MeasuringStatus, measuring_status_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::MeasuringStatus, measuring_status_2_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, frame_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, camera_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, class__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, subclass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, subclass_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, bbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, length_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, width_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, height_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, age_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, age_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, visibility_side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, lat_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, lat_distance_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, long_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, long_distance_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, relative_lat_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, relative_lat_velocity_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, relative_long_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, relative_long_velocity_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_lat_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_lat_velocity_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_long_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_long_velocity_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, relative_lat_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, relative_lat_acc_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, relative_long_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, relative_long_acc_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_lat_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_lat_acc_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_long_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_long_acc_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_speed_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_acceleration_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, heading_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, inverse_ttc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, inverse_ttc_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, angle_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, angle_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, angle_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, angle_side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, top_out_of_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, bottom_out_of_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, left_out_of_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, right_out_of_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, brake_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, turn_indicator_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, turn_indicator_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, measuring_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, motion_orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, motion_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, motion_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, cutin_cutout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, camera_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, struct_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, spot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, class__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, tracking_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, bbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, lat_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, lat_distance_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, long_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, long_distance_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, rel_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, rel_height_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, color_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, type_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, camera_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, class__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, subclass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, subclass_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, bbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, lat_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, long_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, tracking_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, relevance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignType, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignType, sign_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, derived_signs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, bbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, lat_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, long_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, panel_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, panel_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, height_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, weight_limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, camera_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, blockage_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, blockage_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, weather_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, weather_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, illumination_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, illumination_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, image_limited_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, image_limited_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, out_of_focus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, impacted_technologies_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, vd_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, vru_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, num_of_objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, cipv_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, vd_niv_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, vd_niv_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, cipv_lost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, allow_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, road_mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, free_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, tfl_structure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, tfl_struct_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, tfl_struct_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, tfl_spot_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, traffic_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, traffic_sign_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, failsafe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, vehicle_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, barricade_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, barricade_object_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::calmcar::perception::Header)},
  { 18, -1, sizeof(::calmcar::perception::MeasuringStatus)},
  { 26, -1, sizeof(::calmcar::perception::Object)},
  { 94, -1, sizeof(::calmcar::perception::TrafficLight)},
  { 120, -1, sizeof(::calmcar::perception::TrafficSign)},
  { 139, -1, sizeof(::calmcar::perception::TrafficSignType)},
  { 146, -1, sizeof(::calmcar::perception::TrafficSignStatus)},
  { 162, -1, sizeof(::calmcar::perception::Failsafe)},
  { 179, -1, sizeof(::calmcar::perception::PerceptionFrame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_MeasuringStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_Object_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_TrafficLight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_TrafficSign_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_TrafficSignType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_TrafficSignStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_Failsafe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_PerceptionFrame_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "perception.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020perception.proto\022\022calmcar.perception\032\036"
      "google/protobuf/wrappers.proto\032\026percepti"
      "on_types.proto\032\034perception_sensor_info.p"
      "roto\032\030perception_vehicle.proto\032\025percepti"
      "on_road.proto\032\032perception_barricade.prot"
      "o\"\357\r\n\006Header\022\023\n\013frame_index\030\001 \001(\003\022\021\n\ttim"
      "estamp\030\002 \001(\003\022\032\n\022perception_version\030\003 \001(\t"
      "\022D\n\020protobuf_version\030\004 \001(\0162*.calmcar.per"
      "ception.Header.ProtobufVersion\022@\n\016object"
      "_version\030\005 \001(\0162(.calmcar.perception.Head"
      "er.ObjectVersion\022P\n\022tfl_struct_version\030\006"
      " \001(\01624.calmcar.perception.Header.Traffic"
      "LightStructVersion\022L\n\020tfl_spot_version\030\007"
      " \001(\01622.calmcar.perception.Header.Traffic"
      "LightSpotVersion\022K\n\024traffic_sign_version"
      "\030\010 \001(\0162-.calmcar.perception.Header.Traff"
      "icSignVersion\022E\n\021fail_safe_version\030\t \001(\016"
      "2*.calmcar.perception.Header.FailSafeVer"
      "sion\022<\n\014lane_version\030\n \001(\0162&.calmcar.per"
      "ception.Header.LaneVersion\022E\n\021road_mark_"
      "version\030\013 \001(\0162*.calmcar.perception.Heade"
      "r.RoadMarkVersion\022G\n\022free_space_version\030"
      "\014 \001(\0162+.calmcar.perception.Header.FreeSp"
      "aceVersion\022F\n\021barricade_version\030\r \001(\0162+."
      "calmcar.perception.Header.BarricadeVersi"
      "on\"\362\001\n\017ProtobufVersion\022\013\n\007V_1_0_0\020\000\022\013\n\007V"
      "_1_0_1\020\001\022\013\n\007V_1_0_2\020\002\022\013\n\007V_1_0_3\020\003\022\013\n\007V_"
      "1_0_4\020\004\022\013\n\007V_1_0_5\020\005\022\013\n\007V_1_0_6\020\006\022\013\n\007V_1"
      "_0_7\020\007\022\013\n\007V_1_0_8\020\010\022\013\n\007V_1_0_9\020\t\022\014\n\010V_1_"
      "0_10\020\n\022\014\n\010V_1_0_11\020\013\022\014\n\010V_1_0_12\020\014\022\014\n\010V_"
      "1_0_13\020\r\022\014\n\010V_1_0_14\020\016\022\023\n\017CURRENT_VERSIO"
      "N\020\016\032\002\020\001\"G\n\rObjectVersion\022\014\n\010OD_V_1_0\020\000\022\014"
      "\n\010OD_V_1_1\020\001\022\026\n\022OD_CURRENT_VERSION\020\001\032\002\020\001"
      "\"k\n\031TrafficLightStructVersion\022\024\n\020TFL_STR"
      "UCT_V_1_0\020\000\022\024\n\020TFL_STRUCT_V_1_1\020\001\022\036\n\032TFL"
      "_STRUCT_CURRENT_VERSION\020\001\032\002\020\001\"c\n\027Traffic"
      "LightSpotVersion\022\022\n\016TFL_SPOT_V_1_0\020\000\022\022\n\016"
      "TFL_SPOT_V_1_1\020\001\022\034\n\030TFL_SPOT_CURRENT_VER"
      "SION\020\001\032\002\020\001\"O\n\022TrafficSignVersion\022\r\n\tTSR_"
      "V_1_0\020\000\022\r\n\tTSR_V_1_1\020\001\022\027\n\023TSR_CURRENT_VE"
      "RSION\020\001\032\002\020\001\"I\n\017FailSafeVersion\022\014\n\010FS_V_1"
      "_0\020\000\022\014\n\010FS_V_1_1\020\001\022\026\n\022FS_CURRENT_VERSION"
      "\020\001\032\002\020\001\"K\n\013LaneVersion\022\016\n\nLANE_V_1_0\020\000\022\016\n"
      "\nLANE_V_1_1\020\001\022\030\n\024LANE_CURRENT_VERSION\020\001\032"
      "\002\020\001\"I\n\017RoadMarkVersion\022\014\n\010RM_V_1_0\020\000\022\014\n\010"
      "RM_V_1_1\020\001\022\026\n\022RM_CURRENT_VERSION\020\001\032\002\020\001\"M"
      "\n\020FreeSpaceVersion\022\r\n\tFSP_V_1_0\020\000\022\r\n\tFSP"
      "_V_1_1\020\001\022\027\n\023FSP_CURRENT_VERSION\020\001\032\002\020\001\"<\n"
      "\020BarricadeVersion\022\014\n\010BA_V_1_0\020\000\022\026\n\022BA_CU"
      "RRENT_VERSION\020\000\032\002\020\001\"\327\001\n\017MeasuringStatus\022"
      "@\n\022measuring_status_0\030\001 \001(\0162$.calmcar.pe"
      "rception.MeasuringStatus0\022@\n\022measuring_s"
      "tatus_1\030\002 \001(\0162$.calmcar.perception.Measu"
      "ringStatus1\022@\n\022measuring_status_2\030\003 \001(\0162"
      "$.calmcar.perception.MeasuringStatus2\"\364\r"
      "\n\006Object\022\023\n\013frame_index\030\001 \001(\003\022\021\n\ttimesta"
      "mp\030\002 \001(\003\022@\n\017camera_position\030\003 \001(\0162\'.calm"
      "car.perception.CameraInfo.Position\022\n\n\002id"
      "\030\004 \001(\003\022\016\n\006class_\030\005 \001(\003\022\022\n\nclass_name\030\006 \001"
      "(\t\022\020\n\010subclass\030\007 \001(\003\022\025\n\rsubclass_name\030\010 "
      "\001(\t\022\022\n\nconfidence\030\t \001(\002\022&\n\004bbox\030\n \001(\0132\030."
      "calmcar.perception.Rect\022\016\n\006length\030\013 \001(\002\022"
      "\022\n\nlength_std\030\014 \001(\002\022\r\n\005width\030\r \001(\002\022\021\n\twi"
      "dth_std\030\016 \001(\002\022\016\n\006height\030\017 \001(\002\022\022\n\nheight_"
      "std\030\020 \001(\002\022\021\n\tage_count\030\021 \001(\003\022\023\n\013age_seco"
      "nds\030\022 \001(\002\022;\n\017visibility_side\030\023 \001(\0162\".cal"
      "mcar.perception.VisibilitySide\022\024\n\014lat_di"
      "stance\030\024 \001(\002\022\030\n\020lat_distance_std\030\025 \001(\002\022\025"
      "\n\rlong_distance\030\026 \001(\002\022\031\n\021long_distance_s"
      "td\030\027 \001(\002\022\035\n\025relative_lat_velocity\030\030 \001(\002\022"
      "!\n\031relative_lat_velocity_std\030\031 \001(\002\022\036\n\026re"
      "lative_long_velocity\030\032 \001(\002\022\"\n\032relative_l"
      "ong_velocity_std\030\033 \001(\002\022\030\n\020abs_lat_veloci"
      "ty\030\034 \001(\002\022\034\n\024abs_lat_velocity_std\030\035 \001(\002\022\031"
      "\n\021abs_long_velocity\030\036 \001(\002\022\035\n\025abs_long_ve"
      "locity_std\030\037 \001(\002\022\030\n\020relative_lat_acc\030  \001"
      "(\002\022\034\n\024relative_lat_acc_std\030! \001(\002\022\031\n\021rela"
      "tive_long_acc\030\" \001(\002\022\035\n\025relative_long_acc"
      "_std\030# \001(\002\022\023\n\013abs_lat_acc\030$ \001(\002\022\027\n\017abs_l"
      "at_acc_std\030% \001(\002\022\024\n\014abs_long_acc\030& \001(\002\022\030"
      "\n\020abs_long_acc_std\030\' \001(\002\022\021\n\tabs_speed\030( "
      "\001(\002\022\025\n\rabs_speed_std\030) \001(\002\022\030\n\020abs_accele"
      "ration\030* \001(\002\022\034\n\024abs_acceleration_std\030+ \001"
      "(\002\022\017\n\007heading\030, \001(\002\022\023\n\013heading_std\030- \001(\002"
      "\022\023\n\013inverse_ttc\030. \001(\002\022\027\n\017inverse_ttc_std"
      "\030/ \001(\002\022\022\n\nangle_left\0300 \001(\002\022\023\n\013angle_righ"
      "t\0301 \001(\002\022\022\n\nangle_rate\0302 \001(\002\022\022\n\nangle_sid"
      "e\0303 \001(\002\022\030\n\020top_out_of_image\0304 \001(\010\022\033\n\023bot"
      "tom_out_of_image\0305 \001(\010\022\031\n\021left_out_of_im"
      "age\0306 \001(\010\022\032\n\022right_out_of_image\0307 \001(\010\022\023\n"
      "\013brake_light\0308 \001(\010\022\033\n\023turn_indicator_lef"
      "t\0309 \001(\010\022\034\n\024turn_indicator_right\030: \001(\010\022=\n"
      "\020measuring_status\030; \001(\0132#.calmcar.percep"
      "tion.MeasuringStatus\022A\n\022motion_orientati"
      "on\030< \001(\0162%.calmcar.perception.MotionOrie"
      "ntation\022;\n\017motion_category\030= \001(\0162\".calmc"
      "ar.perception.MotionCategory\0227\n\rmotion_s"
      "tatus\030> \001(\0162 .calmcar.perception.MotionS"
      "tatus\0225\n\014cutin_cutout\030\? \001(\0162\037.calmcar.pe"
      "rception.CutInCutOut\"\201\007\n\014TrafficLight\022@\n"
      "\017camera_position\030\001 \001(\0162\'.calmcar.percept"
      "ion.CameraInfo.Position\022\021\n\ttimestamp\030\002 \001"
      "(\003\022\021\n\tstruct_id\030\003 \001(\003\022\017\n\007spot_id\030\004 \001(\003\022\016"
      "\n\006class_\030\005 \001(\003\022\022\n\nclass_name\030\006 \001(\t\022\024\n\014tr"
      "acking_age\030\007 \001(\003\022&\n\004bbox\030\010 \001(\0132\030.calmcar"
      ".perception.Rect\022\016\n\006height\030\t \001(\002\022\r\n\005widt"
      "h\030\n \001(\002\022\024\n\014lat_distance\030\013 \001(\002\022\030\n\020lat_dis"
      "tance_std\030\014 \001(\002\022\025\n\rlong_distance\030\r \001(\002\022\031"
      "\n\021long_distance_std\030\016 \001(\002\022\022\n\nrel_height\030"
      "\017 \001(\002\022\026\n\016rel_height_std\030\020 \001(\002\0225\n\005color\030\021"
      " \001(\0162&.calmcar.perception.TrafficLight.C"
      "olor\022\030\n\020color_confidence\030\022 \001(\002\0223\n\004type\030\023"
      " \001(\0162%.calmcar.perception.TrafficLight.T"
      "ype\022\027\n\017type_confidence\030\024 \001(\002\0223\n\004mode\030\025 \001"
      "(\0162%.calmcar.perception.TrafficLight.Mod"
      "e\"L\n\005Color\022\021\n\rCOLOR_UNKNOWN\020\000\022\017\n\013COLOR_G"
      "REEN\020\001\022\r\n\tCOLOR_RED\020\002\022\020\n\014COLOR_YELLOW\020\003\""
      "\221\001\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\027\n\023TYPE_ARROW"
      "_STRAIGHT\020\001\022\023\n\017TYPE_ARROW_LEFT\020\002\022\024\n\020TYPE"
      "_ARROW_RIGHT\020\003\022\024\n\020TYPE_ARROW_UTURN\020\004\022\017\n\013"
      "TYPE_CIRCLE\020\005\022\014\n\010TYPE_NUM\020\006\"3\n\004Mode\022\r\n\tN"
      "O_BRIGHT\020\000\022\021\n\rALWAYS_BRIGHT\020\001\022\t\n\005FLASH\020\002"
      "\"\320\003\n\013TrafficSign\022@\n\017camera_position\030\001 \001("
      "\0162\'.calmcar.perception.CameraInfo.Positi"
      "on\022\021\n\ttimestamp\030\002 \001(\003\022\n\n\002id\030\003 \001(\003\022\016\n\006cla"
      "ss_\030\004 \001(\003\022\020\n\010subclass\030\005 \001(\003\022\022\n\nclass_nam"
      "e\030\006 \001(\t\022\025\n\rsubclass_name\030\007 \001(\t\022&\n\004bbox\030\010"
      " \001(\0132\030.calmcar.perception.Rect\022\016\n\006height"
      "\030\t \001(\002\022\r\n\005width\030\n \001(\002\022\024\n\014lat_distance\030\013 "
      "\001(\002\022\025\n\rlong_distance\030\014 \001(\002\022\024\n\014tracking_a"
      "ge\030\r \001(\003\022G\n\trelevance\030\016 \001(\01624.calmcar.pe"
      "rception.TrafficSign.TrafficSIgnRelevanc"
      "y\"@\n\024TrafficSIgnRelevancy\022\n\n\006Unknow\020\000\022\014\n"
      "\010RELEVANT\020\001\022\016\n\nUNRELEVANT\020\002\"\306\r\n\017TrafficS"
      "ignType\0226\n\004type\030\001 \001(\0162(.calmcar.percepti"
      "on.TrafficSignType.Type\022)\n\004sign\030\002 \001(\0132\033."
      "google.protobuf.Int32Value\":\n\004Type\022\013\n\007UN"
      "KNOWN\020\000\022\013\n\007WARNING\020\006\022\014\n\010PROHIBIT\020\007\022\n\n\006AS"
      "SIST\020\013\"\241\006\n\017ProhibitionSign\022\020\n\014SPEED_LIMI"
      "T5\020\000\022\021\n\rSPEED_LIMIT10\020\001\022\021\n\rSPEED_LIMIT15"
      "\020\002\022\021\n\rSPEED_LIMIT20\020\003\022\021\n\rSPEED_LIMIT30\020\004"
      "\022\021\n\rSPEED_LIMIT35\020\005\022\021\n\rSPEED_LIMIT40\020\006\022\021"
      "\n\rSPEED_LIMIT50\020\007\022\021\n\rSPEED_LIMIT60\020\010\022\021\n\r"
      "SPEED_LIMIT70\020\t\022\021\n\rSPEED_LIMIT80\020\n\022\021\n\rSP"
      "EED_LIMIT90\020\013\022\022\n\016SPEED_LIMIT100\020\014\022\022\n\016SPE"
      "ED_LIMIT110\020\r\022\022\n\016SPEED_LIMIT120\020\016\022\010\n\004STO"
      "P\020\017\022\t\n\005YIELD\020\020\022\014\n\010NO_ENTRY\020\021\022\017\n\013DONOT_EN"
      "TER\020\022\022\025\n\021NO_MOTOR_VEHICLES\020\023\022\r\n\tNO_TRUCK"
      "S\020\024\022\022\n\016NO_LARGE_BUESE\020\025\022\022\n\016NO_MOTORCYCLE"
      "S\020\026\022\027\n\023ONLY_MOTOR_VEHICLES\020\027\022\022\n\016NO_PEDES"
      "TRIANS\020\030\022\020\n\014NO_LEFT_TURN\020\031\022\021\n\rNO_RIGHT_T"
      "URN\020\032\022\r\n\tNO_U_TURN\020\033\022\021\n\rNO_OVERTAKING\020\034\022"
      "\017\n\013NO_STOPPING\020\035\022\016\n\nNO_HONKING\020\036\022\021\n\rMAX_"
      "CLEARANCE\020\037\022\020\n\014WEIGHT_LIMIT\020 \022\025\n\021AXLE_WE"
      "IGHT_LIMIT\020!\022\023\n\017SPEED_LIMIT_END\020\"\022\020\n\014NO_"
      "MINIBUSES\020#\022\016\n\nNO_TRACTOR\020$\022\017\n\013NO_STRAIG"
      "HT\020%\022\026\n\022NO_LEFT_RIGHT_TURN\020&\022\025\n\021NO_OVERT"
      "AKING_END\020\'\022\r\n\tMAX_WIDTH\020(\022\026\n\022HAZARDOUS_"
      "VEHICLES\020)\"\217\005\n\013WarningSign\022\016\n\nCROSSROADS"
      "\020\000\022\017\n\013SHARP_CURVE\020\001\022\021\n\rREVERSE_CURVE\020\002\022\022"
      "\n\016WINDING_CURVES\020\003\022\021\n\rSTEEP_DESCENT\020\004\022\017\n"
      "\013NARROW_ROAD\020\005\022\021\n\rNARROW_BRIDGE\020\006\022\023\n\017TWO"
      "_WAY_TRAFFIC\020\007\022\025\n\021WATCH_PEDESTRIANS\020\010\022\022\n"
      "\016WATCH_CHILDREN\020\t\022\022\n\016TRAFFIC_LIGHTS\020\n\022\020\n"
      "\014FALING_ROCKS\020\013\022\r\n\tCROSSWIND\020\014\022\024\n\020SLIPPE"
      "RY_SURFACE\020\r\022\027\n\023STEEP_MOUNTAIN_ROAD\020\016\022\023\n"
      "\017EMBANKMENT_ROAD\020\017\022\013\n\007VILLAGE\020\020\022\n\n\006TUNNE"
      "L\020\021\022\024\n\020HUMP_BACK_BRIDGE\020\022\022\016\n\nBUMPY_ROAD\020"
      "\023\022\034\n\030GUARDED_RAILWAY_CROSSING\020\024\022\036\n\032UNGUA"
      "RDED_RAILWAY_CROSSING\020\025\022\026\n\022NON_MOTOR_VEH"
      "ICLES\020\026\022\027\n\023ACCIDENT_BLACK_SPOT\020\027\022\r\n\tSLOW"
      "_DOWN\020\030\022\r\n\tOBSTACLES\020\031\022\021\n\rCAUTION_DRIVE\020"
      "\032\022\r\n\tROAD_WORK\020\033\022\023\n\017SUGGESTED_SPEED\020\034\022\023\n"
      "\017REVERSIBLE_LANE\020\035\022\017\n\013ROADS_MERGE\020\036\022\014\n\010I"
      "CY_ROAD\020\037\022\021\n\rQUEUES_LIKELY\020 \"^\n\nAssistSi"
      "gn\022\016\n\nTIME_LIMIT\020\000\022\n\n\006SCHOOL\020\001\022\010\n\004RAMP\020\002"
      "\022\016\n\nWHOLE_ROAD\020\003\022\032\n\026FULL_SPEED_MEASUREME"
      "NT\020\004\"\252\003\n\021TrafficSignStatus\0221\n\004sign\030\001 \001(\013"
      "2#.calmcar.perception.TrafficSignType\022:\n"
      "\rderived_signs\030\002 \003(\0132#.calmcar.perceptio"
      "n.TrafficSignType\022&\n\004bbox\030\003 \001(\0132\030.calmca"
      "r.perception.Rect\022\024\n\014lat_distance\030\004 \001(\002\022"
      "\025\n\rlong_distance\030\005 \001(\002\022\023\n\013panel_width\030\006 "
      "\001(\002\022\024\n\014panel_height\030\007 \001(\002\022\016\n\006height\030\010 \001("
      "\002\0220\n\013speed_limit\030\t \001(\0132\033.google.protobuf"
      ".FloatValue\0221\n\014height_limit\030\n \001(\0132\033.goog"
      "le.protobuf.FloatValue\0221\n\014weight_limit\030\013"
      " \001(\0132\033.google.protobuf.FloatValue\"\336\010\n\010Fa"
      "ilsafe\022@\n\017camera_position\030\001 \001(\0162\'.calmca"
      "r.perception.CameraInfo.Position\022\021\n\ttime"
      "stamp\030\002 \001(\003\022F\n\017blockage_status\030\003 \001(\0162-.c"
      "almcar.perception.Failsafe.FailSafeBlock"
      "age\022\025\n\rblockage_name\030\004 \001(\t\022D\n\016weather_st"
      "atus\030\005 \001(\0162,.calmcar.perception.Failsafe"
      ".FailSafeWeather\022\024\n\014weather_name\030\006 \001(\t\022N"
      "\n\023illumination_status\030\007 \001(\01621.calmcar.pe"
      "rception.Failsafe.FailSafeIllumination\022\031"
      "\n\021illumination_name\030\010 \001(\t\022O\n\024image_limit"
      "ed_status\030\t \001(\01621.calmcar.perception.Fai"
      "lsafe.FailSafeImageLimited\022\032\n\022image_limi"
      "ted_name\030\n \001(\t\022\024\n\014out_of_focus\030\013 \001(\010\022\035\n\025"
      "impacted_technologies\030\014 \001(\005\"e\n\020FailSafeB"
      "lockage\022\024\n\020BLOCKAGE_UNKNOWN\020\000\022\021\n\rBLOCKAG"
      "E_FULL\020\001\022\025\n\021BLOCKAGE_PARTICAL\020\002\022\021\n\rBLOCK"
      "AGE_NONE\020\003\"n\n\017FailSafeWeather\022\023\n\017WEATHER"
      "_UNKNOWN\020\000\022\017\n\013WEATHER_FOG\020\001\022\020\n\014WEATHER_R"
      "AIN\020\002\022\020\n\014WEATHER_SNOW\020\003\022\021\n\rWEATHER_SUNNY"
      "\020\004\"u\n\024FailSafeIllumination\022\030\n\024ILLUMINATI"
      "ON_UNKNOWN\020\000\022\024\n\020ILLUMINATION_DAY\020\001\022\025\n\021IL"
      "LUMINATION_DUSK\020\002\022\026\n\022ILLUMINATION_NIGHT\020"
      "\003\"\346\001\n\024FailSafeImageLimited\022\031\n\025IMAGE_LIMI"
      "TED_UNKNOWN\020\000\022\030\n\024IMAGE_LIMITED_NORMAL\020\001\022"
      "\030\n\024IMAGE_LIMITED_LOWSUN\020\002\022\032\n\026IMAGE_LIMIT"
      "ED_SPALSHES\020\003\022\026\n\022IMAGE_LIMITED_BLUR\020\004\022\030\n"
      "\024IMAGE_LIMITED_SUNRAY\020\005\022\030\n\024IMAGE_LIMITED"
      "_FROZEN\020\006\022\027\n\023IMAGE_LIMITED_OTHER\020\007\"\247\007\n\017P"
      "erceptionFrame\022*\n\006header\030\001 \001(\0132\032.calmcar"
      ".perception.Header\022\020\n\010vd_count\030\002 \001(\003\022\021\n\t"
      "vru_count\030\003 \001(\003\022\026\n\016num_of_objects\030\004 \001(\003\022"
      "\017\n\007cipv_id\030\005 \001(\003\022\023\n\013vd_niv_left\030\006 \001(\003\022\024\n"
      "\014vd_niv_right\030\007 \001(\003\022/\n\tcipv_lost\030\010 \001(\0162\034"
      ".calmcar.perception.CipvLost\022/\n\tallow_ac"
      "c\030\t \001(\0162\034.calmcar.perception.AllowAcc\022*\n"
      "\006object\030\n \003(\0132\032.calmcar.perception.Objec"
      "t\022/\n\troad_mark\030\013 \003(\0132\034.calmcar.perceptio"
      "n.RoadMark\022&\n\004lane\030\014 \001(\0132\030.calmcar.perce"
      "ption.Lane\0221\n\nfree_space\030\r \001(\0132\035.calmcar"
      ".perception.FreeSpace\0227\n\rtfl_structure\030\016"
      " \003(\0132 .calmcar.perception.TrafficLight\022:"
      "\n\020tfl_struct_state\030\017 \003(\0132 .calmcar.perce"
      "ption.TrafficLight\022\030\n\020tfl_struct_count\030\020"
      " \001(\003\022\026\n\016tfl_spot_count\030\021 \001(\003\0225\n\014traffic_"
      "sign\030\022 \003(\0132\037.calmcar.perception.TrafficS"
      "ign\022B\n\023traffic_sign_status\030\023 \003(\0132%.calmc"
      "ar.perception.TrafficSignStatus\022.\n\010fails"
      "afe\030\024 \003(\0132\034.calmcar.perception.Failsafe\022"
      "1\n\014vehicle_info\030\025 \003(\0132\033.calmcar.percepti"
      "on.Vehicle\022\027\n\017barricade_count\030\026 \001(\003\0227\n\020b"
      "arricade_object\030\027 \003(\0132\035.calmcar.percepti"
      "on.Barricade**\n\020MeasuringStatus0\022\n\n\006MS_O"
      "LD\020\000\022\n\n\006MS_NEW\020\001*5\n\020MeasuringStatus1\022\020\n\014"
      "MS_PREDICTED\020\000\022\017\n\013MS_MEASURED\020\001*0\n\020Measu"
      "ringStatus2\022\016\n\nMS_INVALID\020\000\022\014\n\010MS_VALID\020"
      "\001*\202\002\n\016MotionCategory\022\017\n\013MC_UNFILLED\020\000\022\020\n"
      "\014MC_UNDEFINED\020\001\022\016\n\nMC_PASSING\020\002\022\021\n\rMC_PA"
      "SSING_IN\020\003\022\022\n\016MC_PASSING_OUT\020\004\022\023\n\017MC_CLO"
      "SE_CUT_IN\020\005\022\020\n\014MC_MOVING_IN\020\006\022\021\n\rMC_MOVI"
      "NG_OUT\020\007\022\017\n\013MC_CROSSING\020\010\022\013\n\007MC_LTAP\020\t\022\013"
      "\n\007MC_RTAP\020\n\022\r\n\tMC_MOVING\020\013\022\021\n\rMC_PRECEED"
      "ING\020\014\022\017\n\013MC_ONCOMING\020\r*\344\001\n\021MotionOrienta"
      "tion\022\016\n\nMO_INVALID\020\000\022\025\n\021MO_DRIFTING_RIGH"
      "T\020\001\022\025\n\021MO_CROSSING_RIGHT\020\003\022\030\n\024MO_OC_DRIF"
      "TING_RIGHT\020\005\022\017\n\013MO_ONCOMING\020\006\022\027\n\023MO_OC_D"
      "RIFTING_LEFT\020\007\022\024\n\020MO_CROSSING_LEFT\020\t\022\024\n\020"
      "MO_DRIFTING_LEFT\020\013\022\021\n\rMO_PRECEEDING\020\014\022\016\n"
      "\nMO_UNKNOWN\020\r*\?\n\016VisibilitySide\022\022\n\016VS_NO"
      "T_VISIBLE\020\000\022\014\n\010VS_FRONT\020\001\022\013\n\007VS_REAR\020\002*\260"
      "\001\n\014MotionStatus\022\031\n\025MOTION_STATUS_UNKNOWN"
      "\020\000\022\030\n\024MOTION_STATUS_PARKED\020\001\022\031\n\025MOTION_S"
      "TATUS_STOPPED\020\002\022\030\n\024MOTION_STATUS_MOVING\020"
      "\003\022\032\n\026MOTION_STATUS_ONCOMING\020\004\022\032\n\026MOTION_"
      "STATUS_CROSSING\020\005*\343\001\n\013CutInCutOut\022\032\n\026CUT"
      "_IN_CUT_OUT_UNKNOWN\020\000\022#\n\037CUT_IN_CUT_OUT_"
      "HOST_CUT_IN_LEFT\020\001\022$\n CUT_IN_CUT_OUT_HOS"
      "T_CUT_IN_RIGHT\020\002\022$\n CUT_IN_CUT_OUT_HOST_"
      "CUT_OUT_LEFT\020\003\022%\n!CUT_IN_CUT_OUT_HOST_CU"
      "T_OUT_RIGHT\020\004\022 \n\034CUT_IN_CUT_OUT_NO_CUT_I"
      "N_OUT\020\005*c\n\010CipvLost\022\024\n\020CipvLost_NO_LOSS\020"
      "\000\022 \n\034CipvLost_LOST_TARGET_FOV_OUT\020\001\022\037\n\033C"
      "ipvLost_LOST_TARGET_FOV_IN\020\002*a\n\010AllowAcc"
      "\022\027\n\023AllowAcc_FREE_SPACE\020\000\022\033\n\027AllowAcc_SP"
      "ACE_NOT_FREE\020\001\022\037\n\033AllowAcc_FREE_SPACE_UN"
      "KNOWN\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 10895);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_perception_5ftypes_2eproto::AddDescriptors();
  ::protobuf_perception_5fsensor_5finfo_2eproto::AddDescriptors();
  ::protobuf_perception_5fvehicle_2eproto::AddDescriptors();
  ::protobuf_perception_5froad_2eproto::AddDescriptors();
  ::protobuf_perception_5fbarricade_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_perception_2eproto
namespace calmcar {
namespace perception {
const ::google::protobuf::EnumDescriptor* Header_ProtobufVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[0];
}
bool Header_ProtobufVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_ProtobufVersion Header::V_1_0_0;
const Header_ProtobufVersion Header::V_1_0_1;
const Header_ProtobufVersion Header::V_1_0_2;
const Header_ProtobufVersion Header::V_1_0_3;
const Header_ProtobufVersion Header::V_1_0_4;
const Header_ProtobufVersion Header::V_1_0_5;
const Header_ProtobufVersion Header::V_1_0_6;
const Header_ProtobufVersion Header::V_1_0_7;
const Header_ProtobufVersion Header::V_1_0_8;
const Header_ProtobufVersion Header::V_1_0_9;
const Header_ProtobufVersion Header::V_1_0_10;
const Header_ProtobufVersion Header::V_1_0_11;
const Header_ProtobufVersion Header::V_1_0_12;
const Header_ProtobufVersion Header::V_1_0_13;
const Header_ProtobufVersion Header::V_1_0_14;
const Header_ProtobufVersion Header::CURRENT_VERSION;
const Header_ProtobufVersion Header::ProtobufVersion_MIN;
const Header_ProtobufVersion Header::ProtobufVersion_MAX;
const int Header::ProtobufVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_ObjectVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[1];
}
bool Header_ObjectVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_ObjectVersion Header::OD_V_1_0;
const Header_ObjectVersion Header::OD_V_1_1;
const Header_ObjectVersion Header::OD_CURRENT_VERSION;
const Header_ObjectVersion Header::ObjectVersion_MIN;
const Header_ObjectVersion Header::ObjectVersion_MAX;
const int Header::ObjectVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_TrafficLightStructVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[2];
}
bool Header_TrafficLightStructVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_TrafficLightStructVersion Header::TFL_STRUCT_V_1_0;
const Header_TrafficLightStructVersion Header::TFL_STRUCT_V_1_1;
const Header_TrafficLightStructVersion Header::TFL_STRUCT_CURRENT_VERSION;
const Header_TrafficLightStructVersion Header::TrafficLightStructVersion_MIN;
const Header_TrafficLightStructVersion Header::TrafficLightStructVersion_MAX;
const int Header::TrafficLightStructVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_TrafficLightSpotVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[3];
}
bool Header_TrafficLightSpotVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_TrafficLightSpotVersion Header::TFL_SPOT_V_1_0;
const Header_TrafficLightSpotVersion Header::TFL_SPOT_V_1_1;
const Header_TrafficLightSpotVersion Header::TFL_SPOT_CURRENT_VERSION;
const Header_TrafficLightSpotVersion Header::TrafficLightSpotVersion_MIN;
const Header_TrafficLightSpotVersion Header::TrafficLightSpotVersion_MAX;
const int Header::TrafficLightSpotVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_TrafficSignVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[4];
}
bool Header_TrafficSignVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_TrafficSignVersion Header::TSR_V_1_0;
const Header_TrafficSignVersion Header::TSR_V_1_1;
const Header_TrafficSignVersion Header::TSR_CURRENT_VERSION;
const Header_TrafficSignVersion Header::TrafficSignVersion_MIN;
const Header_TrafficSignVersion Header::TrafficSignVersion_MAX;
const int Header::TrafficSignVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_FailSafeVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[5];
}
bool Header_FailSafeVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_FailSafeVersion Header::FS_V_1_0;
const Header_FailSafeVersion Header::FS_V_1_1;
const Header_FailSafeVersion Header::FS_CURRENT_VERSION;
const Header_FailSafeVersion Header::FailSafeVersion_MIN;
const Header_FailSafeVersion Header::FailSafeVersion_MAX;
const int Header::FailSafeVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_LaneVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[6];
}
bool Header_LaneVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_LaneVersion Header::LANE_V_1_0;
const Header_LaneVersion Header::LANE_V_1_1;
const Header_LaneVersion Header::LANE_CURRENT_VERSION;
const Header_LaneVersion Header::LaneVersion_MIN;
const Header_LaneVersion Header::LaneVersion_MAX;
const int Header::LaneVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_RoadMarkVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[7];
}
bool Header_RoadMarkVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_RoadMarkVersion Header::RM_V_1_0;
const Header_RoadMarkVersion Header::RM_V_1_1;
const Header_RoadMarkVersion Header::RM_CURRENT_VERSION;
const Header_RoadMarkVersion Header::RoadMarkVersion_MIN;
const Header_RoadMarkVersion Header::RoadMarkVersion_MAX;
const int Header::RoadMarkVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_FreeSpaceVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[8];
}
bool Header_FreeSpaceVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_FreeSpaceVersion Header::FSP_V_1_0;
const Header_FreeSpaceVersion Header::FSP_V_1_1;
const Header_FreeSpaceVersion Header::FSP_CURRENT_VERSION;
const Header_FreeSpaceVersion Header::FreeSpaceVersion_MIN;
const Header_FreeSpaceVersion Header::FreeSpaceVersion_MAX;
const int Header::FreeSpaceVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_BarricadeVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[9];
}
bool Header_BarricadeVersion_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_BarricadeVersion Header::BA_V_1_0;
const Header_BarricadeVersion Header::BA_CURRENT_VERSION;
const Header_BarricadeVersion Header::BarricadeVersion_MIN;
const Header_BarricadeVersion Header::BarricadeVersion_MAX;
const int Header::BarricadeVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficLight_Color_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[10];
}
bool TrafficLight_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_Color TrafficLight::COLOR_UNKNOWN;
const TrafficLight_Color TrafficLight::COLOR_GREEN;
const TrafficLight_Color TrafficLight::COLOR_RED;
const TrafficLight_Color TrafficLight::COLOR_YELLOW;
const TrafficLight_Color TrafficLight::Color_MIN;
const TrafficLight_Color TrafficLight::Color_MAX;
const int TrafficLight::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficLight_Type_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[11];
}
bool TrafficLight_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_Type TrafficLight::TYPE_UNKNOWN;
const TrafficLight_Type TrafficLight::TYPE_ARROW_STRAIGHT;
const TrafficLight_Type TrafficLight::TYPE_ARROW_LEFT;
const TrafficLight_Type TrafficLight::TYPE_ARROW_RIGHT;
const TrafficLight_Type TrafficLight::TYPE_ARROW_UTURN;
const TrafficLight_Type TrafficLight::TYPE_CIRCLE;
const TrafficLight_Type TrafficLight::TYPE_NUM;
const TrafficLight_Type TrafficLight::Type_MIN;
const TrafficLight_Type TrafficLight::Type_MAX;
const int TrafficLight::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficLight_Mode_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[12];
}
bool TrafficLight_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_Mode TrafficLight::NO_BRIGHT;
const TrafficLight_Mode TrafficLight::ALWAYS_BRIGHT;
const TrafficLight_Mode TrafficLight::FLASH;
const TrafficLight_Mode TrafficLight::Mode_MIN;
const TrafficLight_Mode TrafficLight::Mode_MAX;
const int TrafficLight::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSign_TrafficSIgnRelevancy_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[13];
}
bool TrafficSign_TrafficSIgnRelevancy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSign_TrafficSIgnRelevancy TrafficSign::Unknow;
const TrafficSign_TrafficSIgnRelevancy TrafficSign::RELEVANT;
const TrafficSign_TrafficSIgnRelevancy TrafficSign::UNRELEVANT;
const TrafficSign_TrafficSIgnRelevancy TrafficSign::TrafficSIgnRelevancy_MIN;
const TrafficSign_TrafficSIgnRelevancy TrafficSign::TrafficSIgnRelevancy_MAX;
const int TrafficSign::TrafficSIgnRelevancy_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignType_Type_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[14];
}
bool TrafficSignType_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 6:
    case 7:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignType_Type TrafficSignType::UNKNOWN;
const TrafficSignType_Type TrafficSignType::WARNING;
const TrafficSignType_Type TrafficSignType::PROHIBIT;
const TrafficSignType_Type TrafficSignType::ASSIST;
const TrafficSignType_Type TrafficSignType::Type_MIN;
const TrafficSignType_Type TrafficSignType::Type_MAX;
const int TrafficSignType::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignType_ProhibitionSign_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[15];
}
bool TrafficSignType_ProhibitionSign_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT5;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT10;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT15;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT20;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT30;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT35;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT40;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT50;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT60;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT70;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT80;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT90;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT100;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT110;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT120;
const TrafficSignType_ProhibitionSign TrafficSignType::STOP;
const TrafficSignType_ProhibitionSign TrafficSignType::YIELD;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_ENTRY;
const TrafficSignType_ProhibitionSign TrafficSignType::DONOT_ENTER;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_MOTOR_VEHICLES;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_TRUCKS;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_LARGE_BUESE;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_MOTORCYCLES;
const TrafficSignType_ProhibitionSign TrafficSignType::ONLY_MOTOR_VEHICLES;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_PEDESTRIANS;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_LEFT_TURN;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_RIGHT_TURN;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_U_TURN;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_OVERTAKING;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_STOPPING;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_HONKING;
const TrafficSignType_ProhibitionSign TrafficSignType::MAX_CLEARANCE;
const TrafficSignType_ProhibitionSign TrafficSignType::WEIGHT_LIMIT;
const TrafficSignType_ProhibitionSign TrafficSignType::AXLE_WEIGHT_LIMIT;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT_END;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_MINIBUSES;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_TRACTOR;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_STRAIGHT;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_LEFT_RIGHT_TURN;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_OVERTAKING_END;
const TrafficSignType_ProhibitionSign TrafficSignType::MAX_WIDTH;
const TrafficSignType_ProhibitionSign TrafficSignType::HAZARDOUS_VEHICLES;
const TrafficSignType_ProhibitionSign TrafficSignType::ProhibitionSign_MIN;
const TrafficSignType_ProhibitionSign TrafficSignType::ProhibitionSign_MAX;
const int TrafficSignType::ProhibitionSign_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignType_WarningSign_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[16];
}
bool TrafficSignType_WarningSign_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignType_WarningSign TrafficSignType::CROSSROADS;
const TrafficSignType_WarningSign TrafficSignType::SHARP_CURVE;
const TrafficSignType_WarningSign TrafficSignType::REVERSE_CURVE;
const TrafficSignType_WarningSign TrafficSignType::WINDING_CURVES;
const TrafficSignType_WarningSign TrafficSignType::STEEP_DESCENT;
const TrafficSignType_WarningSign TrafficSignType::NARROW_ROAD;
const TrafficSignType_WarningSign TrafficSignType::NARROW_BRIDGE;
const TrafficSignType_WarningSign TrafficSignType::TWO_WAY_TRAFFIC;
const TrafficSignType_WarningSign TrafficSignType::WATCH_PEDESTRIANS;
const TrafficSignType_WarningSign TrafficSignType::WATCH_CHILDREN;
const TrafficSignType_WarningSign TrafficSignType::TRAFFIC_LIGHTS;
const TrafficSignType_WarningSign TrafficSignType::FALING_ROCKS;
const TrafficSignType_WarningSign TrafficSignType::CROSSWIND;
const TrafficSignType_WarningSign TrafficSignType::SLIPPERY_SURFACE;
const TrafficSignType_WarningSign TrafficSignType::STEEP_MOUNTAIN_ROAD;
const TrafficSignType_WarningSign TrafficSignType::EMBANKMENT_ROAD;
const TrafficSignType_WarningSign TrafficSignType::VILLAGE;
const TrafficSignType_WarningSign TrafficSignType::TUNNEL;
const TrafficSignType_WarningSign TrafficSignType::HUMP_BACK_BRIDGE;
const TrafficSignType_WarningSign TrafficSignType::BUMPY_ROAD;
const TrafficSignType_WarningSign TrafficSignType::GUARDED_RAILWAY_CROSSING;
const TrafficSignType_WarningSign TrafficSignType::UNGUARDED_RAILWAY_CROSSING;
const TrafficSignType_WarningSign TrafficSignType::NON_MOTOR_VEHICLES;
const TrafficSignType_WarningSign TrafficSignType::ACCIDENT_BLACK_SPOT;
const TrafficSignType_WarningSign TrafficSignType::SLOW_DOWN;
const TrafficSignType_WarningSign TrafficSignType::OBSTACLES;
const TrafficSignType_WarningSign TrafficSignType::CAUTION_DRIVE;
const TrafficSignType_WarningSign TrafficSignType::ROAD_WORK;
const TrafficSignType_WarningSign TrafficSignType::SUGGESTED_SPEED;
const TrafficSignType_WarningSign TrafficSignType::REVERSIBLE_LANE;
const TrafficSignType_WarningSign TrafficSignType::ROADS_MERGE;
const TrafficSignType_WarningSign TrafficSignType::ICY_ROAD;
const TrafficSignType_WarningSign TrafficSignType::QUEUES_LIKELY;
const TrafficSignType_WarningSign TrafficSignType::WarningSign_MIN;
const TrafficSignType_WarningSign TrafficSignType::WarningSign_MAX;
const int TrafficSignType::WarningSign_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignType_AssistSign_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[17];
}
bool TrafficSignType_AssistSign_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignType_AssistSign TrafficSignType::TIME_LIMIT;
const TrafficSignType_AssistSign TrafficSignType::SCHOOL;
const TrafficSignType_AssistSign TrafficSignType::RAMP;
const TrafficSignType_AssistSign TrafficSignType::WHOLE_ROAD;
const TrafficSignType_AssistSign TrafficSignType::FULL_SPEED_MEASUREMENT;
const TrafficSignType_AssistSign TrafficSignType::AssistSign_MIN;
const TrafficSignType_AssistSign TrafficSignType::AssistSign_MAX;
const int TrafficSignType::AssistSign_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Failsafe_FailSafeBlockage_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[18];
}
bool Failsafe_FailSafeBlockage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Failsafe_FailSafeBlockage Failsafe::BLOCKAGE_UNKNOWN;
const Failsafe_FailSafeBlockage Failsafe::BLOCKAGE_FULL;
const Failsafe_FailSafeBlockage Failsafe::BLOCKAGE_PARTICAL;
const Failsafe_FailSafeBlockage Failsafe::BLOCKAGE_NONE;
const Failsafe_FailSafeBlockage Failsafe::FailSafeBlockage_MIN;
const Failsafe_FailSafeBlockage Failsafe::FailSafeBlockage_MAX;
const int Failsafe::FailSafeBlockage_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Failsafe_FailSafeWeather_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[19];
}
bool Failsafe_FailSafeWeather_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Failsafe_FailSafeWeather Failsafe::WEATHER_UNKNOWN;
const Failsafe_FailSafeWeather Failsafe::WEATHER_FOG;
const Failsafe_FailSafeWeather Failsafe::WEATHER_RAIN;
const Failsafe_FailSafeWeather Failsafe::WEATHER_SNOW;
const Failsafe_FailSafeWeather Failsafe::WEATHER_SUNNY;
const Failsafe_FailSafeWeather Failsafe::FailSafeWeather_MIN;
const Failsafe_FailSafeWeather Failsafe::FailSafeWeather_MAX;
const int Failsafe::FailSafeWeather_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Failsafe_FailSafeIllumination_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[20];
}
bool Failsafe_FailSafeIllumination_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Failsafe_FailSafeIllumination Failsafe::ILLUMINATION_UNKNOWN;
const Failsafe_FailSafeIllumination Failsafe::ILLUMINATION_DAY;
const Failsafe_FailSafeIllumination Failsafe::ILLUMINATION_DUSK;
const Failsafe_FailSafeIllumination Failsafe::ILLUMINATION_NIGHT;
const Failsafe_FailSafeIllumination Failsafe::FailSafeIllumination_MIN;
const Failsafe_FailSafeIllumination Failsafe::FailSafeIllumination_MAX;
const int Failsafe::FailSafeIllumination_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Failsafe_FailSafeImageLimited_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[21];
}
bool Failsafe_FailSafeImageLimited_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Failsafe_FailSafeImageLimited Failsafe::IMAGE_LIMITED_UNKNOWN;
const Failsafe_FailSafeImageLimited Failsafe::IMAGE_LIMITED_NORMAL;
const Failsafe_FailSafeImageLimited Failsafe::IMAGE_LIMITED_LOWSUN;
const Failsafe_FailSafeImageLimited Failsafe::IMAGE_LIMITED_SPALSHES;
const Failsafe_FailSafeImageLimited Failsafe::IMAGE_LIMITED_BLUR;
const Failsafe_FailSafeImageLimited Failsafe::IMAGE_LIMITED_SUNRAY;
const Failsafe_FailSafeImageLimited Failsafe::IMAGE_LIMITED_FROZEN;
const Failsafe_FailSafeImageLimited Failsafe::IMAGE_LIMITED_OTHER;
const Failsafe_FailSafeImageLimited Failsafe::FailSafeImageLimited_MIN;
const Failsafe_FailSafeImageLimited Failsafe::FailSafeImageLimited_MAX;
const int Failsafe::FailSafeImageLimited_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MeasuringStatus0_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[22];
}
bool MeasuringStatus0_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MeasuringStatus1_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[23];
}
bool MeasuringStatus1_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MeasuringStatus2_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[24];
}
bool MeasuringStatus2_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MotionCategory_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[25];
}
bool MotionCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MotionOrientation_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[26];
}
bool MotionOrientation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VisibilitySide_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[27];
}
bool VisibilitySide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MotionStatus_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[28];
}
bool MotionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CutInCutOut_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[29];
}
bool CutInCutOut_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CipvLost_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[30];
}
bool CipvLost_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AllowAcc_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[31];
}
bool AllowAcc_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kFrameIndexFieldNumber;
const int Header::kTimestampFieldNumber;
const int Header::kPerceptionVersionFieldNumber;
const int Header::kProtobufVersionFieldNumber;
const int Header::kObjectVersionFieldNumber;
const int Header::kTflStructVersionFieldNumber;
const int Header::kTflSpotVersionFieldNumber;
const int Header::kTrafficSignVersionFieldNumber;
const int Header::kFailSafeVersionFieldNumber;
const int Header::kLaneVersionFieldNumber;
const int Header::kRoadMarkVersionFieldNumber;
const int Header::kFreeSpaceVersionFieldNumber;
const int Header::kBarricadeVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perception_2eproto::scc_info_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  perception_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.perception_version().size() > 0) {
    perception_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.perception_version_);
  }
  ::memcpy(&frame_index_, &from.frame_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&barricade_version_) -
    reinterpret_cast<char*>(&frame_index_)) + sizeof(barricade_version_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.Header)
}

void Header::SharedCtor() {
  perception_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&barricade_version_) -
      reinterpret_cast<char*>(&frame_index_)) + sizeof(barricade_version_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:calmcar.perception.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  perception_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perception_2eproto::scc_info_Header.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perception_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&barricade_version_) -
      reinterpret_cast<char*>(&frame_index_)) + sizeof(barricade_version_));
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 frame_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string perception_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_perception_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->perception_version().data(), static_cast<int>(this->perception_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.Header.perception_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.ProtobufVersion protobuf_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_protobuf_version(static_cast< ::calmcar::perception::Header_ProtobufVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.ObjectVersion object_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_object_version(static_cast< ::calmcar::perception::Header_ObjectVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.TrafficLightStructVersion tfl_struct_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tfl_struct_version(static_cast< ::calmcar::perception::Header_TrafficLightStructVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.TrafficLightSpotVersion tfl_spot_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tfl_spot_version(static_cast< ::calmcar::perception::Header_TrafficLightSpotVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.TrafficSignVersion traffic_sign_version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_traffic_sign_version(static_cast< ::calmcar::perception::Header_TrafficSignVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.FailSafeVersion fail_safe_version = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fail_safe_version(static_cast< ::calmcar::perception::Header_FailSafeVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.LaneVersion lane_version = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lane_version(static_cast< ::calmcar::perception::Header_LaneVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.RoadMarkVersion road_mark_version = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_road_mark_version(static_cast< ::calmcar::perception::Header_RoadMarkVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.FreeSpaceVersion free_space_version = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_free_space_version(static_cast< ::calmcar::perception::Header_FreeSpaceVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.BarricadeVersion barricade_version = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_barricade_version(static_cast< ::calmcar::perception::Header_BarricadeVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frame_index = 1;
  if (this->frame_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->frame_index(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // string perception_version = 3;
  if (this->perception_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->perception_version().data(), static_cast<int>(this->perception_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Header.perception_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->perception_version(), output);
  }

  // .calmcar.perception.Header.ProtobufVersion protobuf_version = 4;
  if (this->protobuf_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->protobuf_version(), output);
  }

  // .calmcar.perception.Header.ObjectVersion object_version = 5;
  if (this->object_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->object_version(), output);
  }

  // .calmcar.perception.Header.TrafficLightStructVersion tfl_struct_version = 6;
  if (this->tfl_struct_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->tfl_struct_version(), output);
  }

  // .calmcar.perception.Header.TrafficLightSpotVersion tfl_spot_version = 7;
  if (this->tfl_spot_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->tfl_spot_version(), output);
  }

  // .calmcar.perception.Header.TrafficSignVersion traffic_sign_version = 8;
  if (this->traffic_sign_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->traffic_sign_version(), output);
  }

  // .calmcar.perception.Header.FailSafeVersion fail_safe_version = 9;
  if (this->fail_safe_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->fail_safe_version(), output);
  }

  // .calmcar.perception.Header.LaneVersion lane_version = 10;
  if (this->lane_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->lane_version(), output);
  }

  // .calmcar.perception.Header.RoadMarkVersion road_mark_version = 11;
  if (this->road_mark_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->road_mark_version(), output);
  }

  // .calmcar.perception.Header.FreeSpaceVersion free_space_version = 12;
  if (this->free_space_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->free_space_version(), output);
  }

  // .calmcar.perception.Header.BarricadeVersion barricade_version = 13;
  if (this->barricade_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->barricade_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frame_index = 1;
  if (this->frame_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->frame_index(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // string perception_version = 3;
  if (this->perception_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->perception_version().data(), static_cast<int>(this->perception_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Header.perception_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->perception_version(), target);
  }

  // .calmcar.perception.Header.ProtobufVersion protobuf_version = 4;
  if (this->protobuf_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->protobuf_version(), target);
  }

  // .calmcar.perception.Header.ObjectVersion object_version = 5;
  if (this->object_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->object_version(), target);
  }

  // .calmcar.perception.Header.TrafficLightStructVersion tfl_struct_version = 6;
  if (this->tfl_struct_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->tfl_struct_version(), target);
  }

  // .calmcar.perception.Header.TrafficLightSpotVersion tfl_spot_version = 7;
  if (this->tfl_spot_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->tfl_spot_version(), target);
  }

  // .calmcar.perception.Header.TrafficSignVersion traffic_sign_version = 8;
  if (this->traffic_sign_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->traffic_sign_version(), target);
  }

  // .calmcar.perception.Header.FailSafeVersion fail_safe_version = 9;
  if (this->fail_safe_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->fail_safe_version(), target);
  }

  // .calmcar.perception.Header.LaneVersion lane_version = 10;
  if (this->lane_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->lane_version(), target);
  }

  // .calmcar.perception.Header.RoadMarkVersion road_mark_version = 11;
  if (this->road_mark_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->road_mark_version(), target);
  }

  // .calmcar.perception.Header.FreeSpaceVersion free_space_version = 12;
  if (this->free_space_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->free_space_version(), target);
  }

  // .calmcar.perception.Header.BarricadeVersion barricade_version = 13;
  if (this->barricade_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->barricade_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string perception_version = 3;
  if (this->perception_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->perception_version());
  }

  // int64 frame_index = 1;
  if (this->frame_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->frame_index());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // .calmcar.perception.Header.ProtobufVersion protobuf_version = 4;
  if (this->protobuf_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protobuf_version());
  }

  // .calmcar.perception.Header.ObjectVersion object_version = 5;
  if (this->object_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->object_version());
  }

  // .calmcar.perception.Header.TrafficLightStructVersion tfl_struct_version = 6;
  if (this->tfl_struct_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tfl_struct_version());
  }

  // .calmcar.perception.Header.TrafficLightSpotVersion tfl_spot_version = 7;
  if (this->tfl_spot_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tfl_spot_version());
  }

  // .calmcar.perception.Header.TrafficSignVersion traffic_sign_version = 8;
  if (this->traffic_sign_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->traffic_sign_version());
  }

  // .calmcar.perception.Header.FailSafeVersion fail_safe_version = 9;
  if (this->fail_safe_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fail_safe_version());
  }

  // .calmcar.perception.Header.LaneVersion lane_version = 10;
  if (this->lane_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_version());
  }

  // .calmcar.perception.Header.RoadMarkVersion road_mark_version = 11;
  if (this->road_mark_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->road_mark_version());
  }

  // .calmcar.perception.Header.FreeSpaceVersion free_space_version = 12;
  if (this->free_space_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->free_space_version());
  }

  // .calmcar.perception.Header.BarricadeVersion barricade_version = 13;
  if (this->barricade_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->barricade_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.perception_version().size() > 0) {

    perception_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.perception_version_);
  }
  if (from.frame_index() != 0) {
    set_frame_index(from.frame_index());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.protobuf_version() != 0) {
    set_protobuf_version(from.protobuf_version());
  }
  if (from.object_version() != 0) {
    set_object_version(from.object_version());
  }
  if (from.tfl_struct_version() != 0) {
    set_tfl_struct_version(from.tfl_struct_version());
  }
  if (from.tfl_spot_version() != 0) {
    set_tfl_spot_version(from.tfl_spot_version());
  }
  if (from.traffic_sign_version() != 0) {
    set_traffic_sign_version(from.traffic_sign_version());
  }
  if (from.fail_safe_version() != 0) {
    set_fail_safe_version(from.fail_safe_version());
  }
  if (from.lane_version() != 0) {
    set_lane_version(from.lane_version());
  }
  if (from.road_mark_version() != 0) {
    set_road_mark_version(from.road_mark_version());
  }
  if (from.free_space_version() != 0) {
    set_free_space_version(from.free_space_version());
  }
  if (from.barricade_version() != 0) {
    set_barricade_version(from.barricade_version());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  perception_version_.Swap(&other->perception_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frame_index_, other->frame_index_);
  swap(timestamp_, other->timestamp_);
  swap(protobuf_version_, other->protobuf_version_);
  swap(object_version_, other->object_version_);
  swap(tfl_struct_version_, other->tfl_struct_version_);
  swap(tfl_spot_version_, other->tfl_spot_version_);
  swap(traffic_sign_version_, other->traffic_sign_version_);
  swap(fail_safe_version_, other->fail_safe_version_);
  swap(lane_version_, other->lane_version_);
  swap(road_mark_version_, other->road_mark_version_);
  swap(free_space_version_, other->free_space_version_);
  swap(barricade_version_, other->barricade_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MeasuringStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeasuringStatus::kMeasuringStatus0FieldNumber;
const int MeasuringStatus::kMeasuringStatus1FieldNumber;
const int MeasuringStatus::kMeasuringStatus2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeasuringStatus::MeasuringStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perception_2eproto::scc_info_MeasuringStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.MeasuringStatus)
}
MeasuringStatus::MeasuringStatus(const MeasuringStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&measuring_status_0_, &from.measuring_status_0_,
    static_cast<size_t>(reinterpret_cast<char*>(&measuring_status_2_) -
    reinterpret_cast<char*>(&measuring_status_0_)) + sizeof(measuring_status_2_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.MeasuringStatus)
}

void MeasuringStatus::SharedCtor() {
  ::memset(&measuring_status_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&measuring_status_2_) -
      reinterpret_cast<char*>(&measuring_status_0_)) + sizeof(measuring_status_2_));
}

MeasuringStatus::~MeasuringStatus() {
  // @@protoc_insertion_point(destructor:calmcar.perception.MeasuringStatus)
  SharedDtor();
}

void MeasuringStatus::SharedDtor() {
}

void MeasuringStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MeasuringStatus::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MeasuringStatus& MeasuringStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perception_2eproto::scc_info_MeasuringStatus.base);
  return *internal_default_instance();
}


void MeasuringStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.MeasuringStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&measuring_status_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&measuring_status_2_) -
      reinterpret_cast<char*>(&measuring_status_0_)) + sizeof(measuring_status_2_));
  _internal_metadata_.Clear();
}

bool MeasuringStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.MeasuringStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.MeasuringStatus0 measuring_status_0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_measuring_status_0(static_cast< ::calmcar::perception::MeasuringStatus0 >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.MeasuringStatus1 measuring_status_1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_measuring_status_1(static_cast< ::calmcar::perception::MeasuringStatus1 >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.MeasuringStatus2 measuring_status_2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_measuring_status_2(static_cast< ::calmcar::perception::MeasuringStatus2 >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.MeasuringStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.MeasuringStatus)
  return false;
#undef DO_
}

void MeasuringStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.MeasuringStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.MeasuringStatus0 measuring_status_0 = 1;
  if (this->measuring_status_0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->measuring_status_0(), output);
  }

  // .calmcar.perception.MeasuringStatus1 measuring_status_1 = 2;
  if (this->measuring_status_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->measuring_status_1(), output);
  }

  // .calmcar.perception.MeasuringStatus2 measuring_status_2 = 3;
  if (this->measuring_status_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->measuring_status_2(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.MeasuringStatus)
}

::google::protobuf::uint8* MeasuringStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.MeasuringStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.MeasuringStatus0 measuring_status_0 = 1;
  if (this->measuring_status_0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->measuring_status_0(), target);
  }

  // .calmcar.perception.MeasuringStatus1 measuring_status_1 = 2;
  if (this->measuring_status_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->measuring_status_1(), target);
  }

  // .calmcar.perception.MeasuringStatus2 measuring_status_2 = 3;
  if (this->measuring_status_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->measuring_status_2(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.MeasuringStatus)
  return target;
}

size_t MeasuringStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.MeasuringStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .calmcar.perception.MeasuringStatus0 measuring_status_0 = 1;
  if (this->measuring_status_0() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->measuring_status_0());
  }

  // .calmcar.perception.MeasuringStatus1 measuring_status_1 = 2;
  if (this->measuring_status_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->measuring_status_1());
  }

  // .calmcar.perception.MeasuringStatus2 measuring_status_2 = 3;
  if (this->measuring_status_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->measuring_status_2());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeasuringStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.MeasuringStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MeasuringStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeasuringStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.MeasuringStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.MeasuringStatus)
    MergeFrom(*source);
  }
}

void MeasuringStatus::MergeFrom(const MeasuringStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.MeasuringStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.measuring_status_0() != 0) {
    set_measuring_status_0(from.measuring_status_0());
  }
  if (from.measuring_status_1() != 0) {
    set_measuring_status_1(from.measuring_status_1());
  }
  if (from.measuring_status_2() != 0) {
    set_measuring_status_2(from.measuring_status_2());
  }
}

void MeasuringStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.MeasuringStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeasuringStatus::CopyFrom(const MeasuringStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.MeasuringStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasuringStatus::IsInitialized() const {
  return true;
}

void MeasuringStatus::Swap(MeasuringStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeasuringStatus::InternalSwap(MeasuringStatus* other) {
  using std::swap;
  swap(measuring_status_0_, other->measuring_status_0_);
  swap(measuring_status_1_, other->measuring_status_1_);
  swap(measuring_status_2_, other->measuring_status_2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MeasuringStatus::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Object::InitAsDefaultInstance() {
  ::calmcar::perception::_Object_default_instance_._instance.get_mutable()->bbox_ = const_cast< ::calmcar::perception::Rect*>(
      ::calmcar::perception::Rect::internal_default_instance());
  ::calmcar::perception::_Object_default_instance_._instance.get_mutable()->measuring_status_ = const_cast< ::calmcar::perception::MeasuringStatus*>(
      ::calmcar::perception::MeasuringStatus::internal_default_instance());
}
void Object::clear_bbox() {
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kFrameIndexFieldNumber;
const int Object::kTimestampFieldNumber;
const int Object::kCameraPositionFieldNumber;
const int Object::kIdFieldNumber;
const int Object::kClassFieldNumber;
const int Object::kClassNameFieldNumber;
const int Object::kSubclassFieldNumber;
const int Object::kSubclassNameFieldNumber;
const int Object::kConfidenceFieldNumber;
const int Object::kBboxFieldNumber;
const int Object::kLengthFieldNumber;
const int Object::kLengthStdFieldNumber;
const int Object::kWidthFieldNumber;
const int Object::kWidthStdFieldNumber;
const int Object::kHeightFieldNumber;
const int Object::kHeightStdFieldNumber;
const int Object::kAgeCountFieldNumber;
const int Object::kAgeSecondsFieldNumber;
const int Object::kVisibilitySideFieldNumber;
const int Object::kLatDistanceFieldNumber;
const int Object::kLatDistanceStdFieldNumber;
const int Object::kLongDistanceFieldNumber;
const int Object::kLongDistanceStdFieldNumber;
const int Object::kRelativeLatVelocityFieldNumber;
const int Object::kRelativeLatVelocityStdFieldNumber;
const int Object::kRelativeLongVelocityFieldNumber;
const int Object::kRelativeLongVelocityStdFieldNumber;
const int Object::kAbsLatVelocityFieldNumber;
const int Object::kAbsLatVelocityStdFieldNumber;
const int Object::kAbsLongVelocityFieldNumber;
const int Object::kAbsLongVelocityStdFieldNumber;
const int Object::kRelativeLatAccFieldNumber;
const int Object::kRelativeLatAccStdFieldNumber;
const int Object::kRelativeLongAccFieldNumber;
const int Object::kRelativeLongAccStdFieldNumber;
const int Object::kAbsLatAccFieldNumber;
const int Object::kAbsLatAccStdFieldNumber;
const int Object::kAbsLongAccFieldNumber;
const int Object::kAbsLongAccStdFieldNumber;
const int Object::kAbsSpeedFieldNumber;
const int Object::kAbsSpeedStdFieldNumber;
const int Object::kAbsAccelerationFieldNumber;
const int Object::kAbsAccelerationStdFieldNumber;
const int Object::kHeadingFieldNumber;
const int Object::kHeadingStdFieldNumber;
const int Object::kInverseTtcFieldNumber;
const int Object::kInverseTtcStdFieldNumber;
const int Object::kAngleLeftFieldNumber;
const int Object::kAngleRightFieldNumber;
const int Object::kAngleRateFieldNumber;
const int Object::kAngleSideFieldNumber;
const int Object::kTopOutOfImageFieldNumber;
const int Object::kBottomOutOfImageFieldNumber;
const int Object::kLeftOutOfImageFieldNumber;
const int Object::kRightOutOfImageFieldNumber;
const int Object::kBrakeLightFieldNumber;
const int Object::kTurnIndicatorLeftFieldNumber;
const int Object::kTurnIndicatorRightFieldNumber;
const int Object::kMeasuringStatusFieldNumber;
const int Object::kMotionOrientationFieldNumber;
const int Object::kMotionCategoryFieldNumber;
const int Object::kMotionStatusFieldNumber;
const int Object::kCutinCutoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perception_2eproto::scc_info_Object.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.Object)
}
Object::Object(const Object& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.class_name().size() > 0) {
    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  subclass_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subclass_name().size() > 0) {
    subclass_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subclass_name_);
  }
  if (from.has_bbox()) {
    bbox_ = new ::calmcar::perception::Rect(*from.bbox_);
  } else {
    bbox_ = NULL;
  }
  if (from.has_measuring_status()) {
    measuring_status_ = new ::calmcar::perception::MeasuringStatus(*from.measuring_status_);
  } else {
    measuring_status_ = NULL;
  }
  ::memcpy(&frame_index_, &from.frame_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&cutin_cutout_) -
    reinterpret_cast<char*>(&frame_index_)) + sizeof(cutin_cutout_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.Object)
}

void Object::SharedCtor() {
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cutin_cutout_) -
      reinterpret_cast<char*>(&bbox_)) + sizeof(cutin_cutout_));
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:calmcar.perception.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bbox_;
  if (this != internal_default_instance()) delete measuring_status_;
}

void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Object& Object::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perception_2eproto::scc_info_Object.base);
  return *internal_default_instance();
}


void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
  if (GetArenaNoVirtual() == NULL && measuring_status_ != NULL) {
    delete measuring_status_;
  }
  measuring_status_ = NULL;
  ::memset(&frame_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cutin_cutout_) -
      reinterpret_cast<char*>(&frame_index_)) + sizeof(cutin_cutout_));
  _internal_metadata_.Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.Object)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 frame_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.CameraInfo.Position camera_position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_position(static_cast< ::calmcar::perception::CameraInfo_Position >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 class_ = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &class__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string class_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->class_name().data(), static_cast<int>(this->class_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.Object.class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 subclass = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &subclass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subclass_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subclass_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.Object.subclass_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Rect bbox = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length_std = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width_std = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height_std = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 age_count = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &age_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float age_seconds = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &age_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.VisibilitySide visibility_side = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_visibility_side(static_cast< ::calmcar::perception::VisibilitySide >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_distance = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_distance_std = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_distance_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float long_distance = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &long_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float long_distance_std = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &long_distance_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_lat_velocity = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_lat_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_lat_velocity_std = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 205 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_lat_velocity_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_long_velocity = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_long_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_long_velocity_std = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_long_velocity_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_lat_velocity = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u /* 229 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_lat_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_lat_velocity_std = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u /* 237 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_lat_velocity_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_long_velocity = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u /* 245 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_long_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_long_velocity_std = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u /* 253 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_long_velocity_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_lat_acc = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(5u /* 261 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_lat_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_lat_acc_std = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 269 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_lat_acc_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_long_acc = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 277 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_long_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_long_acc_std = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 285 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_long_acc_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_lat_acc = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 293 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_lat_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_lat_acc_std = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 301 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_lat_acc_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_long_acc = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 309 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_long_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_long_acc_std = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 317 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_long_acc_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_speed = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 325 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_speed_std = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 333 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_speed_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_acceleration = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 341 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_acceleration_std = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 349 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_acceleration_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 357 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading_std = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 365 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float inverse_ttc = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 373 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inverse_ttc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float inverse_ttc_std = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 381 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inverse_ttc_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_left = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 389 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_right = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 397 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_rate = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 405 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_side = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 413 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool top_out_of_image = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &top_out_of_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bottom_out_of_image = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bottom_out_of_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool left_out_of_image = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_out_of_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool right_out_of_image = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_out_of_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool brake_light = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 448 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brake_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool turn_indicator_left = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &turn_indicator_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool turn_indicator_right = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &turn_indicator_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.MeasuringStatus measuring_status = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 474 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_measuring_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.MotionOrientation motion_orientation = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_motion_orientation(static_cast< ::calmcar::perception::MotionOrientation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.MotionCategory motion_category = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 488 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_motion_category(static_cast< ::calmcar::perception::MotionCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.MotionStatus motion_status = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_motion_status(static_cast< ::calmcar::perception::MotionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.CutInCutOut cutin_cutout = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cutin_cutout(static_cast< ::calmcar::perception::CutInCutOut >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frame_index = 1;
  if (this->frame_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->frame_index(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 3;
  if (this->camera_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->camera_position(), output);
  }

  // int64 id = 4;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->id(), output);
  }

  // int64 class_ = 5;
  if (this->class_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->class_(), output);
  }

  // string class_name = 6;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Object.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->class_name(), output);
  }

  // int64 subclass = 7;
  if (this->subclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->subclass(), output);
  }

  // string subclass_name = 8;
  if (this->subclass_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Object.subclass_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->subclass_name(), output);
  }

  // float confidence = 9;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->confidence(), output);
  }

  // .calmcar.perception.Rect bbox = 10;
  if (this->has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_bbox(), output);
  }

  // float length = 11;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->length(), output);
  }

  // float length_std = 12;
  if (this->length_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->length_std(), output);
  }

  // float width = 13;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->width(), output);
  }

  // float width_std = 14;
  if (this->width_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->width_std(), output);
  }

  // float height = 15;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->height(), output);
  }

  // float height_std = 16;
  if (this->height_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->height_std(), output);
  }

  // int64 age_count = 17;
  if (this->age_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->age_count(), output);
  }

  // float age_seconds = 18;
  if (this->age_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->age_seconds(), output);
  }

  // .calmcar.perception.VisibilitySide visibility_side = 19;
  if (this->visibility_side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->visibility_side(), output);
  }

  // float lat_distance = 20;
  if (this->lat_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->lat_distance(), output);
  }

  // float lat_distance_std = 21;
  if (this->lat_distance_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->lat_distance_std(), output);
  }

  // float long_distance = 22;
  if (this->long_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->long_distance(), output);
  }

  // float long_distance_std = 23;
  if (this->long_distance_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->long_distance_std(), output);
  }

  // float relative_lat_velocity = 24;
  if (this->relative_lat_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->relative_lat_velocity(), output);
  }

  // float relative_lat_velocity_std = 25;
  if (this->relative_lat_velocity_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->relative_lat_velocity_std(), output);
  }

  // float relative_long_velocity = 26;
  if (this->relative_long_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->relative_long_velocity(), output);
  }

  // float relative_long_velocity_std = 27;
  if (this->relative_long_velocity_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->relative_long_velocity_std(), output);
  }

  // float abs_lat_velocity = 28;
  if (this->abs_lat_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->abs_lat_velocity(), output);
  }

  // float abs_lat_velocity_std = 29;
  if (this->abs_lat_velocity_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->abs_lat_velocity_std(), output);
  }

  // float abs_long_velocity = 30;
  if (this->abs_long_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->abs_long_velocity(), output);
  }

  // float abs_long_velocity_std = 31;
  if (this->abs_long_velocity_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->abs_long_velocity_std(), output);
  }

  // float relative_lat_acc = 32;
  if (this->relative_lat_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->relative_lat_acc(), output);
  }

  // float relative_lat_acc_std = 33;
  if (this->relative_lat_acc_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->relative_lat_acc_std(), output);
  }

  // float relative_long_acc = 34;
  if (this->relative_long_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->relative_long_acc(), output);
  }

  // float relative_long_acc_std = 35;
  if (this->relative_long_acc_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->relative_long_acc_std(), output);
  }

  // float abs_lat_acc = 36;
  if (this->abs_lat_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->abs_lat_acc(), output);
  }

  // float abs_lat_acc_std = 37;
  if (this->abs_lat_acc_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->abs_lat_acc_std(), output);
  }

  // float abs_long_acc = 38;
  if (this->abs_long_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->abs_long_acc(), output);
  }

  // float abs_long_acc_std = 39;
  if (this->abs_long_acc_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->abs_long_acc_std(), output);
  }

  // float abs_speed = 40;
  if (this->abs_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->abs_speed(), output);
  }

  // float abs_speed_std = 41;
  if (this->abs_speed_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->abs_speed_std(), output);
  }

  // float abs_acceleration = 42;
  if (this->abs_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->abs_acceleration(), output);
  }

  // float abs_acceleration_std = 43;
  if (this->abs_acceleration_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->abs_acceleration_std(), output);
  }

  // float heading = 44;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->heading(), output);
  }

  // float heading_std = 45;
  if (this->heading_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->heading_std(), output);
  }

  // float inverse_ttc = 46;
  if (this->inverse_ttc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(46, this->inverse_ttc(), output);
  }

  // float inverse_ttc_std = 47;
  if (this->inverse_ttc_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->inverse_ttc_std(), output);
  }

  // float angle_left = 48;
  if (this->angle_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(48, this->angle_left(), output);
  }

  // float angle_right = 49;
  if (this->angle_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(49, this->angle_right(), output);
  }

  // float angle_rate = 50;
  if (this->angle_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->angle_rate(), output);
  }

  // float angle_side = 51;
  if (this->angle_side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(51, this->angle_side(), output);
  }

  // bool top_out_of_image = 52;
  if (this->top_out_of_image() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(52, this->top_out_of_image(), output);
  }

  // bool bottom_out_of_image = 53;
  if (this->bottom_out_of_image() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->bottom_out_of_image(), output);
  }

  // bool left_out_of_image = 54;
  if (this->left_out_of_image() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(54, this->left_out_of_image(), output);
  }

  // bool right_out_of_image = 55;
  if (this->right_out_of_image() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->right_out_of_image(), output);
  }

  // bool brake_light = 56;
  if (this->brake_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->brake_light(), output);
  }

  // bool turn_indicator_left = 57;
  if (this->turn_indicator_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->turn_indicator_left(), output);
  }

  // bool turn_indicator_right = 58;
  if (this->turn_indicator_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(58, this->turn_indicator_right(), output);
  }

  // .calmcar.perception.MeasuringStatus measuring_status = 59;
  if (this->has_measuring_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->_internal_measuring_status(), output);
  }

  // .calmcar.perception.MotionOrientation motion_orientation = 60;
  if (this->motion_orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      60, this->motion_orientation(), output);
  }

  // .calmcar.perception.MotionCategory motion_category = 61;
  if (this->motion_category() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      61, this->motion_category(), output);
  }

  // .calmcar.perception.MotionStatus motion_status = 62;
  if (this->motion_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      62, this->motion_status(), output);
  }

  // .calmcar.perception.CutInCutOut cutin_cutout = 63;
  if (this->cutin_cutout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      63, this->cutin_cutout(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.Object)
}

::google::protobuf::uint8* Object::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frame_index = 1;
  if (this->frame_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->frame_index(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 3;
  if (this->camera_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->camera_position(), target);
  }

  // int64 id = 4;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->id(), target);
  }

  // int64 class_ = 5;
  if (this->class_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->class_(), target);
  }

  // string class_name = 6;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Object.class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->class_name(), target);
  }

  // int64 subclass = 7;
  if (this->subclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->subclass(), target);
  }

  // string subclass_name = 8;
  if (this->subclass_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Object.subclass_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->subclass_name(), target);
  }

  // float confidence = 9;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->confidence(), target);
  }

  // .calmcar.perception.Rect bbox = 10;
  if (this->has_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_bbox(), deterministic, target);
  }

  // float length = 11;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->length(), target);
  }

  // float length_std = 12;
  if (this->length_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->length_std(), target);
  }

  // float width = 13;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->width(), target);
  }

  // float width_std = 14;
  if (this->width_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->width_std(), target);
  }

  // float height = 15;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->height(), target);
  }

  // float height_std = 16;
  if (this->height_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->height_std(), target);
  }

  // int64 age_count = 17;
  if (this->age_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->age_count(), target);
  }

  // float age_seconds = 18;
  if (this->age_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->age_seconds(), target);
  }

  // .calmcar.perception.VisibilitySide visibility_side = 19;
  if (this->visibility_side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->visibility_side(), target);
  }

  // float lat_distance = 20;
  if (this->lat_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->lat_distance(), target);
  }

  // float lat_distance_std = 21;
  if (this->lat_distance_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->lat_distance_std(), target);
  }

  // float long_distance = 22;
  if (this->long_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->long_distance(), target);
  }

  // float long_distance_std = 23;
  if (this->long_distance_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->long_distance_std(), target);
  }

  // float relative_lat_velocity = 24;
  if (this->relative_lat_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->relative_lat_velocity(), target);
  }

  // float relative_lat_velocity_std = 25;
  if (this->relative_lat_velocity_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->relative_lat_velocity_std(), target);
  }

  // float relative_long_velocity = 26;
  if (this->relative_long_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->relative_long_velocity(), target);
  }

  // float relative_long_velocity_std = 27;
  if (this->relative_long_velocity_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->relative_long_velocity_std(), target);
  }

  // float abs_lat_velocity = 28;
  if (this->abs_lat_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->abs_lat_velocity(), target);
  }

  // float abs_lat_velocity_std = 29;
  if (this->abs_lat_velocity_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->abs_lat_velocity_std(), target);
  }

  // float abs_long_velocity = 30;
  if (this->abs_long_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->abs_long_velocity(), target);
  }

  // float abs_long_velocity_std = 31;
  if (this->abs_long_velocity_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->abs_long_velocity_std(), target);
  }

  // float relative_lat_acc = 32;
  if (this->relative_lat_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->relative_lat_acc(), target);
  }

  // float relative_lat_acc_std = 33;
  if (this->relative_lat_acc_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->relative_lat_acc_std(), target);
  }

  // float relative_long_acc = 34;
  if (this->relative_long_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->relative_long_acc(), target);
  }

  // float relative_long_acc_std = 35;
  if (this->relative_long_acc_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->relative_long_acc_std(), target);
  }

  // float abs_lat_acc = 36;
  if (this->abs_lat_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->abs_lat_acc(), target);
  }

  // float abs_lat_acc_std = 37;
  if (this->abs_lat_acc_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->abs_lat_acc_std(), target);
  }

  // float abs_long_acc = 38;
  if (this->abs_long_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->abs_long_acc(), target);
  }

  // float abs_long_acc_std = 39;
  if (this->abs_long_acc_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->abs_long_acc_std(), target);
  }

  // float abs_speed = 40;
  if (this->abs_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->abs_speed(), target);
  }

  // float abs_speed_std = 41;
  if (this->abs_speed_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->abs_speed_std(), target);
  }

  // float abs_acceleration = 42;
  if (this->abs_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->abs_acceleration(), target);
  }

  // float abs_acceleration_std = 43;
  if (this->abs_acceleration_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(43, this->abs_acceleration_std(), target);
  }

  // float heading = 44;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(44, this->heading(), target);
  }

  // float heading_std = 45;
  if (this->heading_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(45, this->heading_std(), target);
  }

  // float inverse_ttc = 46;
  if (this->inverse_ttc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(46, this->inverse_ttc(), target);
  }

  // float inverse_ttc_std = 47;
  if (this->inverse_ttc_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(47, this->inverse_ttc_std(), target);
  }

  // float angle_left = 48;
  if (this->angle_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(48, this->angle_left(), target);
  }

  // float angle_right = 49;
  if (this->angle_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(49, this->angle_right(), target);
  }

  // float angle_rate = 50;
  if (this->angle_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(50, this->angle_rate(), target);
  }

  // float angle_side = 51;
  if (this->angle_side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(51, this->angle_side(), target);
  }

  // bool top_out_of_image = 52;
  if (this->top_out_of_image() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(52, this->top_out_of_image(), target);
  }

  // bool bottom_out_of_image = 53;
  if (this->bottom_out_of_image() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->bottom_out_of_image(), target);
  }

  // bool left_out_of_image = 54;
  if (this->left_out_of_image() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(54, this->left_out_of_image(), target);
  }

  // bool right_out_of_image = 55;
  if (this->right_out_of_image() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->right_out_of_image(), target);
  }

  // bool brake_light = 56;
  if (this->brake_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->brake_light(), target);
  }

  // bool turn_indicator_left = 57;
  if (this->turn_indicator_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->turn_indicator_left(), target);
  }

  // bool turn_indicator_right = 58;
  if (this->turn_indicator_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(58, this->turn_indicator_right(), target);
  }

  // .calmcar.perception.MeasuringStatus measuring_status = 59;
  if (this->has_measuring_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        59, this->_internal_measuring_status(), deterministic, target);
  }

  // .calmcar.perception.MotionOrientation motion_orientation = 60;
  if (this->motion_orientation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      60, this->motion_orientation(), target);
  }

  // .calmcar.perception.MotionCategory motion_category = 61;
  if (this->motion_category() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      61, this->motion_category(), target);
  }

  // .calmcar.perception.MotionStatus motion_status = 62;
  if (this->motion_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      62, this->motion_status(), target);
  }

  // .calmcar.perception.CutInCutOut cutin_cutout = 63;
  if (this->cutin_cutout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      63, this->cutin_cutout(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.Object)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string class_name = 6;
  if (this->class_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->class_name());
  }

  // string subclass_name = 8;
  if (this->subclass_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subclass_name());
  }

  // .calmcar.perception.Rect bbox = 10;
  if (this->has_bbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bbox_);
  }

  // .calmcar.perception.MeasuringStatus measuring_status = 59;
  if (this->has_measuring_status()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *measuring_status_);
  }

  // int64 frame_index = 1;
  if (this->frame_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->frame_index());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 id = 4;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 class_ = 5;
  if (this->class_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->class_());
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 3;
  if (this->camera_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_position());
  }

  // float confidence = 9;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // int64 subclass = 7;
  if (this->subclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->subclass());
  }

  // float length = 11;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // float length_std = 12;
  if (this->length_std() != 0) {
    total_size += 1 + 4;
  }

  // float width = 13;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float width_std = 14;
  if (this->width_std() != 0) {
    total_size += 1 + 4;
  }

  // float height = 15;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // float height_std = 16;
  if (this->height_std() != 0) {
    total_size += 2 + 4;
  }

  // int64 age_count = 17;
  if (this->age_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->age_count());
  }

  // float age_seconds = 18;
  if (this->age_seconds() != 0) {
    total_size += 2 + 4;
  }

  // .calmcar.perception.VisibilitySide visibility_side = 19;
  if (this->visibility_side() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility_side());
  }

  // float lat_distance = 20;
  if (this->lat_distance() != 0) {
    total_size += 2 + 4;
  }

  // float lat_distance_std = 21;
  if (this->lat_distance_std() != 0) {
    total_size += 2 + 4;
  }

  // float long_distance = 22;
  if (this->long_distance() != 0) {
    total_size += 2 + 4;
  }

  // float long_distance_std = 23;
  if (this->long_distance_std() != 0) {
    total_size += 2 + 4;
  }

  // float relative_lat_velocity = 24;
  if (this->relative_lat_velocity() != 0) {
    total_size += 2 + 4;
  }

  // float relative_lat_velocity_std = 25;
  if (this->relative_lat_velocity_std() != 0) {
    total_size += 2 + 4;
  }

  // float relative_long_velocity = 26;
  if (this->relative_long_velocity() != 0) {
    total_size += 2 + 4;
  }

  // float relative_long_velocity_std = 27;
  if (this->relative_long_velocity_std() != 0) {
    total_size += 2 + 4;
  }

  // float abs_lat_velocity = 28;
  if (this->abs_lat_velocity() != 0) {
    total_size += 2 + 4;
  }

  // float abs_lat_velocity_std = 29;
  if (this->abs_lat_velocity_std() != 0) {
    total_size += 2 + 4;
  }

  // float abs_long_velocity = 30;
  if (this->abs_long_velocity() != 0) {
    total_size += 2 + 4;
  }

  // float abs_long_velocity_std = 31;
  if (this->abs_long_velocity_std() != 0) {
    total_size += 2 + 4;
  }

  // float relative_lat_acc = 32;
  if (this->relative_lat_acc() != 0) {
    total_size += 2 + 4;
  }

  // float relative_lat_acc_std = 33;
  if (this->relative_lat_acc_std() != 0) {
    total_size += 2 + 4;
  }

  // float relative_long_acc = 34;
  if (this->relative_long_acc() != 0) {
    total_size += 2 + 4;
  }

  // float relative_long_acc_std = 35;
  if (this->relative_long_acc_std() != 0) {
    total_size += 2 + 4;
  }

  // float abs_lat_acc = 36;
  if (this->abs_lat_acc() != 0) {
    total_size += 2 + 4;
  }

  // float abs_lat_acc_std = 37;
  if (this->abs_lat_acc_std() != 0) {
    total_size += 2 + 4;
  }

  // float abs_long_acc = 38;
  if (this->abs_long_acc() != 0) {
    total_size += 2 + 4;
  }

  // float abs_long_acc_std = 39;
  if (this->abs_long_acc_std() != 0) {
    total_size += 2 + 4;
  }

  // float abs_speed = 40;
  if (this->abs_speed() != 0) {
    total_size += 2 + 4;
  }

  // float abs_speed_std = 41;
  if (this->abs_speed_std() != 0) {
    total_size += 2 + 4;
  }

  // float abs_acceleration = 42;
  if (this->abs_acceleration() != 0) {
    total_size += 2 + 4;
  }

  // float abs_acceleration_std = 43;
  if (this->abs_acceleration_std() != 0) {
    total_size += 2 + 4;
  }

  // float heading = 44;
  if (this->heading() != 0) {
    total_size += 2 + 4;
  }

  // float heading_std = 45;
  if (this->heading_std() != 0) {
    total_size += 2 + 4;
  }

  // float inverse_ttc = 46;
  if (this->inverse_ttc() != 0) {
    total_size += 2 + 4;
  }

  // float inverse_ttc_std = 47;
  if (this->inverse_ttc_std() != 0) {
    total_size += 2 + 4;
  }

  // float angle_left = 48;
  if (this->angle_left() != 0) {
    total_size += 2 + 4;
  }

  // float angle_right = 49;
  if (this->angle_right() != 0) {
    total_size += 2 + 4;
  }

  // float angle_rate = 50;
  if (this->angle_rate() != 0) {
    total_size += 2 + 4;
  }

  // float angle_side = 51;
  if (this->angle_side() != 0) {
    total_size += 2 + 4;
  }

  // bool top_out_of_image = 52;
  if (this->top_out_of_image() != 0) {
    total_size += 2 + 1;
  }

  // bool bottom_out_of_image = 53;
  if (this->bottom_out_of_image() != 0) {
    total_size += 2 + 1;
  }

  // bool left_out_of_image = 54;
  if (this->left_out_of_image() != 0) {
    total_size += 2 + 1;
  }

  // bool right_out_of_image = 55;
  if (this->right_out_of_image() != 0) {
    total_size += 2 + 1;
  }

  // bool brake_light = 56;
  if (this->brake_light() != 0) {
    total_size += 2 + 1;
  }

  // bool turn_indicator_left = 57;
  if (this->turn_indicator_left() != 0) {
    total_size += 2 + 1;
  }

  // bool turn_indicator_right = 58;
  if (this->turn_indicator_right() != 0) {
    total_size += 2 + 1;
  }

  // .calmcar.perception.MotionOrientation motion_orientation = 60;
  if (this->motion_orientation() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_orientation());
  }

  // .calmcar.perception.MotionCategory motion_category = 61;
  if (this->motion_category() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_category());
  }

  // .calmcar.perception.MotionStatus motion_status = 62;
  if (this->motion_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_status());
  }

  // .calmcar.perception.CutInCutOut cutin_cutout = 63;
  if (this->cutin_cutout() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cutin_cutout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Object>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.Object)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.class_name().size() > 0) {

    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (from.subclass_name().size() > 0) {

    subclass_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subclass_name_);
  }
  if (from.has_bbox()) {
    mutable_bbox()->::calmcar::perception::Rect::MergeFrom(from.bbox());
  }
  if (from.has_measuring_status()) {
    mutable_measuring_status()->::calmcar::perception::MeasuringStatus::MergeFrom(from.measuring_status());
  }
  if (from.frame_index() != 0) {
    set_frame_index(from.frame_index());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.class_() != 0) {
    set_class_(from.class_());
  }
  if (from.camera_position() != 0) {
    set_camera_position(from.camera_position());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.subclass() != 0) {
    set_subclass(from.subclass());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.length_std() != 0) {
    set_length_std(from.length_std());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.width_std() != 0) {
    set_width_std(from.width_std());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.height_std() != 0) {
    set_height_std(from.height_std());
  }
  if (from.age_count() != 0) {
    set_age_count(from.age_count());
  }
  if (from.age_seconds() != 0) {
    set_age_seconds(from.age_seconds());
  }
  if (from.visibility_side() != 0) {
    set_visibility_side(from.visibility_side());
  }
  if (from.lat_distance() != 0) {
    set_lat_distance(from.lat_distance());
  }
  if (from.lat_distance_std() != 0) {
    set_lat_distance_std(from.lat_distance_std());
  }
  if (from.long_distance() != 0) {
    set_long_distance(from.long_distance());
  }
  if (from.long_distance_std() != 0) {
    set_long_distance_std(from.long_distance_std());
  }
  if (from.relative_lat_velocity() != 0) {
    set_relative_lat_velocity(from.relative_lat_velocity());
  }
  if (from.relative_lat_velocity_std() != 0) {
    set_relative_lat_velocity_std(from.relative_lat_velocity_std());
  }
  if (from.relative_long_velocity() != 0) {
    set_relative_long_velocity(from.relative_long_velocity());
  }
  if (from.relative_long_velocity_std() != 0) {
    set_relative_long_velocity_std(from.relative_long_velocity_std());
  }
  if (from.abs_lat_velocity() != 0) {
    set_abs_lat_velocity(from.abs_lat_velocity());
  }
  if (from.abs_lat_velocity_std() != 0) {
    set_abs_lat_velocity_std(from.abs_lat_velocity_std());
  }
  if (from.abs_long_velocity() != 0) {
    set_abs_long_velocity(from.abs_long_velocity());
  }
  if (from.abs_long_velocity_std() != 0) {
    set_abs_long_velocity_std(from.abs_long_velocity_std());
  }
  if (from.relative_lat_acc() != 0) {
    set_relative_lat_acc(from.relative_lat_acc());
  }
  if (from.relative_lat_acc_std() != 0) {
    set_relative_lat_acc_std(from.relative_lat_acc_std());
  }
  if (from.relative_long_acc() != 0) {
    set_relative_long_acc(from.relative_long_acc());
  }
  if (from.relative_long_acc_std() != 0) {
    set_relative_long_acc_std(from.relative_long_acc_std());
  }
  if (from.abs_lat_acc() != 0) {
    set_abs_lat_acc(from.abs_lat_acc());
  }
  if (from.abs_lat_acc_std() != 0) {
    set_abs_lat_acc_std(from.abs_lat_acc_std());
  }
  if (from.abs_long_acc() != 0) {
    set_abs_long_acc(from.abs_long_acc());
  }
  if (from.abs_long_acc_std() != 0) {
    set_abs_long_acc_std(from.abs_long_acc_std());
  }
  if (from.abs_speed() != 0) {
    set_abs_speed(from.abs_speed());
  }
  if (from.abs_speed_std() != 0) {
    set_abs_speed_std(from.abs_speed_std());
  }
  if (from.abs_acceleration() != 0) {
    set_abs_acceleration(from.abs_acceleration());
  }
  if (from.abs_acceleration_std() != 0) {
    set_abs_acceleration_std(from.abs_acceleration_std());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.heading_std() != 0) {
    set_heading_std(from.heading_std());
  }
  if (from.inverse_ttc() != 0) {
    set_inverse_ttc(from.inverse_ttc());
  }
  if (from.inverse_ttc_std() != 0) {
    set_inverse_ttc_std(from.inverse_ttc_std());
  }
  if (from.angle_left() != 0) {
    set_angle_left(from.angle_left());
  }
  if (from.angle_right() != 0) {
    set_angle_right(from.angle_right());
  }
  if (from.angle_rate() != 0) {
    set_angle_rate(from.angle_rate());
  }
  if (from.angle_side() != 0) {
    set_angle_side(from.angle_side());
  }
  if (from.top_out_of_image() != 0) {
    set_top_out_of_image(from.top_out_of_image());
  }
  if (from.bottom_out_of_image() != 0) {
    set_bottom_out_of_image(from.bottom_out_of_image());
  }
  if (from.left_out_of_image() != 0) {
    set_left_out_of_image(from.left_out_of_image());
  }
  if (from.right_out_of_image() != 0) {
    set_right_out_of_image(from.right_out_of_image());
  }
  if (from.brake_light() != 0) {
    set_brake_light(from.brake_light());
  }
  if (from.turn_indicator_left() != 0) {
    set_turn_indicator_left(from.turn_indicator_left());
  }
  if (from.turn_indicator_right() != 0) {
    set_turn_indicator_right(from.turn_indicator_right());
  }
  if (from.motion_orientation() != 0) {
    set_motion_orientation(from.motion_orientation());
  }
  if (from.motion_category() != 0) {
    set_motion_category(from.motion_category());
  }
  if (from.motion_status() != 0) {
    set_motion_status(from.motion_status());
  }
  if (from.cutin_cutout() != 0) {
    set_cutin_cutout(from.cutin_cutout());
  }
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  using std::swap;
  class_name_.Swap(&other->class_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subclass_name_.Swap(&other->subclass_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bbox_, other->bbox_);
  swap(measuring_status_, other->measuring_status_);
  swap(frame_index_, other->frame_index_);
  swap(timestamp_, other->timestamp_);
  swap(id_, other->id_);
  swap(class__, other->class__);
  swap(camera_position_, other->camera_position_);
  swap(confidence_, other->confidence_);
  swap(subclass_, other->subclass_);
  swap(length_, other->length_);
  swap(length_std_, other->length_std_);
  swap(width_, other->width_);
  swap(width_std_, other->width_std_);
  swap(height_, other->height_);
  swap(height_std_, other->height_std_);
  swap(age_count_, other->age_count_);
  swap(age_seconds_, other->age_seconds_);
  swap(visibility_side_, other->visibility_side_);
  swap(lat_distance_, other->lat_distance_);
  swap(lat_distance_std_, other->lat_distance_std_);
  swap(long_distance_, other->long_distance_);
  swap(long_distance_std_, other->long_distance_std_);
  swap(relative_lat_velocity_, other->relative_lat_velocity_);
  swap(relative_lat_velocity_std_, other->relative_lat_velocity_std_);
  swap(relative_long_velocity_, other->relative_long_velocity_);
  swap(relative_long_velocity_std_, other->relative_long_velocity_std_);
  swap(abs_lat_velocity_, other->abs_lat_velocity_);
  swap(abs_lat_velocity_std_, other->abs_lat_velocity_std_);
  swap(abs_long_velocity_, other->abs_long_velocity_);
  swap(abs_long_velocity_std_, other->abs_long_velocity_std_);
  swap(relative_lat_acc_, other->relative_lat_acc_);
  swap(relative_lat_acc_std_, other->relative_lat_acc_std_);
  swap(relative_long_acc_, other->relative_long_acc_);
  swap(relative_long_acc_std_, other->relative_long_acc_std_);
  swap(abs_lat_acc_, other->abs_lat_acc_);
  swap(abs_lat_acc_std_, other->abs_lat_acc_std_);
  swap(abs_long_acc_, other->abs_long_acc_);
  swap(abs_long_acc_std_, other->abs_long_acc_std_);
  swap(abs_speed_, other->abs_speed_);
  swap(abs_speed_std_, other->abs_speed_std_);
  swap(abs_acceleration_, other->abs_acceleration_);
  swap(abs_acceleration_std_, other->abs_acceleration_std_);
  swap(heading_, other->heading_);
  swap(heading_std_, other->heading_std_);
  swap(inverse_ttc_, other->inverse_ttc_);
  swap(inverse_ttc_std_, other->inverse_ttc_std_);
  swap(angle_left_, other->angle_left_);
  swap(angle_right_, other->angle_right_);
  swap(angle_rate_, other->angle_rate_);
  swap(angle_side_, other->angle_side_);
  swap(top_out_of_image_, other->top_out_of_image_);
  swap(bottom_out_of_image_, other->bottom_out_of_image_);
  swap(left_out_of_image_, other->left_out_of_image_);
  swap(right_out_of_image_, other->right_out_of_image_);
  swap(brake_light_, other->brake_light_);
  swap(turn_indicator_left_, other->turn_indicator_left_);
  swap(turn_indicator_right_, other->turn_indicator_right_);
  swap(motion_orientation_, other->motion_orientation_);
  swap(motion_category_, other->motion_category_);
  swap(motion_status_, other->motion_status_);
  swap(cutin_cutout_, other->cutin_cutout_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficLight::InitAsDefaultInstance() {
  ::calmcar::perception::_TrafficLight_default_instance_._instance.get_mutable()->bbox_ = const_cast< ::calmcar::perception::Rect*>(
      ::calmcar::perception::Rect::internal_default_instance());
}
void TrafficLight::clear_bbox() {
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight::kCameraPositionFieldNumber;
const int TrafficLight::kTimestampFieldNumber;
const int TrafficLight::kStructIdFieldNumber;
const int TrafficLight::kSpotIdFieldNumber;
const int TrafficLight::kClassFieldNumber;
const int TrafficLight::kClassNameFieldNumber;
const int TrafficLight::kTrackingAgeFieldNumber;
const int TrafficLight::kBboxFieldNumber;
const int TrafficLight::kHeightFieldNumber;
const int TrafficLight::kWidthFieldNumber;
const int TrafficLight::kLatDistanceFieldNumber;
const int TrafficLight::kLatDistanceStdFieldNumber;
const int TrafficLight::kLongDistanceFieldNumber;
const int TrafficLight::kLongDistanceStdFieldNumber;
const int TrafficLight::kRelHeightFieldNumber;
const int TrafficLight::kRelHeightStdFieldNumber;
const int TrafficLight::kColorFieldNumber;
const int TrafficLight::kColorConfidenceFieldNumber;
const int TrafficLight::kTypeFieldNumber;
const int TrafficLight::kTypeConfidenceFieldNumber;
const int TrafficLight::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight::TrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perception_2eproto::scc_info_TrafficLight.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.class_name().size() > 0) {
    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (from.has_bbox()) {
    bbox_ = new ::calmcar::perception::Rect(*from.bbox_);
  } else {
    bbox_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.TrafficLight)
}

void TrafficLight::SharedCtor() {
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&bbox_)) + sizeof(mode_));
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:calmcar.perception.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bbox_;
}

void TrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficLight::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLight& TrafficLight::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perception_2eproto::scc_info_TrafficLight.base);
  return *internal_default_instance();
}


void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(mode_));
  _internal_metadata_.Clear();
}

bool TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.TrafficLight)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.CameraInfo.Position camera_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_position(static_cast< ::calmcar::perception::CameraInfo_Position >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 struct_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &struct_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 spot_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &spot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 class_ = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &class__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string class_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->class_name().data(), static_cast<int>(this->class_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.TrafficLight.class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tracking_age = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tracking_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Rect bbox = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_distance = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_distance_std = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_distance_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float long_distance = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &long_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float long_distance_std = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &long_distance_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rel_height = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rel_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rel_height_std = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rel_height_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.TrafficLight.Color color = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::calmcar::perception::TrafficLight_Color >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float color_confidence = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.TrafficLight.Type type = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::calmcar::perception::TrafficLight_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float type_confidence = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &type_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.TrafficLight.Mode mode = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::calmcar::perception::TrafficLight_Mode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.TrafficLight)
  return false;
#undef DO_
}

void TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->camera_position(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // int64 struct_id = 3;
  if (this->struct_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->struct_id(), output);
  }

  // int64 spot_id = 4;
  if (this->spot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->spot_id(), output);
  }

  // int64 class_ = 5;
  if (this->class_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->class_(), output);
  }

  // string class_name = 6;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.TrafficLight.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->class_name(), output);
  }

  // int64 tracking_age = 7;
  if (this->tracking_age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->tracking_age(), output);
  }

  // .calmcar.perception.Rect bbox = 8;
  if (this->has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_bbox(), output);
  }

  // float height = 9;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->height(), output);
  }

  // float width = 10;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->width(), output);
  }

  // float lat_distance = 11;
  if (this->lat_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->lat_distance(), output);
  }

  // float lat_distance_std = 12;
  if (this->lat_distance_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->lat_distance_std(), output);
  }

  // float long_distance = 13;
  if (this->long_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->long_distance(), output);
  }

  // float long_distance_std = 14;
  if (this->long_distance_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->long_distance_std(), output);
  }

  // float rel_height = 15;
  if (this->rel_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->rel_height(), output);
  }

  // float rel_height_std = 16;
  if (this->rel_height_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->rel_height_std(), output);
  }

  // .calmcar.perception.TrafficLight.Color color = 17;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->color(), output);
  }

  // float color_confidence = 18;
  if (this->color_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->color_confidence(), output);
  }

  // .calmcar.perception.TrafficLight.Type type = 19;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->type(), output);
  }

  // float type_confidence = 20;
  if (this->type_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->type_confidence(), output);
  }

  // .calmcar.perception.TrafficLight.Mode mode = 21;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.TrafficLight)
}

::google::protobuf::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->camera_position(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // int64 struct_id = 3;
  if (this->struct_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->struct_id(), target);
  }

  // int64 spot_id = 4;
  if (this->spot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->spot_id(), target);
  }

  // int64 class_ = 5;
  if (this->class_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->class_(), target);
  }

  // string class_name = 6;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.TrafficLight.class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->class_name(), target);
  }

  // int64 tracking_age = 7;
  if (this->tracking_age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->tracking_age(), target);
  }

  // .calmcar.perception.Rect bbox = 8;
  if (this->has_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_bbox(), deterministic, target);
  }

  // float height = 9;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->height(), target);
  }

  // float width = 10;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->width(), target);
  }

  // float lat_distance = 11;
  if (this->lat_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->lat_distance(), target);
  }

  // float lat_distance_std = 12;
  if (this->lat_distance_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->lat_distance_std(), target);
  }

  // float long_distance = 13;
  if (this->long_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->long_distance(), target);
  }

  // float long_distance_std = 14;
  if (this->long_distance_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->long_distance_std(), target);
  }

  // float rel_height = 15;
  if (this->rel_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->rel_height(), target);
  }

  // float rel_height_std = 16;
  if (this->rel_height_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->rel_height_std(), target);
  }

  // .calmcar.perception.TrafficLight.Color color = 17;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->color(), target);
  }

  // float color_confidence = 18;
  if (this->color_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->color_confidence(), target);
  }

  // .calmcar.perception.TrafficLight.Type type = 19;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->type(), target);
  }

  // float type_confidence = 20;
  if (this->type_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->type_confidence(), target);
  }

  // .calmcar.perception.TrafficLight.Mode mode = 21;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.TrafficLight)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string class_name = 6;
  if (this->class_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->class_name());
  }

  // .calmcar.perception.Rect bbox = 8;
  if (this->has_bbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bbox_);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 struct_id = 3;
  if (this->struct_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->struct_id());
  }

  // int64 spot_id = 4;
  if (this->spot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->spot_id());
  }

  // int64 class_ = 5;
  if (this->class_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->class_());
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_position());
  }

  // float height = 9;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // int64 tracking_age = 7;
  if (this->tracking_age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tracking_age());
  }

  // float width = 10;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float lat_distance = 11;
  if (this->lat_distance() != 0) {
    total_size += 1 + 4;
  }

  // float lat_distance_std = 12;
  if (this->lat_distance_std() != 0) {
    total_size += 1 + 4;
  }

  // float long_distance = 13;
  if (this->long_distance() != 0) {
    total_size += 1 + 4;
  }

  // float long_distance_std = 14;
  if (this->long_distance_std() != 0) {
    total_size += 1 + 4;
  }

  // float rel_height = 15;
  if (this->rel_height() != 0) {
    total_size += 1 + 4;
  }

  // float rel_height_std = 16;
  if (this->rel_height_std() != 0) {
    total_size += 2 + 4;
  }

  // .calmcar.perception.TrafficLight.Color color = 17;
  if (this->color() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  // float color_confidence = 18;
  if (this->color_confidence() != 0) {
    total_size += 2 + 4;
  }

  // .calmcar.perception.TrafficLight.Type type = 19;
  if (this->type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float type_confidence = 20;
  if (this->type_confidence() != 0) {
    total_size += 2 + 4;
  }

  // .calmcar.perception.TrafficLight.Mode mode = 21;
  if (this->mode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.TrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.class_name().size() > 0) {

    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (from.has_bbox()) {
    mutable_bbox()->::calmcar::perception::Rect::MergeFrom(from.bbox());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.struct_id() != 0) {
    set_struct_id(from.struct_id());
  }
  if (from.spot_id() != 0) {
    set_spot_id(from.spot_id());
  }
  if (from.class_() != 0) {
    set_class_(from.class_());
  }
  if (from.camera_position() != 0) {
    set_camera_position(from.camera_position());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.tracking_age() != 0) {
    set_tracking_age(from.tracking_age());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.lat_distance() != 0) {
    set_lat_distance(from.lat_distance());
  }
  if (from.lat_distance_std() != 0) {
    set_lat_distance_std(from.lat_distance_std());
  }
  if (from.long_distance() != 0) {
    set_long_distance(from.long_distance());
  }
  if (from.long_distance_std() != 0) {
    set_long_distance_std(from.long_distance_std());
  }
  if (from.rel_height() != 0) {
    set_rel_height(from.rel_height());
  }
  if (from.rel_height_std() != 0) {
    set_rel_height_std(from.rel_height_std());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.color_confidence() != 0) {
    set_color_confidence(from.color_confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.type_confidence() != 0) {
    set_type_confidence(from.type_confidence());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::Swap(TrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  class_name_.Swap(&other->class_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bbox_, other->bbox_);
  swap(timestamp_, other->timestamp_);
  swap(struct_id_, other->struct_id_);
  swap(spot_id_, other->spot_id_);
  swap(class__, other->class__);
  swap(camera_position_, other->camera_position_);
  swap(height_, other->height_);
  swap(tracking_age_, other->tracking_age_);
  swap(width_, other->width_);
  swap(lat_distance_, other->lat_distance_);
  swap(lat_distance_std_, other->lat_distance_std_);
  swap(long_distance_, other->long_distance_);
  swap(long_distance_std_, other->long_distance_std_);
  swap(rel_height_, other->rel_height_);
  swap(rel_height_std_, other->rel_height_std_);
  swap(color_, other->color_);
  swap(color_confidence_, other->color_confidence_);
  swap(type_, other->type_);
  swap(type_confidence_, other->type_confidence_);
  swap(mode_, other->mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSign::InitAsDefaultInstance() {
  ::calmcar::perception::_TrafficSign_default_instance_._instance.get_mutable()->bbox_ = const_cast< ::calmcar::perception::Rect*>(
      ::calmcar::perception::Rect::internal_default_instance());
}
void TrafficSign::clear_bbox() {
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign::kCameraPositionFieldNumber;
const int TrafficSign::kTimestampFieldNumber;
const int TrafficSign::kIdFieldNumber;
const int TrafficSign::kClassFieldNumber;
const int TrafficSign::kSubclassFieldNumber;
const int TrafficSign::kClassNameFieldNumber;
const int TrafficSign::kSubclassNameFieldNumber;
const int TrafficSign::kBboxFieldNumber;
const int TrafficSign::kHeightFieldNumber;
const int TrafficSign::kWidthFieldNumber;
const int TrafficSign::kLatDistanceFieldNumber;
const int TrafficSign::kLongDistanceFieldNumber;
const int TrafficSign::kTrackingAgeFieldNumber;
const int TrafficSign::kRelevanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign::TrafficSign()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perception_2eproto::scc_info_TrafficSign.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.TrafficSign)
}
TrafficSign::TrafficSign(const TrafficSign& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.class_name().size() > 0) {
    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  subclass_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subclass_name().size() > 0) {
    subclass_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subclass_name_);
  }
  if (from.has_bbox()) {
    bbox_ = new ::calmcar::perception::Rect(*from.bbox_);
  } else {
    bbox_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&relevance_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(relevance_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.TrafficSign)
}

void TrafficSign::SharedCtor() {
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relevance_) -
      reinterpret_cast<char*>(&bbox_)) + sizeof(relevance_));
}

TrafficSign::~TrafficSign() {
  // @@protoc_insertion_point(destructor:calmcar.perception.TrafficSign)
  SharedDtor();
}

void TrafficSign::SharedDtor() {
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bbox_;
}

void TrafficSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSign::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign& TrafficSign::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perception_2eproto::scc_info_TrafficSign.base);
  return *internal_default_instance();
}


void TrafficSign::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.TrafficSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relevance_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(relevance_));
  _internal_metadata_.Clear();
}

bool TrafficSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.TrafficSign)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.CameraInfo.Position camera_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_position(static_cast< ::calmcar::perception::CameraInfo_Position >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 class_ = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &class__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 subclass = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &subclass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string class_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->class_name().data(), static_cast<int>(this->class_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.TrafficSign.class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subclass_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subclass_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.TrafficSign.subclass_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Rect bbox = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_distance = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float long_distance = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &long_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tracking_age = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tracking_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.TrafficSign.TrafficSIgnRelevancy relevance = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_relevance(static_cast< ::calmcar::perception::TrafficSign_TrafficSIgnRelevancy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.TrafficSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.TrafficSign)
  return false;
#undef DO_
}

void TrafficSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.TrafficSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->camera_position(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->id(), output);
  }

  // int64 class_ = 4;
  if (this->class_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->class_(), output);
  }

  // int64 subclass = 5;
  if (this->subclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->subclass(), output);
  }

  // string class_name = 6;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.TrafficSign.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->class_name(), output);
  }

  // string subclass_name = 7;
  if (this->subclass_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.TrafficSign.subclass_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->subclass_name(), output);
  }

  // .calmcar.perception.Rect bbox = 8;
  if (this->has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_bbox(), output);
  }

  // float height = 9;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->height(), output);
  }

  // float width = 10;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->width(), output);
  }

  // float lat_distance = 11;
  if (this->lat_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->lat_distance(), output);
  }

  // float long_distance = 12;
  if (this->long_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->long_distance(), output);
  }

  // int64 tracking_age = 13;
  if (this->tracking_age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->tracking_age(), output);
  }

  // .calmcar.perception.TrafficSign.TrafficSIgnRelevancy relevance = 14;
  if (this->relevance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->relevance(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.TrafficSign)
}

::google::protobuf::uint8* TrafficSign::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.TrafficSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->camera_position(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->id(), target);
  }

  // int64 class_ = 4;
  if (this->class_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->class_(), target);
  }

  // int64 subclass = 5;
  if (this->subclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->subclass(), target);
  }

  // string class_name = 6;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.TrafficSign.class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->class_name(), target);
  }

  // string subclass_name = 7;
  if (this->subclass_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.TrafficSign.subclass_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->subclass_name(), target);
  }

  // .calmcar.perception.Rect bbox = 8;
  if (this->has_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_bbox(), deterministic, target);
  }

  // float height = 9;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->height(), target);
  }

  // float width = 10;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->width(), target);
  }

  // float lat_distance = 11;
  if (this->lat_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->lat_distance(), target);
  }

  // float long_distance = 12;
  if (this->long_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->long_distance(), target);
  }

  // int64 tracking_age = 13;
  if (this->tracking_age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->tracking_age(), target);
  }

  // .calmcar.perception.TrafficSign.TrafficSIgnRelevancy relevance = 14;
  if (this->relevance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->relevance(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.TrafficSign)
  return target;
}

size_t TrafficSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.TrafficSign)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string class_name = 6;
  if (this->class_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->class_name());
  }

  // string subclass_name = 7;
  if (this->subclass_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subclass_name());
  }

  // .calmcar.perception.Rect bbox = 8;
  if (this->has_bbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bbox_);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 class_ = 4;
  if (this->class_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->class_());
  }

  // int64 subclass = 5;
  if (this->subclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->subclass());
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_position());
  }

  // float height = 9;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // float width = 10;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float lat_distance = 11;
  if (this->lat_distance() != 0) {
    total_size += 1 + 4;
  }

  // int64 tracking_age = 13;
  if (this->tracking_age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tracking_age());
  }

  // float long_distance = 12;
  if (this->long_distance() != 0) {
    total_size += 1 + 4;
  }

  // .calmcar.perception.TrafficSign.TrafficSIgnRelevancy relevance = 14;
  if (this->relevance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->relevance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.TrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.TrafficSign)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.TrafficSign)
    MergeFrom(*source);
  }
}

void TrafficSign::MergeFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.TrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.class_name().size() > 0) {

    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (from.subclass_name().size() > 0) {

    subclass_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subclass_name_);
  }
  if (from.has_bbox()) {
    mutable_bbox()->::calmcar::perception::Rect::MergeFrom(from.bbox());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.class_() != 0) {
    set_class_(from.class_());
  }
  if (from.subclass() != 0) {
    set_subclass(from.subclass());
  }
  if (from.camera_position() != 0) {
    set_camera_position(from.camera_position());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.lat_distance() != 0) {
    set_lat_distance(from.lat_distance());
  }
  if (from.tracking_age() != 0) {
    set_tracking_age(from.tracking_age());
  }
  if (from.long_distance() != 0) {
    set_long_distance(from.long_distance());
  }
  if (from.relevance() != 0) {
    set_relevance(from.relevance());
  }
}

void TrafficSign::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.TrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign::CopyFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.TrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign::IsInitialized() const {
  return true;
}

void TrafficSign::Swap(TrafficSign* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSign::InternalSwap(TrafficSign* other) {
  using std::swap;
  class_name_.Swap(&other->class_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subclass_name_.Swap(&other->subclass_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bbox_, other->bbox_);
  swap(timestamp_, other->timestamp_);
  swap(id_, other->id_);
  swap(class__, other->class__);
  swap(subclass_, other->subclass_);
  swap(camera_position_, other->camera_position_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(lat_distance_, other->lat_distance_);
  swap(tracking_age_, other->tracking_age_);
  swap(long_distance_, other->long_distance_);
  swap(relevance_, other->relevance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSign::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSignType::InitAsDefaultInstance() {
  ::calmcar::perception::_TrafficSignType_default_instance_._instance.get_mutable()->sign_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void TrafficSignType::clear_sign() {
  if (GetArenaNoVirtual() == NULL && sign_ != NULL) {
    delete sign_;
  }
  sign_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSignType::kTypeFieldNumber;
const int TrafficSignType::kSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignType::TrafficSignType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perception_2eproto::scc_info_TrafficSignType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.TrafficSignType)
}
TrafficSignType::TrafficSignType(const TrafficSignType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sign()) {
    sign_ = new ::google::protobuf::Int32Value(*from.sign_);
  } else {
    sign_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.TrafficSignType)
}

void TrafficSignType::SharedCtor() {
  ::memset(&sign_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&sign_)) + sizeof(type_));
}

TrafficSignType::~TrafficSignType() {
  // @@protoc_insertion_point(destructor:calmcar.perception.TrafficSignType)
  SharedDtor();
}

void TrafficSignType::SharedDtor() {
  if (this != internal_default_instance()) delete sign_;
}

void TrafficSignType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSignType::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignType& TrafficSignType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perception_2eproto::scc_info_TrafficSignType.base);
  return *internal_default_instance();
}


void TrafficSignType::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.TrafficSignType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sign_ != NULL) {
    delete sign_;
  }
  sign_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool TrafficSignType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.TrafficSignType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.TrafficSignType.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::calmcar::perception::TrafficSignType_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value sign = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.TrafficSignType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.TrafficSignType)
  return false;
#undef DO_
}

void TrafficSignType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.TrafficSignType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.TrafficSignType.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .google.protobuf.Int32Value sign = 2;
  if (this->has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_sign(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.TrafficSignType)
}

::google::protobuf::uint8* TrafficSignType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.TrafficSignType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.TrafficSignType.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .google.protobuf.Int32Value sign = 2;
  if (this->has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_sign(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.TrafficSignType)
  return target;
}

size_t TrafficSignType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.TrafficSignType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Int32Value sign = 2;
  if (this->has_sign()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sign_);
  }

  // .calmcar.perception.TrafficSignType.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.TrafficSignType)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.TrafficSignType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.TrafficSignType)
    MergeFrom(*source);
  }
}

void TrafficSignType::MergeFrom(const TrafficSignType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.TrafficSignType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sign()) {
    mutable_sign()->::google::protobuf::Int32Value::MergeFrom(from.sign());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TrafficSignType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.TrafficSignType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignType::CopyFrom(const TrafficSignType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.TrafficSignType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignType::IsInitialized() const {
  return true;
}

void TrafficSignType::Swap(TrafficSignType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignType::InternalSwap(TrafficSignType* other) {
  using std::swap;
  swap(sign_, other->sign_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSignType::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSignStatus::InitAsDefaultInstance() {
  ::calmcar::perception::_TrafficSignStatus_default_instance_._instance.get_mutable()->sign_ = const_cast< ::calmcar::perception::TrafficSignType*>(
      ::calmcar::perception::TrafficSignType::internal_default_instance());
  ::calmcar::perception::_TrafficSignStatus_default_instance_._instance.get_mutable()->bbox_ = const_cast< ::calmcar::perception::Rect*>(
      ::calmcar::perception::Rect::internal_default_instance());
  ::calmcar::perception::_TrafficSignStatus_default_instance_._instance.get_mutable()->speed_limit_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::calmcar::perception::_TrafficSignStatus_default_instance_._instance.get_mutable()->height_limit_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::calmcar::perception::_TrafficSignStatus_default_instance_._instance.get_mutable()->weight_limit_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
}
void TrafficSignStatus::clear_bbox() {
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
}
void TrafficSignStatus::clear_speed_limit() {
  if (GetArenaNoVirtual() == NULL && speed_limit_ != NULL) {
    delete speed_limit_;
  }
  speed_limit_ = NULL;
}
void TrafficSignStatus::clear_height_limit() {
  if (GetArenaNoVirtual() == NULL && height_limit_ != NULL) {
    delete height_limit_;
  }
  height_limit_ = NULL;
}
void TrafficSignStatus::clear_weight_limit() {
  if (GetArenaNoVirtual() == NULL && weight_limit_ != NULL) {
    delete weight_limit_;
  }
  weight_limit_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSignStatus::kSignFieldNumber;
const int TrafficSignStatus::kDerivedSignsFieldNumber;
const int TrafficSignStatus::kBboxFieldNumber;
const int TrafficSignStatus::kLatDistanceFieldNumber;
const int TrafficSignStatus::kLongDistanceFieldNumber;
const int TrafficSignStatus::kPanelWidthFieldNumber;
const int TrafficSignStatus::kPanelHeightFieldNumber;
const int TrafficSignStatus::kHeightFieldNumber;
const int TrafficSignStatus::kSpeedLimitFieldNumber;
const int TrafficSignStatus::kHeightLimitFieldNumber;
const int TrafficSignStatus::kWeightLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignStatus::TrafficSignStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perception_2eproto::scc_info_TrafficSignStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.TrafficSignStatus)
}
TrafficSignStatus::TrafficSignStatus(const TrafficSignStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      derived_signs_(from.derived_signs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sign()) {
    sign_ = new ::calmcar::perception::TrafficSignType(*from.sign_);
  } else {
    sign_ = NULL;
  }
  if (from.has_bbox()) {
    bbox_ = new ::calmcar::perception::Rect(*from.bbox_);
  } else {
    bbox_ = NULL;
  }
  if (from.has_speed_limit()) {
    speed_limit_ = new ::google::protobuf::FloatValue(*from.speed_limit_);
  } else {
    speed_limit_ = NULL;
  }
  if (from.has_height_limit()) {
    height_limit_ = new ::google::protobuf::FloatValue(*from.height_limit_);
  } else {
    height_limit_ = NULL;
  }
  if (from.has_weight_limit()) {
    weight_limit_ = new ::google::protobuf::FloatValue(*from.weight_limit_);
  } else {
    weight_limit_ = NULL;
  }
  ::memcpy(&lat_distance_, &from.lat_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&lat_distance_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.TrafficSignStatus)
}

void TrafficSignStatus::SharedCtor() {
  ::memset(&sign_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&sign_)) + sizeof(height_));
}

TrafficSignStatus::~TrafficSignStatus() {
  // @@protoc_insertion_point(destructor:calmcar.perception.TrafficSignStatus)
  SharedDtor();
}

void TrafficSignStatus::SharedDtor() {
  if (this != internal_default_instance()) delete sign_;
  if (this != internal_default_instance()) delete bbox_;
  if (this != internal_default_instance()) delete speed_limit_;
  if (this != internal_default_instance()) delete height_limit_;
  if (this != internal_default_instance()) delete weight_limit_;
}

void TrafficSignStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSignStatus::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignStatus& TrafficSignStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perception_2eproto::scc_info_TrafficSignStatus.base);
  return *internal_default_instance();
}


void TrafficSignStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.TrafficSignStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  derived_signs_.Clear();
  if (GetArenaNoVirtual() == NULL && sign_ != NULL) {
    delete sign_;
  }
  sign_ = NULL;
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
  if (GetArenaNoVirtual() == NULL && speed_limit_ != NULL) {
    delete speed_limit_;
  }
  speed_limit_ = NULL;
  if (GetArenaNoVirtual() == NULL && height_limit_ != NULL) {
    delete height_limit_;
  }
  height_limit_ = NULL;
  if (GetArenaNoVirtual() == NULL && weight_limit_ != NULL) {
    delete weight_limit_;
  }
  weight_limit_ = NULL;
  ::memset(&lat_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&lat_distance_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool TrafficSignStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.TrafficSignStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.TrafficSignType sign = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.TrafficSignType derived_signs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_derived_signs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Rect bbox = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float long_distance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &long_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float panel_width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &panel_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float panel_height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &panel_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue speed_limit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue height_limit = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_height_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue weight_limit = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_weight_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.TrafficSignStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.TrafficSignStatus)
  return false;
#undef DO_
}

void TrafficSignStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.TrafficSignStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.TrafficSignType sign = 1;
  if (this->has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sign(), output);
  }

  // repeated .calmcar.perception.TrafficSignType derived_signs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->derived_signs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->derived_signs(static_cast<int>(i)),
      output);
  }

  // .calmcar.perception.Rect bbox = 3;
  if (this->has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_bbox(), output);
  }

  // float lat_distance = 4;
  if (this->lat_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->lat_distance(), output);
  }

  // float long_distance = 5;
  if (this->long_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->long_distance(), output);
  }

  // float panel_width = 6;
  if (this->panel_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->panel_width(), output);
  }

  // float panel_height = 7;
  if (this->panel_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->panel_height(), output);
  }

  // float height = 8;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->height(), output);
  }

  // .google.protobuf.FloatValue speed_limit = 9;
  if (this->has_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_speed_limit(), output);
  }

  // .google.protobuf.FloatValue height_limit = 10;
  if (this->has_height_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_height_limit(), output);
  }

  // .google.protobuf.FloatValue weight_limit = 11;
  if (this->has_weight_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_weight_limit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.TrafficSignStatus)
}

::google::protobuf::uint8* TrafficSignStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.TrafficSignStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.TrafficSignType sign = 1;
  if (this->has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sign(), deterministic, target);
  }

  // repeated .calmcar.perception.TrafficSignType derived_signs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->derived_signs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->derived_signs(static_cast<int>(i)), deterministic, target);
  }

  // .calmcar.perception.Rect bbox = 3;
  if (this->has_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_bbox(), deterministic, target);
  }

  // float lat_distance = 4;
  if (this->lat_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->lat_distance(), target);
  }

  // float long_distance = 5;
  if (this->long_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->long_distance(), target);
  }

  // float panel_width = 6;
  if (this->panel_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->panel_width(), target);
  }

  // float panel_height = 7;
  if (this->panel_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->panel_height(), target);
  }

  // float height = 8;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->height(), target);
  }

  // .google.protobuf.FloatValue speed_limit = 9;
  if (this->has_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_speed_limit(), deterministic, target);
  }

  // .google.protobuf.FloatValue height_limit = 10;
  if (this->has_height_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_height_limit(), deterministic, target);
  }

  // .google.protobuf.FloatValue weight_limit = 11;
  if (this->has_weight_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_weight_limit(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.TrafficSignStatus)
  return target;
}

size_t TrafficSignStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.TrafficSignStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmcar.perception.TrafficSignType derived_signs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->derived_signs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->derived_signs(static_cast<int>(i)));
    }
  }

  // .calmcar.perception.TrafficSignType sign = 1;
  if (this->has_sign()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sign_);
  }

  // .calmcar.perception.Rect bbox = 3;
  if (this->has_bbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bbox_);
  }

  // .google.protobuf.FloatValue speed_limit = 9;
  if (this->has_speed_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *speed_limit_);
  }

  // .google.protobuf.FloatValue height_limit = 10;
  if (this->has_height_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *height_limit_);
  }

  // .google.protobuf.FloatValue weight_limit = 11;
  if (this->has_weight_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *weight_limit_);
  }

  // float lat_distance = 4;
  if (this->lat_distance() != 0) {
    total_size += 1 + 4;
  }

  // float long_distance = 5;
  if (this->long_distance() != 0) {
    total_size += 1 + 4;
  }

  // float panel_width = 6;
  if (this->panel_width() != 0) {
    total_size += 1 + 4;
  }

  // float panel_height = 7;
  if (this->panel_height() != 0) {
    total_size += 1 + 4;
  }

  // float height = 8;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.TrafficSignStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.TrafficSignStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.TrafficSignStatus)
    MergeFrom(*source);
  }
}

void TrafficSignStatus::MergeFrom(const TrafficSignStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.TrafficSignStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  derived_signs_.MergeFrom(from.derived_signs_);
  if (from.has_sign()) {
    mutable_sign()->::calmcar::perception::TrafficSignType::MergeFrom(from.sign());
  }
  if (from.has_bbox()) {
    mutable_bbox()->::calmcar::perception::Rect::MergeFrom(from.bbox());
  }
  if (from.has_speed_limit()) {
    mutable_speed_limit()->::google::protobuf::FloatValue::MergeFrom(from.speed_limit());
  }
  if (from.has_height_limit()) {
    mutable_height_limit()->::google::protobuf::FloatValue::MergeFrom(from.height_limit());
  }
  if (from.has_weight_limit()) {
    mutable_weight_limit()->::google::protobuf::FloatValue::MergeFrom(from.weight_limit());
  }
  if (from.lat_distance() != 0) {
    set_lat_distance(from.lat_distance());
  }
  if (from.long_distance() != 0) {
    set_long_distance(from.long_distance());
  }
  if (from.panel_width() != 0) {
    set_panel_width(from.panel_width());
  }
  if (from.panel_height() != 0) {
    set_panel_height(from.panel_height());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void TrafficSignStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.TrafficSignStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignStatus::CopyFrom(const TrafficSignStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.TrafficSignStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignStatus::IsInitialized() const {
  return true;
}

void TrafficSignStatus::Swap(TrafficSignStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignStatus::InternalSwap(TrafficSignStatus* other) {
  using std::swap;
  CastToBase(&derived_signs_)->InternalSwap(CastToBase(&other->derived_signs_));
  swap(sign_, other->sign_);
  swap(bbox_, other->bbox_);
  swap(speed_limit_, other->speed_limit_);
  swap(height_limit_, other->height_limit_);
  swap(weight_limit_, other->weight_limit_);
  swap(lat_distance_, other->lat_distance_);
  swap(long_distance_, other->long_distance_);
  swap(panel_width_, other->panel_width_);
  swap(panel_height_, other->panel_height_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSignStatus::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Failsafe::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Failsafe::kCameraPositionFieldNumber;
const int Failsafe::kTimestampFieldNumber;
const int Failsafe::kBlockageStatusFieldNumber;
const int Failsafe::kBlockageNameFieldNumber;
const int Failsafe::kWeatherStatusFieldNumber;
const int Failsafe::kWeatherNameFieldNumber;
const int Failsafe::kIlluminationStatusFieldNumber;
const int Failsafe::kIlluminationNameFieldNumber;
const int Failsafe::kImageLimitedStatusFieldNumber;
const int Failsafe::kImageLimitedNameFieldNumber;
const int Failsafe::kOutOfFocusFieldNumber;
const int Failsafe::kImpactedTechnologiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Failsafe::Failsafe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perception_2eproto::scc_info_Failsafe.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.Failsafe)
}
Failsafe::Failsafe(const Failsafe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blockage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blockage_name().size() > 0) {
    blockage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockage_name_);
  }
  weather_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.weather_name().size() > 0) {
    weather_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weather_name_);
  }
  illumination_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.illumination_name().size() > 0) {
    illumination_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.illumination_name_);
  }
  image_limited_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_limited_name().size() > 0) {
    image_limited_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_limited_name_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&impacted_technologies_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(impacted_technologies_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.Failsafe)
}

void Failsafe::SharedCtor() {
  blockage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weather_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  illumination_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_limited_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&impacted_technologies_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(impacted_technologies_));
}

Failsafe::~Failsafe() {
  // @@protoc_insertion_point(destructor:calmcar.perception.Failsafe)
  SharedDtor();
}

void Failsafe::SharedDtor() {
  blockage_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weather_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  illumination_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_limited_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Failsafe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Failsafe::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Failsafe& Failsafe::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perception_2eproto::scc_info_Failsafe.base);
  return *internal_default_instance();
}


void Failsafe::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.Failsafe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blockage_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weather_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  illumination_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_limited_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&impacted_technologies_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(impacted_technologies_));
  _internal_metadata_.Clear();
}

bool Failsafe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.Failsafe)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.CameraInfo.Position camera_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_position(static_cast< ::calmcar::perception::CameraInfo_Position >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Failsafe.FailSafeBlockage blockage_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_blockage_status(static_cast< ::calmcar::perception::Failsafe_FailSafeBlockage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string blockage_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockage_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->blockage_name().data(), static_cast<int>(this->blockage_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.Failsafe.blockage_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Failsafe.FailSafeWeather weather_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_weather_status(static_cast< ::calmcar::perception::Failsafe_FailSafeWeather >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string weather_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weather_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->weather_name().data(), static_cast<int>(this->weather_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.Failsafe.weather_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Failsafe.FailSafeIllumination illumination_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_illumination_status(static_cast< ::calmcar::perception::Failsafe_FailSafeIllumination >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string illumination_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_illumination_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->illumination_name().data(), static_cast<int>(this->illumination_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.Failsafe.illumination_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Failsafe.FailSafeImageLimited image_limited_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_image_limited_status(static_cast< ::calmcar::perception::Failsafe_FailSafeImageLimited >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image_limited_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_limited_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_limited_name().data(), static_cast<int>(this->image_limited_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.Failsafe.image_limited_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool out_of_focus = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &out_of_focus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 impacted_technologies = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &impacted_technologies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.Failsafe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.Failsafe)
  return false;
#undef DO_
}

void Failsafe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.Failsafe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->camera_position(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // .calmcar.perception.Failsafe.FailSafeBlockage blockage_status = 3;
  if (this->blockage_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->blockage_status(), output);
  }

  // string blockage_name = 4;
  if (this->blockage_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blockage_name().data(), static_cast<int>(this->blockage_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Failsafe.blockage_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->blockage_name(), output);
  }

  // .calmcar.perception.Failsafe.FailSafeWeather weather_status = 5;
  if (this->weather_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->weather_status(), output);
  }

  // string weather_name = 6;
  if (this->weather_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weather_name().data(), static_cast<int>(this->weather_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Failsafe.weather_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->weather_name(), output);
  }

  // .calmcar.perception.Failsafe.FailSafeIllumination illumination_status = 7;
  if (this->illumination_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->illumination_status(), output);
  }

  // string illumination_name = 8;
  if (this->illumination_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->illumination_name().data(), static_cast<int>(this->illumination_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Failsafe.illumination_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->illumination_name(), output);
  }

  // .calmcar.perception.Failsafe.FailSafeImageLimited image_limited_status = 9;
  if (this->image_limited_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->image_limited_status(), output);
  }

  // string image_limited_name = 10;
  if (this->image_limited_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_limited_name().data(), static_cast<int>(this->image_limited_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Failsafe.image_limited_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->image_limited_name(), output);
  }

  // bool out_of_focus = 11;
  if (this->out_of_focus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->out_of_focus(), output);
  }

  // int32 impacted_technologies = 12;
  if (this->impacted_technologies() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->impacted_technologies(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.Failsafe)
}

::google::protobuf::uint8* Failsafe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.Failsafe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->camera_position(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // .calmcar.perception.Failsafe.FailSafeBlockage blockage_status = 3;
  if (this->blockage_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->blockage_status(), target);
  }

  // string blockage_name = 4;
  if (this->blockage_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blockage_name().data(), static_cast<int>(this->blockage_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Failsafe.blockage_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->blockage_name(), target);
  }

  // .calmcar.perception.Failsafe.FailSafeWeather weather_status = 5;
  if (this->weather_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->weather_status(), target);
  }

  // string weather_name = 6;
  if (this->weather_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weather_name().data(), static_cast<int>(this->weather_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Failsafe.weather_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->weather_name(), target);
  }

  // .calmcar.perception.Failsafe.FailSafeIllumination illumination_status = 7;
  if (this->illumination_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->illumination_status(), target);
  }

  // string illumination_name = 8;
  if (this->illumination_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->illumination_name().data(), static_cast<int>(this->illumination_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Failsafe.illumination_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->illumination_name(), target);
  }

  // .calmcar.perception.Failsafe.FailSafeImageLimited image_limited_status = 9;
  if (this->image_limited_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->image_limited_status(), target);
  }

  // string image_limited_name = 10;
  if (this->image_limited_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_limited_name().data(), static_cast<int>(this->image_limited_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Failsafe.image_limited_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->image_limited_name(), target);
  }

  // bool out_of_focus = 11;
  if (this->out_of_focus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->out_of_focus(), target);
  }

  // int32 impacted_technologies = 12;
  if (this->impacted_technologies() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->impacted_technologies(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.Failsafe)
  return target;
}

size_t Failsafe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.Failsafe)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string blockage_name = 4;
  if (this->blockage_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->blockage_name());
  }

  // string weather_name = 6;
  if (this->weather_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->weather_name());
  }

  // string illumination_name = 8;
  if (this->illumination_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->illumination_name());
  }

  // string image_limited_name = 10;
  if (this->image_limited_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_limited_name());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_position());
  }

  // .calmcar.perception.Failsafe.FailSafeBlockage blockage_status = 3;
  if (this->blockage_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->blockage_status());
  }

  // .calmcar.perception.Failsafe.FailSafeWeather weather_status = 5;
  if (this->weather_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->weather_status());
  }

  // .calmcar.perception.Failsafe.FailSafeIllumination illumination_status = 7;
  if (this->illumination_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->illumination_status());
  }

  // .calmcar.perception.Failsafe.FailSafeImageLimited image_limited_status = 9;
  if (this->image_limited_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->image_limited_status());
  }

  // bool out_of_focus = 11;
  if (this->out_of_focus() != 0) {
    total_size += 1 + 1;
  }

  // int32 impacted_technologies = 12;
  if (this->impacted_technologies() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->impacted_technologies());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Failsafe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.Failsafe)
  GOOGLE_DCHECK_NE(&from, this);
  const Failsafe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Failsafe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.Failsafe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.Failsafe)
    MergeFrom(*source);
  }
}

void Failsafe::MergeFrom(const Failsafe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.Failsafe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blockage_name().size() > 0) {

    blockage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockage_name_);
  }
  if (from.weather_name().size() > 0) {

    weather_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weather_name_);
  }
  if (from.illumination_name().size() > 0) {

    illumination_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.illumination_name_);
  }
  if (from.image_limited_name().size() > 0) {

    image_limited_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_limited_name_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.camera_position() != 0) {
    set_camera_position(from.camera_position());
  }
  if (from.blockage_status() != 0) {
    set_blockage_status(from.blockage_status());
  }
  if (from.weather_status() != 0) {
    set_weather_status(from.weather_status());
  }
  if (from.illumination_status() != 0) {
    set_illumination_status(from.illumination_status());
  }
  if (from.image_limited_status() != 0) {
    set_image_limited_status(from.image_limited_status());
  }
  if (from.out_of_focus() != 0) {
    set_out_of_focus(from.out_of_focus());
  }
  if (from.impacted_technologies() != 0) {
    set_impacted_technologies(from.impacted_technologies());
  }
}

void Failsafe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.Failsafe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Failsafe::CopyFrom(const Failsafe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.Failsafe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Failsafe::IsInitialized() const {
  return true;
}

void Failsafe::Swap(Failsafe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Failsafe::InternalSwap(Failsafe* other) {
  using std::swap;
  blockage_name_.Swap(&other->blockage_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  weather_name_.Swap(&other->weather_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  illumination_name_.Swap(&other->illumination_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_limited_name_.Swap(&other->image_limited_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(camera_position_, other->camera_position_);
  swap(blockage_status_, other->blockage_status_);
  swap(weather_status_, other->weather_status_);
  swap(illumination_status_, other->illumination_status_);
  swap(image_limited_status_, other->image_limited_status_);
  swap(out_of_focus_, other->out_of_focus_);
  swap(impacted_technologies_, other->impacted_technologies_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Failsafe::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PerceptionFrame::InitAsDefaultInstance() {
  ::calmcar::perception::_PerceptionFrame_default_instance_._instance.get_mutable()->header_ = const_cast< ::calmcar::perception::Header*>(
      ::calmcar::perception::Header::internal_default_instance());
  ::calmcar::perception::_PerceptionFrame_default_instance_._instance.get_mutable()->lane_ = const_cast< ::calmcar::perception::Lane*>(
      ::calmcar::perception::Lane::internal_default_instance());
  ::calmcar::perception::_PerceptionFrame_default_instance_._instance.get_mutable()->free_space_ = const_cast< ::calmcar::perception::FreeSpace*>(
      ::calmcar::perception::FreeSpace::internal_default_instance());
}
void PerceptionFrame::clear_road_mark() {
  road_mark_.Clear();
}
void PerceptionFrame::clear_lane() {
  if (GetArenaNoVirtual() == NULL && lane_ != NULL) {
    delete lane_;
  }
  lane_ = NULL;
}
void PerceptionFrame::clear_free_space() {
  if (GetArenaNoVirtual() == NULL && free_space_ != NULL) {
    delete free_space_;
  }
  free_space_ = NULL;
}
void PerceptionFrame::clear_vehicle_info() {
  vehicle_info_.Clear();
}
void PerceptionFrame::clear_barricade_object() {
  barricade_object_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionFrame::kHeaderFieldNumber;
const int PerceptionFrame::kVdCountFieldNumber;
const int PerceptionFrame::kVruCountFieldNumber;
const int PerceptionFrame::kNumOfObjectsFieldNumber;
const int PerceptionFrame::kCipvIdFieldNumber;
const int PerceptionFrame::kVdNivLeftFieldNumber;
const int PerceptionFrame::kVdNivRightFieldNumber;
const int PerceptionFrame::kCipvLostFieldNumber;
const int PerceptionFrame::kAllowAccFieldNumber;
const int PerceptionFrame::kObjectFieldNumber;
const int PerceptionFrame::kRoadMarkFieldNumber;
const int PerceptionFrame::kLaneFieldNumber;
const int PerceptionFrame::kFreeSpaceFieldNumber;
const int PerceptionFrame::kTflStructureFieldNumber;
const int PerceptionFrame::kTflStructStateFieldNumber;
const int PerceptionFrame::kTflStructCountFieldNumber;
const int PerceptionFrame::kTflSpotCountFieldNumber;
const int PerceptionFrame::kTrafficSignFieldNumber;
const int PerceptionFrame::kTrafficSignStatusFieldNumber;
const int PerceptionFrame::kFailsafeFieldNumber;
const int PerceptionFrame::kVehicleInfoFieldNumber;
const int PerceptionFrame::kBarricadeCountFieldNumber;
const int PerceptionFrame::kBarricadeObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionFrame::PerceptionFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perception_2eproto::scc_info_PerceptionFrame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.PerceptionFrame)
}
PerceptionFrame::PerceptionFrame(const PerceptionFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      object_(from.object_),
      road_mark_(from.road_mark_),
      tfl_structure_(from.tfl_structure_),
      tfl_struct_state_(from.tfl_struct_state_),
      traffic_sign_(from.traffic_sign_),
      traffic_sign_status_(from.traffic_sign_status_),
      failsafe_(from.failsafe_),
      vehicle_info_(from.vehicle_info_),
      barricade_object_(from.barricade_object_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::calmcar::perception::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_lane()) {
    lane_ = new ::calmcar::perception::Lane(*from.lane_);
  } else {
    lane_ = NULL;
  }
  if (from.has_free_space()) {
    free_space_ = new ::calmcar::perception::FreeSpace(*from.free_space_);
  } else {
    free_space_ = NULL;
  }
  ::memcpy(&vd_count_, &from.vd_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&barricade_count_) -
    reinterpret_cast<char*>(&vd_count_)) + sizeof(barricade_count_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.PerceptionFrame)
}

void PerceptionFrame::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&barricade_count_) -
      reinterpret_cast<char*>(&header_)) + sizeof(barricade_count_));
}

PerceptionFrame::~PerceptionFrame() {
  // @@protoc_insertion_point(destructor:calmcar.perception.PerceptionFrame)
  SharedDtor();
}

void PerceptionFrame::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lane_;
  if (this != internal_default_instance()) delete free_space_;
}

void PerceptionFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PerceptionFrame::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PerceptionFrame& PerceptionFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perception_2eproto::scc_info_PerceptionFrame.base);
  return *internal_default_instance();
}


void PerceptionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.PerceptionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_.Clear();
  road_mark_.Clear();
  tfl_structure_.Clear();
  tfl_struct_state_.Clear();
  traffic_sign_.Clear();
  traffic_sign_status_.Clear();
  failsafe_.Clear();
  vehicle_info_.Clear();
  barricade_object_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && lane_ != NULL) {
    delete lane_;
  }
  lane_ = NULL;
  if (GetArenaNoVirtual() == NULL && free_space_ != NULL) {
    delete free_space_;
  }
  free_space_ = NULL;
  ::memset(&vd_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&barricade_count_) -
      reinterpret_cast<char*>(&vd_count_)) + sizeof(barricade_count_));
  _internal_metadata_.Clear();
}

bool PerceptionFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.PerceptionFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 vd_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vd_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 vru_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vru_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_of_objects = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_of_objects_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cipv_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cipv_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 vd_niv_left = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vd_niv_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 vd_niv_right = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vd_niv_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.CipvLost cipv_lost = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cipv_lost(static_cast< ::calmcar::perception::CipvLost >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.AllowAcc allow_acc = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_allow_acc(static_cast< ::calmcar::perception::AllowAcc >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.Object object = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.RoadMark road_mark = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_road_mark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Lane lane = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.FreeSpace free_space = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_free_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.TrafficLight tfl_structure = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tfl_structure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.TrafficLight tfl_struct_state = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tfl_struct_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tfl_struct_count = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tfl_struct_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tfl_spot_count = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tfl_spot_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.TrafficSign traffic_sign = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_traffic_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.TrafficSignStatus traffic_sign_status = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_traffic_sign_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.Failsafe failsafe = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_failsafe()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.Vehicle vehicle_info = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vehicle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 barricade_count = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &barricade_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.Barricade barricade_object = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_barricade_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.PerceptionFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.PerceptionFrame)
  return false;
#undef DO_
}

void PerceptionFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.PerceptionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // int64 vd_count = 2;
  if (this->vd_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->vd_count(), output);
  }

  // int64 vru_count = 3;
  if (this->vru_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->vru_count(), output);
  }

  // int64 num_of_objects = 4;
  if (this->num_of_objects() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->num_of_objects(), output);
  }

  // int64 cipv_id = 5;
  if (this->cipv_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->cipv_id(), output);
  }

  // int64 vd_niv_left = 6;
  if (this->vd_niv_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->vd_niv_left(), output);
  }

  // int64 vd_niv_right = 7;
  if (this->vd_niv_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vd_niv_right(), output);
  }

  // .calmcar.perception.CipvLost cipv_lost = 8;
  if (this->cipv_lost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->cipv_lost(), output);
  }

  // .calmcar.perception.AllowAcc allow_acc = 9;
  if (this->allow_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->allow_acc(), output);
  }

  // repeated .calmcar.perception.Object object = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->object(static_cast<int>(i)),
      output);
  }

  // repeated .calmcar.perception.RoadMark road_mark = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_mark_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->road_mark(static_cast<int>(i)),
      output);
  }

  // .calmcar.perception.Lane lane = 12;
  if (this->has_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_lane(), output);
  }

  // .calmcar.perception.FreeSpace free_space = 13;
  if (this->has_free_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_free_space(), output);
  }

  // repeated .calmcar.perception.TrafficLight tfl_structure = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tfl_structure_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->tfl_structure(static_cast<int>(i)),
      output);
  }

  // repeated .calmcar.perception.TrafficLight tfl_struct_state = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tfl_struct_state_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->tfl_struct_state(static_cast<int>(i)),
      output);
  }

  // int64 tfl_struct_count = 16;
  if (this->tfl_struct_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->tfl_struct_count(), output);
  }

  // int64 tfl_spot_count = 17;
  if (this->tfl_spot_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->tfl_spot_count(), output);
  }

  // repeated .calmcar.perception.TrafficSign traffic_sign = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->traffic_sign(static_cast<int>(i)),
      output);
  }

  // repeated .calmcar.perception.TrafficSignStatus traffic_sign_status = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_status_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19,
      this->traffic_sign_status(static_cast<int>(i)),
      output);
  }

  // repeated .calmcar.perception.Failsafe failsafe = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->failsafe_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->failsafe(static_cast<int>(i)),
      output);
  }

  // repeated .calmcar.perception.Vehicle vehicle_info = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21,
      this->vehicle_info(static_cast<int>(i)),
      output);
  }

  // int64 barricade_count = 22;
  if (this->barricade_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->barricade_count(), output);
  }

  // repeated .calmcar.perception.Barricade barricade_object = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->barricade_object_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23,
      this->barricade_object(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.PerceptionFrame)
}

::google::protobuf::uint8* PerceptionFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.PerceptionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // int64 vd_count = 2;
  if (this->vd_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->vd_count(), target);
  }

  // int64 vru_count = 3;
  if (this->vru_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->vru_count(), target);
  }

  // int64 num_of_objects = 4;
  if (this->num_of_objects() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->num_of_objects(), target);
  }

  // int64 cipv_id = 5;
  if (this->cipv_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->cipv_id(), target);
  }

  // int64 vd_niv_left = 6;
  if (this->vd_niv_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->vd_niv_left(), target);
  }

  // int64 vd_niv_right = 7;
  if (this->vd_niv_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vd_niv_right(), target);
  }

  // .calmcar.perception.CipvLost cipv_lost = 8;
  if (this->cipv_lost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->cipv_lost(), target);
  }

  // .calmcar.perception.AllowAcc allow_acc = 9;
  if (this->allow_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->allow_acc(), target);
  }

  // repeated .calmcar.perception.Object object = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->object(static_cast<int>(i)), deterministic, target);
  }

  // repeated .calmcar.perception.RoadMark road_mark = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_mark_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->road_mark(static_cast<int>(i)), deterministic, target);
  }

  // .calmcar.perception.Lane lane = 12;
  if (this->has_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_lane(), deterministic, target);
  }

  // .calmcar.perception.FreeSpace free_space = 13;
  if (this->has_free_space()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_free_space(), deterministic, target);
  }

  // repeated .calmcar.perception.TrafficLight tfl_structure = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tfl_structure_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->tfl_structure(static_cast<int>(i)), deterministic, target);
  }

  // repeated .calmcar.perception.TrafficLight tfl_struct_state = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tfl_struct_state_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->tfl_struct_state(static_cast<int>(i)), deterministic, target);
  }

  // int64 tfl_struct_count = 16;
  if (this->tfl_struct_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->tfl_struct_count(), target);
  }

  // int64 tfl_spot_count = 17;
  if (this->tfl_spot_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->tfl_spot_count(), target);
  }

  // repeated .calmcar.perception.TrafficSign traffic_sign = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->traffic_sign(static_cast<int>(i)), deterministic, target);
  }

  // repeated .calmcar.perception.TrafficSignStatus traffic_sign_status = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_status_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->traffic_sign_status(static_cast<int>(i)), deterministic, target);
  }

  // repeated .calmcar.perception.Failsafe failsafe = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->failsafe_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->failsafe(static_cast<int>(i)), deterministic, target);
  }

  // repeated .calmcar.perception.Vehicle vehicle_info = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->vehicle_info(static_cast<int>(i)), deterministic, target);
  }

  // int64 barricade_count = 22;
  if (this->barricade_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->barricade_count(), target);
  }

  // repeated .calmcar.perception.Barricade barricade_object = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->barricade_object_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->barricade_object(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.PerceptionFrame)
  return target;
}

size_t PerceptionFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.PerceptionFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmcar.perception.Object object = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.RoadMark road_mark = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->road_mark_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road_mark(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.TrafficLight tfl_structure = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->tfl_structure_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tfl_structure(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.TrafficLight tfl_struct_state = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->tfl_struct_state_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tfl_struct_state(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.TrafficSign traffic_sign = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_sign_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_sign(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.TrafficSignStatus traffic_sign_status = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_sign_status_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_sign_status(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.Failsafe failsafe = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->failsafe_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->failsafe(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.Vehicle vehicle_info = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->vehicle_info_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vehicle_info(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.Barricade barricade_object = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->barricade_object_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->barricade_object(static_cast<int>(i)));
    }
  }

  // .calmcar.perception.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .calmcar.perception.Lane lane = 12;
  if (this->has_lane()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lane_);
  }

  // .calmcar.perception.FreeSpace free_space = 13;
  if (this->has_free_space()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *free_space_);
  }

  // int64 vd_count = 2;
  if (this->vd_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->vd_count());
  }

  // int64 vru_count = 3;
  if (this->vru_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->vru_count());
  }

  // int64 num_of_objects = 4;
  if (this->num_of_objects() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_of_objects());
  }

  // int64 cipv_id = 5;
  if (this->cipv_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cipv_id());
  }

  // int64 vd_niv_left = 6;
  if (this->vd_niv_left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->vd_niv_left());
  }

  // int64 vd_niv_right = 7;
  if (this->vd_niv_right() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->vd_niv_right());
  }

  // .calmcar.perception.CipvLost cipv_lost = 8;
  if (this->cipv_lost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cipv_lost());
  }

  // .calmcar.perception.AllowAcc allow_acc = 9;
  if (this->allow_acc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->allow_acc());
  }

  // int64 tfl_struct_count = 16;
  if (this->tfl_struct_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tfl_struct_count());
  }

  // int64 tfl_spot_count = 17;
  if (this->tfl_spot_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tfl_spot_count());
  }

  // int64 barricade_count = 22;
  if (this->barricade_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->barricade_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerceptionFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.PerceptionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptionFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.PerceptionFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.PerceptionFrame)
    MergeFrom(*source);
  }
}

void PerceptionFrame::MergeFrom(const PerceptionFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.PerceptionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_.MergeFrom(from.object_);
  road_mark_.MergeFrom(from.road_mark_);
  tfl_structure_.MergeFrom(from.tfl_structure_);
  tfl_struct_state_.MergeFrom(from.tfl_struct_state_);
  traffic_sign_.MergeFrom(from.traffic_sign_);
  traffic_sign_status_.MergeFrom(from.traffic_sign_status_);
  failsafe_.MergeFrom(from.failsafe_);
  vehicle_info_.MergeFrom(from.vehicle_info_);
  barricade_object_.MergeFrom(from.barricade_object_);
  if (from.has_header()) {
    mutable_header()->::calmcar::perception::Header::MergeFrom(from.header());
  }
  if (from.has_lane()) {
    mutable_lane()->::calmcar::perception::Lane::MergeFrom(from.lane());
  }
  if (from.has_free_space()) {
    mutable_free_space()->::calmcar::perception::FreeSpace::MergeFrom(from.free_space());
  }
  if (from.vd_count() != 0) {
    set_vd_count(from.vd_count());
  }
  if (from.vru_count() != 0) {
    set_vru_count(from.vru_count());
  }
  if (from.num_of_objects() != 0) {
    set_num_of_objects(from.num_of_objects());
  }
  if (from.cipv_id() != 0) {
    set_cipv_id(from.cipv_id());
  }
  if (from.vd_niv_left() != 0) {
    set_vd_niv_left(from.vd_niv_left());
  }
  if (from.vd_niv_right() != 0) {
    set_vd_niv_right(from.vd_niv_right());
  }
  if (from.cipv_lost() != 0) {
    set_cipv_lost(from.cipv_lost());
  }
  if (from.allow_acc() != 0) {
    set_allow_acc(from.allow_acc());
  }
  if (from.tfl_struct_count() != 0) {
    set_tfl_struct_count(from.tfl_struct_count());
  }
  if (from.tfl_spot_count() != 0) {
    set_tfl_spot_count(from.tfl_spot_count());
  }
  if (from.barricade_count() != 0) {
    set_barricade_count(from.barricade_count());
  }
}

void PerceptionFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.PerceptionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionFrame::CopyFrom(const PerceptionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.PerceptionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionFrame::IsInitialized() const {
  return true;
}

void PerceptionFrame::Swap(PerceptionFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionFrame::InternalSwap(PerceptionFrame* other) {
  using std::swap;
  CastToBase(&object_)->InternalSwap(CastToBase(&other->object_));
  CastToBase(&road_mark_)->InternalSwap(CastToBase(&other->road_mark_));
  CastToBase(&tfl_structure_)->InternalSwap(CastToBase(&other->tfl_structure_));
  CastToBase(&tfl_struct_state_)->InternalSwap(CastToBase(&other->tfl_struct_state_));
  CastToBase(&traffic_sign_)->InternalSwap(CastToBase(&other->traffic_sign_));
  CastToBase(&traffic_sign_status_)->InternalSwap(CastToBase(&other->traffic_sign_status_));
  CastToBase(&failsafe_)->InternalSwap(CastToBase(&other->failsafe_));
  CastToBase(&vehicle_info_)->InternalSwap(CastToBase(&other->vehicle_info_));
  CastToBase(&barricade_object_)->InternalSwap(CastToBase(&other->barricade_object_));
  swap(header_, other->header_);
  swap(lane_, other->lane_);
  swap(free_space_, other->free_space_);
  swap(vd_count_, other->vd_count_);
  swap(vru_count_, other->vru_count_);
  swap(num_of_objects_, other->num_of_objects_);
  swap(cipv_id_, other->cipv_id_);
  swap(vd_niv_left_, other->vd_niv_left_);
  swap(vd_niv_right_, other->vd_niv_right_);
  swap(cipv_lost_, other->cipv_lost_);
  swap(allow_acc_, other->allow_acc_);
  swap(tfl_struct_count_, other->tfl_struct_count_);
  swap(tfl_spot_count_, other->tfl_spot_count_);
  swap(barricade_count_, other->barricade_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PerceptionFrame::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace calmcar
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmcar::perception::Header* Arena::CreateMaybeMessage< ::calmcar::perception::Header >(Arena* arena) {
  return Arena::CreateInternal< ::calmcar::perception::Header >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmcar::perception::MeasuringStatus* Arena::CreateMaybeMessage< ::calmcar::perception::MeasuringStatus >(Arena* arena) {
  return Arena::CreateInternal< ::calmcar::perception::MeasuringStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmcar::perception::Object* Arena::CreateMaybeMessage< ::calmcar::perception::Object >(Arena* arena) {
  return Arena::CreateInternal< ::calmcar::perception::Object >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmcar::perception::TrafficLight* Arena::CreateMaybeMessage< ::calmcar::perception::TrafficLight >(Arena* arena) {
  return Arena::CreateInternal< ::calmcar::perception::TrafficLight >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmcar::perception::TrafficSign* Arena::CreateMaybeMessage< ::calmcar::perception::TrafficSign >(Arena* arena) {
  return Arena::CreateInternal< ::calmcar::perception::TrafficSign >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmcar::perception::TrafficSignType* Arena::CreateMaybeMessage< ::calmcar::perception::TrafficSignType >(Arena* arena) {
  return Arena::CreateInternal< ::calmcar::perception::TrafficSignType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmcar::perception::TrafficSignStatus* Arena::CreateMaybeMessage< ::calmcar::perception::TrafficSignStatus >(Arena* arena) {
  return Arena::CreateInternal< ::calmcar::perception::TrafficSignStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmcar::perception::Failsafe* Arena::CreateMaybeMessage< ::calmcar::perception::Failsafe >(Arena* arena) {
  return Arena::CreateInternal< ::calmcar::perception::Failsafe >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmcar::perception::PerceptionFrame* Arena::CreateMaybeMessage< ::calmcar::perception::PerceptionFrame >(Arena* arena) {
  return Arena::CreateInternal< ::calmcar::perception::PerceptionFrame >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
