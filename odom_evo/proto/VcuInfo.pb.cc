// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VcuInfo.proto

#include "VcuInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_VcuInfo_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_VcuInfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Accel_report_6b;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_VcuInfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Gear_report_67;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_VcuInfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Gyro_report_6c;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_VcuInfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Steering_report_65;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_VcuInfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Wheelspeed_report_6a;
}  // namespace protobuf_VcuInfo_2eproto
namespace protobuf_header_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_header_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header;
}  // namespace protobuf_header_2eproto
namespace Calmcar {
namespace drivers {
namespace VCUINFO {
class Steering_report_65DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Steering_report_65>
      _instance;
} _Steering_report_65_default_instance_;
class Gear_report_67DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gear_report_67>
      _instance;
} _Gear_report_67_default_instance_;
class Wheelspeed_report_6aDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Wheelspeed_report_6a>
      _instance;
} _Wheelspeed_report_6a_default_instance_;
class Accel_report_6bDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Accel_report_6b>
      _instance;
} _Accel_report_6b_default_instance_;
class Gyro_report_6cDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gyro_report_6c>
      _instance;
} _Gyro_report_6c_default_instance_;
class VcuInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VcuInfo>
      _instance;
} _VcuInfo_default_instance_;
}  // namespace VCUINFO
}  // namespace drivers
}  // namespace Calmcar
namespace protobuf_VcuInfo_2eproto {
static void InitDefaultsSteering_report_65() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::VCUINFO::_Steering_report_65_default_instance_;
    new (ptr) ::Calmcar::drivers::VCUINFO::Steering_report_65();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::VCUINFO::Steering_report_65::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Steering_report_65 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSteering_report_65}, {}};

static void InitDefaultsGear_report_67() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::VCUINFO::_Gear_report_67_default_instance_;
    new (ptr) ::Calmcar::drivers::VCUINFO::Gear_report_67();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::VCUINFO::Gear_report_67::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Gear_report_67 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGear_report_67}, {}};

static void InitDefaultsWheelspeed_report_6a() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::VCUINFO::_Wheelspeed_report_6a_default_instance_;
    new (ptr) ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Wheelspeed_report_6a =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWheelspeed_report_6a}, {}};

static void InitDefaultsAccel_report_6b() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::VCUINFO::_Accel_report_6b_default_instance_;
    new (ptr) ::Calmcar::drivers::VCUINFO::Accel_report_6b();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::VCUINFO::Accel_report_6b::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Accel_report_6b =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccel_report_6b}, {}};

static void InitDefaultsGyro_report_6c() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::VCUINFO::_Gyro_report_6c_default_instance_;
    new (ptr) ::Calmcar::drivers::VCUINFO::Gyro_report_6c();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::VCUINFO::Gyro_report_6c::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Gyro_report_6c =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGyro_report_6c}, {}};

static void InitDefaultsVcuInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Calmcar::drivers::VCUINFO::_VcuInfo_default_instance_;
    new (ptr) ::Calmcar::drivers::VCUINFO::VcuInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Calmcar::drivers::VCUINFO::VcuInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_VcuInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsVcuInfo}, {
      &protobuf_header_2eproto::scc_info_Header.base,
      &protobuf_VcuInfo_2eproto::scc_info_Steering_report_65.base,
      &protobuf_VcuInfo_2eproto::scc_info_Gear_report_67.base,
      &protobuf_VcuInfo_2eproto::scc_info_Wheelspeed_report_6a.base,
      &protobuf_VcuInfo_2eproto::scc_info_Accel_report_6b.base,
      &protobuf_VcuInfo_2eproto::scc_info_Gyro_report_6c.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Steering_report_65.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Gear_report_67.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Wheelspeed_report_6a.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Accel_report_6b.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Gyro_report_6c.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VcuInfo.base);
}

}  // namespace protobuf_VcuInfo_2eproto
namespace Calmcar {
namespace drivers {
namespace VCUINFO {
bool Steering_report_65_FltwdcType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Steering_report_65_FltwdcType Steering_report_65::FLTWDC_NO_FAULT;
const Steering_report_65_FltwdcType Steering_report_65::FLTWDC_FAULT;
const Steering_report_65_FltwdcType Steering_report_65::FltwdcType_MIN;
const Steering_report_65_FltwdcType Steering_report_65::FltwdcType_MAX;
const int Steering_report_65::FltwdcType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Steering_report_65_FltcalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Steering_report_65_FltcalType Steering_report_65::FLTCAL_NO_FAULT;
const Steering_report_65_FltcalType Steering_report_65::FLTCAL_FAULT;
const Steering_report_65_FltcalType Steering_report_65::FltcalType_MIN;
const Steering_report_65_FltcalType Steering_report_65::FltcalType_MAX;
const int Steering_report_65::FltcalType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Steering_report_65_TmoutType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Steering_report_65_TmoutType Steering_report_65::TMOUT_VALID;
const Steering_report_65_TmoutType Steering_report_65::TMOUT_TIMEOUT;
const Steering_report_65_TmoutType Steering_report_65::TmoutType_MIN;
const Steering_report_65_TmoutType Steering_report_65::TmoutType_MAX;
const int Steering_report_65::TmoutType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Steering_report_65_Flt2Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Steering_report_65_Flt2Type Steering_report_65::FLT2_NO_FAULT;
const Steering_report_65_Flt2Type Steering_report_65::FLT2_FAULT;
const Steering_report_65_Flt2Type Steering_report_65::Flt2Type_MIN;
const Steering_report_65_Flt2Type Steering_report_65::Flt2Type_MAX;
const int Steering_report_65::Flt2Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Steering_report_65_Flt1Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Steering_report_65_Flt1Type Steering_report_65::FLT1_NO_FAULT;
const Steering_report_65_Flt1Type Steering_report_65::FLT1_FAULT;
const Steering_report_65_Flt1Type Steering_report_65::Flt1Type_MIN;
const Steering_report_65_Flt1Type Steering_report_65::Flt1Type_MAX;
const int Steering_report_65::Flt1Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Steering_report_65_EnType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Steering_report_65_EnType Steering_report_65::EN_DISABLED;
const Steering_report_65_EnType Steering_report_65::EN_ENABLED;
const Steering_report_65_EnType Steering_report_65::EnType_MIN;
const Steering_report_65_EnType Steering_report_65::EnType_MAX;
const int Steering_report_65::EnType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Steering_report_65_OverrideType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Steering_report_65_OverrideType Steering_report_65::OVERRIDE_NO_OVERRIDE;
const Steering_report_65_OverrideType Steering_report_65::OVERRIDE_DRIVER_OVERRIDE;
const Steering_report_65_OverrideType Steering_report_65::OverrideType_MIN;
const Steering_report_65_OverrideType Steering_report_65::OverrideType_MAX;
const int Steering_report_65::OverrideType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Gear_report_67_RejectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gear_report_67_RejectType Gear_report_67::REJECT_NOT_REJECTED;
const Gear_report_67_RejectType Gear_report_67::REJECT_OVERRIDE;
const Gear_report_67_RejectType Gear_report_67::REJECT_SHIFT_IN_PROGRESS;
const Gear_report_67_RejectType Gear_report_67::REJECT_REPEAT;
const Gear_report_67_RejectType Gear_report_67::REJECT_CMD_ILLEGAL;
const Gear_report_67_RejectType Gear_report_67::REJECT_SPEED_NOT_2KPH;
const Gear_report_67_RejectType Gear_report_67::REJECT_REJECTED_BY_VEHICLE_TIMEOUT;
const Gear_report_67_RejectType Gear_report_67::RejectType_MIN;
const Gear_report_67_RejectType Gear_report_67::RejectType_MAX;
const int Gear_report_67::RejectType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Gear_report_67_StateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gear_report_67_StateType Gear_report_67::STATE_NONE;
const Gear_report_67_StateType Gear_report_67::STATE_PARK;
const Gear_report_67_StateType Gear_report_67::STATE_REVERSE;
const Gear_report_67_StateType Gear_report_67::STATE_NEUTRAL;
const Gear_report_67_StateType Gear_report_67::STATE_DRIVE;
const Gear_report_67_StateType Gear_report_67::STATE_LOW;
const Gear_report_67_StateType Gear_report_67::StateType_MIN;
const Gear_report_67_StateType Gear_report_67::StateType_MAX;
const int Gear_report_67::StateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Gear_report_67_FltbusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gear_report_67_FltbusType Gear_report_67::FLTBUS_NO_FAULT;
const Gear_report_67_FltbusType Gear_report_67::FLTBUS_FAULT;
const Gear_report_67_FltbusType Gear_report_67::FltbusType_MIN;
const Gear_report_67_FltbusType Gear_report_67::FltbusType_MAX;
const int Gear_report_67::FltbusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Gear_report_67_DriverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gear_report_67_DriverType Gear_report_67::DRIVER_LAST_SHIFT_REQUESTED_BY_WIRE;
const Gear_report_67_DriverType Gear_report_67::DRIVER_LAST_SHIFT_REQUESTED_BY_DRIVER;
const Gear_report_67_DriverType Gear_report_67::DriverType_MIN;
const Gear_report_67_DriverType Gear_report_67::DriverType_MAX;
const int Gear_report_67::DriverType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Gear_report_67_CmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gear_report_67_CmdType Gear_report_67::CMD_NONE;
const Gear_report_67_CmdType Gear_report_67::CMD_PARK;
const Gear_report_67_CmdType Gear_report_67::CMD_REVERSE;
const Gear_report_67_CmdType Gear_report_67::CMD_NEUTRAL;
const Gear_report_67_CmdType Gear_report_67::CMD_DRIVE;
const Gear_report_67_CmdType Gear_report_67::CMD_LOW;
const Gear_report_67_CmdType Gear_report_67::CmdType_MIN;
const Gear_report_67_CmdType Gear_report_67::CmdType_MAX;
const int Gear_report_67::CmdType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Steering_report_65::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Steering_report_65::kFltwdcFieldNumber;
const int Steering_report_65::kFltcalFieldNumber;
const int Steering_report_65::kTmoutFieldNumber;
const int Steering_report_65::kTorqueFieldNumber;
const int Steering_report_65::kSpeedFieldNumber;
const int Steering_report_65::kFlt2FieldNumber;
const int Steering_report_65::kFlt1FieldNumber;
const int Steering_report_65::kEnFieldNumber;
const int Steering_report_65::kOverrideFieldNumber;
const int Steering_report_65::kCmdFieldNumber;
const int Steering_report_65::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Steering_report_65::Steering_report_65()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_VcuInfo_2eproto::scc_info_Steering_report_65.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.VCUINFO.Steering_report_65)
}
Steering_report_65::Steering_report_65(const Steering_report_65& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fltwdc_, &from.fltwdc_,
    static_cast<size_t>(reinterpret_cast<char*>(&override_) -
    reinterpret_cast<char*>(&fltwdc_)) + sizeof(override_));
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.VCUINFO.Steering_report_65)
}

void Steering_report_65::SharedCtor() {
  ::memset(&fltwdc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&override_) -
      reinterpret_cast<char*>(&fltwdc_)) + sizeof(override_));
}

Steering_report_65::~Steering_report_65() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.VCUINFO.Steering_report_65)
  SharedDtor();
}

void Steering_report_65::SharedDtor() {
}

void Steering_report_65::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Steering_report_65& Steering_report_65::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_VcuInfo_2eproto::scc_info_Steering_report_65.base);
  return *internal_default_instance();
}


void Steering_report_65::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.VCUINFO.Steering_report_65)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fltwdc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&override_) -
      reinterpret_cast<char*>(&fltwdc_)) + sizeof(override_));
  _internal_metadata_.Clear();
}

bool Steering_report_65::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.VCUINFO.Steering_report_65)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Calmcar.drivers.VCUINFO.Steering_report_65.FltwdcType fltwdc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fltwdc(static_cast< ::Calmcar::drivers::VCUINFO::Steering_report_65_FltwdcType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.VCUINFO.Steering_report_65.FltcalType fltcal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fltcal(static_cast< ::Calmcar::drivers::VCUINFO::Steering_report_65_FltcalType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.VCUINFO.Steering_report_65.TmoutType tmout = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tmout(static_cast< ::Calmcar::drivers::VCUINFO::Steering_report_65_TmoutType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double torque = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.VCUINFO.Steering_report_65.Flt2Type flt2 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_flt2(static_cast< ::Calmcar::drivers::VCUINFO::Steering_report_65_Flt2Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.VCUINFO.Steering_report_65.Flt1Type flt1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_flt1(static_cast< ::Calmcar::drivers::VCUINFO::Steering_report_65_Flt1Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.VCUINFO.Steering_report_65.EnType en = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_en(static_cast< ::Calmcar::drivers::VCUINFO::Steering_report_65_EnType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.VCUINFO.Steering_report_65.OverrideType override = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_override(static_cast< ::Calmcar::drivers::VCUINFO::Steering_report_65_OverrideType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cmd = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double angle = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.VCUINFO.Steering_report_65)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.VCUINFO.Steering_report_65)
  return false;
#undef DO_
}

void Steering_report_65::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.VCUINFO.Steering_report_65)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Calmcar.drivers.VCUINFO.Steering_report_65.FltwdcType fltwdc = 1;
  if (this->fltwdc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->fltwdc(), output);
  }

  // .Calmcar.drivers.VCUINFO.Steering_report_65.FltcalType fltcal = 2;
  if (this->fltcal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->fltcal(), output);
  }

  // .Calmcar.drivers.VCUINFO.Steering_report_65.TmoutType tmout = 3;
  if (this->tmout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->tmout(), output);
  }

  // double torque = 4;
  if (this->torque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->torque(), output);
  }

  // double speed = 5;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed(), output);
  }

  // .Calmcar.drivers.VCUINFO.Steering_report_65.Flt2Type flt2 = 6;
  if (this->flt2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->flt2(), output);
  }

  // .Calmcar.drivers.VCUINFO.Steering_report_65.Flt1Type flt1 = 7;
  if (this->flt1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->flt1(), output);
  }

  // .Calmcar.drivers.VCUINFO.Steering_report_65.EnType en = 8;
  if (this->en() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->en(), output);
  }

  // .Calmcar.drivers.VCUINFO.Steering_report_65.OverrideType override = 9;
  if (this->override() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->override(), output);
  }

  // double cmd = 10;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->cmd(), output);
  }

  // double angle = 11;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->angle(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.VCUINFO.Steering_report_65)
}

size_t Steering_report_65::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.VCUINFO.Steering_report_65)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .Calmcar.drivers.VCUINFO.Steering_report_65.FltwdcType fltwdc = 1;
  if (this->fltwdc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fltwdc());
  }

  // .Calmcar.drivers.VCUINFO.Steering_report_65.FltcalType fltcal = 2;
  if (this->fltcal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fltcal());
  }

  // double torque = 4;
  if (this->torque() != 0) {
    total_size += 1 + 8;
  }

  // .Calmcar.drivers.VCUINFO.Steering_report_65.TmoutType tmout = 3;
  if (this->tmout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tmout());
  }

  // .Calmcar.drivers.VCUINFO.Steering_report_65.Flt2Type flt2 = 6;
  if (this->flt2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flt2());
  }

  // double speed = 5;
  if (this->speed() != 0) {
    total_size += 1 + 8;
  }

  // .Calmcar.drivers.VCUINFO.Steering_report_65.Flt1Type flt1 = 7;
  if (this->flt1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flt1());
  }

  // .Calmcar.drivers.VCUINFO.Steering_report_65.EnType en = 8;
  if (this->en() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->en());
  }

  // double cmd = 10;
  if (this->cmd() != 0) {
    total_size += 1 + 8;
  }

  // double angle = 11;
  if (this->angle() != 0) {
    total_size += 1 + 8;
  }

  // .Calmcar.drivers.VCUINFO.Steering_report_65.OverrideType override = 9;
  if (this->override() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->override());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_report_65::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Steering_report_65*>(&from));
}

void Steering_report_65::MergeFrom(const Steering_report_65& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.VCUINFO.Steering_report_65)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fltwdc() != 0) {
    set_fltwdc(from.fltwdc());
  }
  if (from.fltcal() != 0) {
    set_fltcal(from.fltcal());
  }
  if (from.torque() != 0) {
    set_torque(from.torque());
  }
  if (from.tmout() != 0) {
    set_tmout(from.tmout());
  }
  if (from.flt2() != 0) {
    set_flt2(from.flt2());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.flt1() != 0) {
    set_flt1(from.flt1());
  }
  if (from.en() != 0) {
    set_en(from.en());
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.override() != 0) {
    set_override(from.override());
  }
}

void Steering_report_65::CopyFrom(const Steering_report_65& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.VCUINFO.Steering_report_65)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_report_65::IsInitialized() const {
  return true;
}

void Steering_report_65::Swap(Steering_report_65* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Steering_report_65::InternalSwap(Steering_report_65* other) {
  using std::swap;
  swap(fltwdc_, other->fltwdc_);
  swap(fltcal_, other->fltcal_);
  swap(torque_, other->torque_);
  swap(tmout_, other->tmout_);
  swap(flt2_, other->flt2_);
  swap(speed_, other->speed_);
  swap(flt1_, other->flt1_);
  swap(en_, other->en_);
  swap(cmd_, other->cmd_);
  swap(angle_, other->angle_);
  swap(override_, other->override_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Steering_report_65::GetTypeName() const {
  return "Calmcar.drivers.VCUINFO.Steering_report_65";
}


// ===================================================================

void Gear_report_67::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gear_report_67::kAccStateFieldNumber;
const int Gear_report_67::kRejectFieldNumber;
const int Gear_report_67::kStateFieldNumber;
const int Gear_report_67::kFltbusFieldNumber;
const int Gear_report_67::kDriverFieldNumber;
const int Gear_report_67::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gear_report_67::Gear_report_67()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_VcuInfo_2eproto::scc_info_Gear_report_67.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.VCUINFO.Gear_report_67)
}
Gear_report_67::Gear_report_67(const Gear_report_67& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc_state_, &from.acc_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&acc_state_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.VCUINFO.Gear_report_67)
}

void Gear_report_67::SharedCtor() {
  ::memset(&acc_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&acc_state_)) + sizeof(cmd_));
}

Gear_report_67::~Gear_report_67() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.VCUINFO.Gear_report_67)
  SharedDtor();
}

void Gear_report_67::SharedDtor() {
}

void Gear_report_67::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gear_report_67& Gear_report_67::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_VcuInfo_2eproto::scc_info_Gear_report_67.base);
  return *internal_default_instance();
}


void Gear_report_67::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.VCUINFO.Gear_report_67)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&acc_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&acc_state_)) + sizeof(cmd_));
  _internal_metadata_.Clear();
}

bool Gear_report_67::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.VCUINFO.Gear_report_67)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 acc_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acc_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.VCUINFO.Gear_report_67.RejectType reject = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reject(static_cast< ::Calmcar::drivers::VCUINFO::Gear_report_67_RejectType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.VCUINFO.Gear_report_67.StateType state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::Calmcar::drivers::VCUINFO::Gear_report_67_StateType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.VCUINFO.Gear_report_67.FltbusType fltbus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fltbus(static_cast< ::Calmcar::drivers::VCUINFO::Gear_report_67_FltbusType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.VCUINFO.Gear_report_67.DriverType driver = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_driver(static_cast< ::Calmcar::drivers::VCUINFO::Gear_report_67_DriverType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.VCUINFO.Gear_report_67.CmdType cmd = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd(static_cast< ::Calmcar::drivers::VCUINFO::Gear_report_67_CmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.VCUINFO.Gear_report_67)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.VCUINFO.Gear_report_67)
  return false;
#undef DO_
}

void Gear_report_67::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.VCUINFO.Gear_report_67)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 acc_state = 1;
  if (this->acc_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->acc_state(), output);
  }

  // .Calmcar.drivers.VCUINFO.Gear_report_67.RejectType reject = 2;
  if (this->reject() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reject(), output);
  }

  // .Calmcar.drivers.VCUINFO.Gear_report_67.StateType state = 3;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // .Calmcar.drivers.VCUINFO.Gear_report_67.FltbusType fltbus = 4;
  if (this->fltbus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->fltbus(), output);
  }

  // .Calmcar.drivers.VCUINFO.Gear_report_67.DriverType driver = 5;
  if (this->driver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->driver(), output);
  }

  // .Calmcar.drivers.VCUINFO.Gear_report_67.CmdType cmd = 6;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->cmd(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.VCUINFO.Gear_report_67)
}

size_t Gear_report_67::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.VCUINFO.Gear_report_67)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // int32 acc_state = 1;
  if (this->acc_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->acc_state());
  }

  // .Calmcar.drivers.VCUINFO.Gear_report_67.RejectType reject = 2;
  if (this->reject() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reject());
  }

  // .Calmcar.drivers.VCUINFO.Gear_report_67.StateType state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // .Calmcar.drivers.VCUINFO.Gear_report_67.FltbusType fltbus = 4;
  if (this->fltbus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fltbus());
  }

  // .Calmcar.drivers.VCUINFO.Gear_report_67.DriverType driver = 5;
  if (this->driver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->driver());
  }

  // .Calmcar.drivers.VCUINFO.Gear_report_67.CmdType cmd = 6;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gear_report_67::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Gear_report_67*>(&from));
}

void Gear_report_67::MergeFrom(const Gear_report_67& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.VCUINFO.Gear_report_67)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.acc_state() != 0) {
    set_acc_state(from.acc_state());
  }
  if (from.reject() != 0) {
    set_reject(from.reject());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.fltbus() != 0) {
    set_fltbus(from.fltbus());
  }
  if (from.driver() != 0) {
    set_driver(from.driver());
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
}

void Gear_report_67::CopyFrom(const Gear_report_67& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.VCUINFO.Gear_report_67)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gear_report_67::IsInitialized() const {
  return true;
}

void Gear_report_67::Swap(Gear_report_67* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gear_report_67::InternalSwap(Gear_report_67* other) {
  using std::swap;
  swap(acc_state_, other->acc_state_);
  swap(reject_, other->reject_);
  swap(state_, other->state_);
  swap(fltbus_, other->fltbus_);
  swap(driver_, other->driver_);
  swap(cmd_, other->cmd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Gear_report_67::GetTypeName() const {
  return "Calmcar.drivers.VCUINFO.Gear_report_67";
}


// ===================================================================

void Wheelspeed_report_6a::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Wheelspeed_report_6a::kRrFieldNumber;
const int Wheelspeed_report_6a::kRlFieldNumber;
const int Wheelspeed_report_6a::kFrFieldNumber;
const int Wheelspeed_report_6a::kFlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Wheelspeed_report_6a::Wheelspeed_report_6a()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_VcuInfo_2eproto::scc_info_Wheelspeed_report_6a.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a)
}
Wheelspeed_report_6a::Wheelspeed_report_6a(const Wheelspeed_report_6a& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rr_, &from.rr_,
    static_cast<size_t>(reinterpret_cast<char*>(&fl_) -
    reinterpret_cast<char*>(&rr_)) + sizeof(fl_));
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a)
}

void Wheelspeed_report_6a::SharedCtor() {
  ::memset(&rr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fl_) -
      reinterpret_cast<char*>(&rr_)) + sizeof(fl_));
}

Wheelspeed_report_6a::~Wheelspeed_report_6a() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a)
  SharedDtor();
}

void Wheelspeed_report_6a::SharedDtor() {
}

void Wheelspeed_report_6a::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Wheelspeed_report_6a& Wheelspeed_report_6a::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_VcuInfo_2eproto::scc_info_Wheelspeed_report_6a.base);
  return *internal_default_instance();
}


void Wheelspeed_report_6a::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fl_) -
      reinterpret_cast<char*>(&rr_)) + sizeof(fl_));
  _internal_metadata_.Clear();
}

bool Wheelspeed_report_6a::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double rr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a)
  return false;
#undef DO_
}

void Wheelspeed_report_6a::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rr = 1;
  if (this->rr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->rr(), output);
  }

  // double rl = 2;
  if (this->rl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rl(), output);
  }

  // double fr = 3;
  if (this->fr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fr(), output);
  }

  // double fl = 4;
  if (this->fl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->fl(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a)
}

size_t Wheelspeed_report_6a::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // double rr = 1;
  if (this->rr() != 0) {
    total_size += 1 + 8;
  }

  // double rl = 2;
  if (this->rl() != 0) {
    total_size += 1 + 8;
  }

  // double fr = 3;
  if (this->fr() != 0) {
    total_size += 1 + 8;
  }

  // double fl = 4;
  if (this->fl() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wheelspeed_report_6a::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Wheelspeed_report_6a*>(&from));
}

void Wheelspeed_report_6a::MergeFrom(const Wheelspeed_report_6a& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rr() != 0) {
    set_rr(from.rr());
  }
  if (from.rl() != 0) {
    set_rl(from.rl());
  }
  if (from.fr() != 0) {
    set_fr(from.fr());
  }
  if (from.fl() != 0) {
    set_fl(from.fl());
  }
}

void Wheelspeed_report_6a::CopyFrom(const Wheelspeed_report_6a& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wheelspeed_report_6a::IsInitialized() const {
  return true;
}

void Wheelspeed_report_6a::Swap(Wheelspeed_report_6a* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Wheelspeed_report_6a::InternalSwap(Wheelspeed_report_6a* other) {
  using std::swap;
  swap(rr_, other->rr_);
  swap(rl_, other->rl_);
  swap(fr_, other->fr_);
  swap(fl_, other->fl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Wheelspeed_report_6a::GetTypeName() const {
  return "Calmcar.drivers.VCUINFO.Wheelspeed_report_6a";
}


// ===================================================================

void Accel_report_6b::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Accel_report_6b::kVertFieldNumber;
const int Accel_report_6b::kMyLongFieldNumber;
const int Accel_report_6b::kLatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Accel_report_6b::Accel_report_6b()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_VcuInfo_2eproto::scc_info_Accel_report_6b.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.VCUINFO.Accel_report_6b)
}
Accel_report_6b::Accel_report_6b(const Accel_report_6b& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vert_, &from.vert_,
    static_cast<size_t>(reinterpret_cast<char*>(&lat_) -
    reinterpret_cast<char*>(&vert_)) + sizeof(lat_));
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.VCUINFO.Accel_report_6b)
}

void Accel_report_6b::SharedCtor() {
  ::memset(&vert_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) -
      reinterpret_cast<char*>(&vert_)) + sizeof(lat_));
}

Accel_report_6b::~Accel_report_6b() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.VCUINFO.Accel_report_6b)
  SharedDtor();
}

void Accel_report_6b::SharedDtor() {
}

void Accel_report_6b::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Accel_report_6b& Accel_report_6b::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_VcuInfo_2eproto::scc_info_Accel_report_6b.base);
  return *internal_default_instance();
}


void Accel_report_6b::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.VCUINFO.Accel_report_6b)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vert_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) -
      reinterpret_cast<char*>(&vert_)) + sizeof(lat_));
  _internal_metadata_.Clear();
}

bool Accel_report_6b::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.VCUINFO.Accel_report_6b)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double vert = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vert_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double my_long = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &my_long_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.VCUINFO.Accel_report_6b)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.VCUINFO.Accel_report_6b)
  return false;
#undef DO_
}

void Accel_report_6b::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.VCUINFO.Accel_report_6b)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double vert = 1;
  if (this->vert() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->vert(), output);
  }

  // double my_long = 2;
  if (this->my_long() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->my_long(), output);
  }

  // double lat = 3;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lat(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.VCUINFO.Accel_report_6b)
}

size_t Accel_report_6b::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.VCUINFO.Accel_report_6b)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // double vert = 1;
  if (this->vert() != 0) {
    total_size += 1 + 8;
  }

  // double my_long = 2;
  if (this->my_long() != 0) {
    total_size += 1 + 8;
  }

  // double lat = 3;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Accel_report_6b::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Accel_report_6b*>(&from));
}

void Accel_report_6b::MergeFrom(const Accel_report_6b& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.VCUINFO.Accel_report_6b)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vert() != 0) {
    set_vert(from.vert());
  }
  if (from.my_long() != 0) {
    set_my_long(from.my_long());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
}

void Accel_report_6b::CopyFrom(const Accel_report_6b& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.VCUINFO.Accel_report_6b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accel_report_6b::IsInitialized() const {
  return true;
}

void Accel_report_6b::Swap(Accel_report_6b* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Accel_report_6b::InternalSwap(Accel_report_6b* other) {
  using std::swap;
  swap(vert_, other->vert_);
  swap(my_long_, other->my_long_);
  swap(lat_, other->lat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Accel_report_6b::GetTypeName() const {
  return "Calmcar.drivers.VCUINFO.Accel_report_6b";
}


// ===================================================================

void Gyro_report_6c::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gyro_report_6c::kYawFieldNumber;
const int Gyro_report_6c::kRollFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gyro_report_6c::Gyro_report_6c()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_VcuInfo_2eproto::scc_info_Gyro_report_6c.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.VCUINFO.Gyro_report_6c)
}
Gyro_report_6c::Gyro_report_6c(const Gyro_report_6c& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&yaw_, &from.yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&yaw_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.VCUINFO.Gyro_report_6c)
}

void Gyro_report_6c::SharedCtor() {
  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(roll_));
}

Gyro_report_6c::~Gyro_report_6c() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.VCUINFO.Gyro_report_6c)
  SharedDtor();
}

void Gyro_report_6c::SharedDtor() {
}

void Gyro_report_6c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gyro_report_6c& Gyro_report_6c::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_VcuInfo_2eproto::scc_info_Gyro_report_6c.base);
  return *internal_default_instance();
}


void Gyro_report_6c::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.VCUINFO.Gyro_report_6c)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(roll_));
  _internal_metadata_.Clear();
}

bool Gyro_report_6c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.VCUINFO.Gyro_report_6c)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double yaw = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double roll = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.VCUINFO.Gyro_report_6c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.VCUINFO.Gyro_report_6c)
  return false;
#undef DO_
}

void Gyro_report_6c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.VCUINFO.Gyro_report_6c)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double yaw = 1;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->yaw(), output);
  }

  // double roll = 2;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->roll(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.VCUINFO.Gyro_report_6c)
}

size_t Gyro_report_6c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.VCUINFO.Gyro_report_6c)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // double yaw = 1;
  if (this->yaw() != 0) {
    total_size += 1 + 8;
  }

  // double roll = 2;
  if (this->roll() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gyro_report_6c::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Gyro_report_6c*>(&from));
}

void Gyro_report_6c::MergeFrom(const Gyro_report_6c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.VCUINFO.Gyro_report_6c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
}

void Gyro_report_6c::CopyFrom(const Gyro_report_6c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.VCUINFO.Gyro_report_6c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gyro_report_6c::IsInitialized() const {
  return true;
}

void Gyro_report_6c::Swap(Gyro_report_6c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gyro_report_6c::InternalSwap(Gyro_report_6c* other) {
  using std::swap;
  swap(yaw_, other->yaw_);
  swap(roll_, other->roll_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Gyro_report_6c::GetTypeName() const {
  return "Calmcar.drivers.VCUINFO.Gyro_report_6c";
}


// ===================================================================

void VcuInfo::InitAsDefaultInstance() {
  ::Calmcar::drivers::VCUINFO::_VcuInfo_default_instance_._instance.get_mutable()->header_ = const_cast< ::Calmcar::common::Header*>(
      ::Calmcar::common::Header::internal_default_instance());
  ::Calmcar::drivers::VCUINFO::_VcuInfo_default_instance_._instance.get_mutable()->steering_report_65_ = const_cast< ::Calmcar::drivers::VCUINFO::Steering_report_65*>(
      ::Calmcar::drivers::VCUINFO::Steering_report_65::internal_default_instance());
  ::Calmcar::drivers::VCUINFO::_VcuInfo_default_instance_._instance.get_mutable()->gear_report_67_ = const_cast< ::Calmcar::drivers::VCUINFO::Gear_report_67*>(
      ::Calmcar::drivers::VCUINFO::Gear_report_67::internal_default_instance());
  ::Calmcar::drivers::VCUINFO::_VcuInfo_default_instance_._instance.get_mutable()->wheelspeed_report_6a_ = const_cast< ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a*>(
      ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a::internal_default_instance());
  ::Calmcar::drivers::VCUINFO::_VcuInfo_default_instance_._instance.get_mutable()->accel_report_6b_ = const_cast< ::Calmcar::drivers::VCUINFO::Accel_report_6b*>(
      ::Calmcar::drivers::VCUINFO::Accel_report_6b::internal_default_instance());
  ::Calmcar::drivers::VCUINFO::_VcuInfo_default_instance_._instance.get_mutable()->gyro_report_6c_ = const_cast< ::Calmcar::drivers::VCUINFO::Gyro_report_6c*>(
      ::Calmcar::drivers::VCUINFO::Gyro_report_6c::internal_default_instance());
}
void VcuInfo::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VcuInfo::kHeaderFieldNumber;
const int VcuInfo::kSteeringReport65FieldNumber;
const int VcuInfo::kGearReport67FieldNumber;
const int VcuInfo::kWheelspeedReport6AFieldNumber;
const int VcuInfo::kAccelReport6BFieldNumber;
const int VcuInfo::kGyroReport6CFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VcuInfo::VcuInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_VcuInfo_2eproto::scc_info_VcuInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Calmcar.drivers.VCUINFO.VcuInfo)
}
VcuInfo::VcuInfo(const VcuInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::Calmcar::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_steering_report_65()) {
    steering_report_65_ = new ::Calmcar::drivers::VCUINFO::Steering_report_65(*from.steering_report_65_);
  } else {
    steering_report_65_ = NULL;
  }
  if (from.has_gear_report_67()) {
    gear_report_67_ = new ::Calmcar::drivers::VCUINFO::Gear_report_67(*from.gear_report_67_);
  } else {
    gear_report_67_ = NULL;
  }
  if (from.has_wheelspeed_report_6a()) {
    wheelspeed_report_6a_ = new ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a(*from.wheelspeed_report_6a_);
  } else {
    wheelspeed_report_6a_ = NULL;
  }
  if (from.has_accel_report_6b()) {
    accel_report_6b_ = new ::Calmcar::drivers::VCUINFO::Accel_report_6b(*from.accel_report_6b_);
  } else {
    accel_report_6b_ = NULL;
  }
  if (from.has_gyro_report_6c()) {
    gyro_report_6c_ = new ::Calmcar::drivers::VCUINFO::Gyro_report_6c(*from.gyro_report_6c_);
  } else {
    gyro_report_6c_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Calmcar.drivers.VCUINFO.VcuInfo)
}

void VcuInfo::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gyro_report_6c_) -
      reinterpret_cast<char*>(&header_)) + sizeof(gyro_report_6c_));
}

VcuInfo::~VcuInfo() {
  // @@protoc_insertion_point(destructor:Calmcar.drivers.VCUINFO.VcuInfo)
  SharedDtor();
}

void VcuInfo::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete steering_report_65_;
  if (this != internal_default_instance()) delete gear_report_67_;
  if (this != internal_default_instance()) delete wheelspeed_report_6a_;
  if (this != internal_default_instance()) delete accel_report_6b_;
  if (this != internal_default_instance()) delete gyro_report_6c_;
}

void VcuInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VcuInfo& VcuInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_VcuInfo_2eproto::scc_info_VcuInfo.base);
  return *internal_default_instance();
}


void VcuInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Calmcar.drivers.VCUINFO.VcuInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && steering_report_65_ != NULL) {
    delete steering_report_65_;
  }
  steering_report_65_ = NULL;
  if (GetArenaNoVirtual() == NULL && gear_report_67_ != NULL) {
    delete gear_report_67_;
  }
  gear_report_67_ = NULL;
  if (GetArenaNoVirtual() == NULL && wheelspeed_report_6a_ != NULL) {
    delete wheelspeed_report_6a_;
  }
  wheelspeed_report_6a_ = NULL;
  if (GetArenaNoVirtual() == NULL && accel_report_6b_ != NULL) {
    delete accel_report_6b_;
  }
  accel_report_6b_ = NULL;
  if (GetArenaNoVirtual() == NULL && gyro_report_6c_ != NULL) {
    delete gyro_report_6c_;
  }
  gyro_report_6c_ = NULL;
  _internal_metadata_.Clear();
}

bool VcuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Calmcar.drivers.VCUINFO.VcuInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Calmcar.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.VCUINFO.Steering_report_65 steering_report_65 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_steering_report_65()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.VCUINFO.Gear_report_67 gear_report_67 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gear_report_67()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.VCUINFO.Wheelspeed_report_6a wheelspeed_report_6a = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wheelspeed_report_6a()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.VCUINFO.Accel_report_6b accel_report_6b = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_accel_report_6b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Calmcar.drivers.VCUINFO.Gyro_report_6c gyro_report_6c = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gyro_report_6c()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Calmcar.drivers.VCUINFO.VcuInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Calmcar.drivers.VCUINFO.VcuInfo)
  return false;
#undef DO_
}

void VcuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Calmcar.drivers.VCUINFO.VcuInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Calmcar.common.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .Calmcar.drivers.VCUINFO.Steering_report_65 steering_report_65 = 10;
  if (this->has_steering_report_65()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->_internal_steering_report_65(), output);
  }

  // .Calmcar.drivers.VCUINFO.Gear_report_67 gear_report_67 = 12;
  if (this->has_gear_report_67()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->_internal_gear_report_67(), output);
  }

  // .Calmcar.drivers.VCUINFO.Wheelspeed_report_6a wheelspeed_report_6a = 20;
  if (this->has_wheelspeed_report_6a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->_internal_wheelspeed_report_6a(), output);
  }

  // .Calmcar.drivers.VCUINFO.Accel_report_6b accel_report_6b = 21;
  if (this->has_accel_report_6b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->_internal_accel_report_6b(), output);
  }

  // .Calmcar.drivers.VCUINFO.Gyro_report_6c gyro_report_6c = 22;
  if (this->has_gyro_report_6c()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->_internal_gyro_report_6c(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Calmcar.drivers.VCUINFO.VcuInfo)
}

size_t VcuInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Calmcar.drivers.VCUINFO.VcuInfo)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // .Calmcar.common.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .Calmcar.drivers.VCUINFO.Steering_report_65 steering_report_65 = 10;
  if (this->has_steering_report_65()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *steering_report_65_);
  }

  // .Calmcar.drivers.VCUINFO.Gear_report_67 gear_report_67 = 12;
  if (this->has_gear_report_67()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gear_report_67_);
  }

  // .Calmcar.drivers.VCUINFO.Wheelspeed_report_6a wheelspeed_report_6a = 20;
  if (this->has_wheelspeed_report_6a()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *wheelspeed_report_6a_);
  }

  // .Calmcar.drivers.VCUINFO.Accel_report_6b accel_report_6b = 21;
  if (this->has_accel_report_6b()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *accel_report_6b_);
  }

  // .Calmcar.drivers.VCUINFO.Gyro_report_6c gyro_report_6c = 22;
  if (this->has_gyro_report_6c()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gyro_report_6c_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VcuInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VcuInfo*>(&from));
}

void VcuInfo::MergeFrom(const VcuInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Calmcar.drivers.VCUINFO.VcuInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::Calmcar::common::Header::MergeFrom(from.header());
  }
  if (from.has_steering_report_65()) {
    mutable_steering_report_65()->::Calmcar::drivers::VCUINFO::Steering_report_65::MergeFrom(from.steering_report_65());
  }
  if (from.has_gear_report_67()) {
    mutable_gear_report_67()->::Calmcar::drivers::VCUINFO::Gear_report_67::MergeFrom(from.gear_report_67());
  }
  if (from.has_wheelspeed_report_6a()) {
    mutable_wheelspeed_report_6a()->::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a::MergeFrom(from.wheelspeed_report_6a());
  }
  if (from.has_accel_report_6b()) {
    mutable_accel_report_6b()->::Calmcar::drivers::VCUINFO::Accel_report_6b::MergeFrom(from.accel_report_6b());
  }
  if (from.has_gyro_report_6c()) {
    mutable_gyro_report_6c()->::Calmcar::drivers::VCUINFO::Gyro_report_6c::MergeFrom(from.gyro_report_6c());
  }
}

void VcuInfo::CopyFrom(const VcuInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Calmcar.drivers.VCUINFO.VcuInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VcuInfo::IsInitialized() const {
  return true;
}

void VcuInfo::Swap(VcuInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VcuInfo::InternalSwap(VcuInfo* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(steering_report_65_, other->steering_report_65_);
  swap(gear_report_67_, other->gear_report_67_);
  swap(wheelspeed_report_6a_, other->wheelspeed_report_6a_);
  swap(accel_report_6b_, other->accel_report_6b_);
  swap(gyro_report_6c_, other->gyro_report_6c_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string VcuInfo::GetTypeName() const {
  return "Calmcar.drivers.VCUINFO.VcuInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace VCUINFO
}  // namespace drivers
}  // namespace Calmcar
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::VCUINFO::Steering_report_65* Arena::CreateMaybeMessage< ::Calmcar::drivers::VCUINFO::Steering_report_65 >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::VCUINFO::Steering_report_65 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::VCUINFO::Gear_report_67* Arena::CreateMaybeMessage< ::Calmcar::drivers::VCUINFO::Gear_report_67 >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::VCUINFO::Gear_report_67 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a* Arena::CreateMaybeMessage< ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::VCUINFO::Accel_report_6b* Arena::CreateMaybeMessage< ::Calmcar::drivers::VCUINFO::Accel_report_6b >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::VCUINFO::Accel_report_6b >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::VCUINFO::Gyro_report_6c* Arena::CreateMaybeMessage< ::Calmcar::drivers::VCUINFO::Gyro_report_6c >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::VCUINFO::Gyro_report_6c >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Calmcar::drivers::VCUINFO::VcuInfo* Arena::CreateMaybeMessage< ::Calmcar::drivers::VCUINFO::VcuInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Calmcar::drivers::VCUINFO::VcuInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
