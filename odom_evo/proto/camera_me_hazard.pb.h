// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_me_hazard.proto

#ifndef PROTOBUF_INCLUDED_camera_5fme_5fhazard_2eproto
#define PROTOBUF_INCLUDED_camera_5fme_5fhazard_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fme_5fhazard_2eproto 

namespace protobuf_camera_5fme_5fhazard_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_camera_5fme_5fhazard_2eproto
namespace camera_me_hazard {
namespace proto {
class MeHazard;
class MeHazardDefaultTypeInternal;
extern MeHazardDefaultTypeInternal _MeHazard_default_instance_;
class MeHeader;
class MeHeaderDefaultTypeInternal;
extern MeHeaderDefaultTypeInternal _MeHeader_default_instance_;
class me_frame_hzd;
class me_frame_hzdDefaultTypeInternal;
extern me_frame_hzdDefaultTypeInternal _me_frame_hzd_default_instance_;
}  // namespace proto
}  // namespace camera_me_hazard
namespace google {
namespace protobuf {
template<> ::camera_me_hazard::proto::MeHazard* Arena::CreateMaybeMessage<::camera_me_hazard::proto::MeHazard>(Arena*);
template<> ::camera_me_hazard::proto::MeHeader* Arena::CreateMaybeMessage<::camera_me_hazard::proto::MeHeader>(Arena*);
template<> ::camera_me_hazard::proto::me_frame_hzd* Arena::CreateMaybeMessage<::camera_me_hazard::proto::me_frame_hzd>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace camera_me_hazard {
namespace proto {

// ===================================================================

class MeHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camera_me_hazard.proto.MeHeader) */ {
 public:
  MeHeader();
  virtual ~MeHeader();

  MeHeader(const MeHeader& from);

  inline MeHeader& operator=(const MeHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MeHeader(MeHeader&& from) noexcept
    : MeHeader() {
    *this = ::std::move(from);
  }

  inline MeHeader& operator=(MeHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MeHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeHeader* internal_default_instance() {
    return reinterpret_cast<const MeHeader*>(
               &_MeHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MeHeader* other);
  friend void swap(MeHeader& a, MeHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MeHeader* New() const final {
    return CreateMaybeMessage<MeHeader>(NULL);
  }

  MeHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MeHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MeHeader& from);
  void MergeFrom(const MeHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // uint32 rolling_counter = 2;
  void clear_rolling_counter();
  static const int kRollingCounterFieldNumber = 2;
  ::google::protobuf::uint32 rolling_counter() const;
  void set_rolling_counter(::google::protobuf::uint32 value);

  // uint32 sensor_id = 3;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 3;
  ::google::protobuf::uint32 sensor_id() const;
  void set_sensor_id(::google::protobuf::uint32 value);

  // uint32 obj_num = 4;
  void clear_obj_num();
  static const int kObjNumFieldNumber = 4;
  ::google::protobuf::uint32 obj_num() const;
  void set_obj_num(::google::protobuf::uint32 value);

  // uint32 line_num = 5;
  void clear_line_num();
  static const int kLineNumFieldNumber = 5;
  ::google::protobuf::uint32 line_num() const;
  void set_line_num(::google::protobuf::uint32 value);

  // uint32 hazard_num = 6;
  void clear_hazard_num();
  static const int kHazardNumFieldNumber = 6;
  ::google::protobuf::uint32 hazard_num() const;
  void set_hazard_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:camera_me_hazard.proto.MeHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 rolling_counter_;
  ::google::protobuf::uint32 sensor_id_;
  ::google::protobuf::uint32 obj_num_;
  ::google::protobuf::uint32 line_num_;
  ::google::protobuf::uint32 hazard_num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fme_5fhazard_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MeHazard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camera_me_hazard.proto.MeHazard) */ {
 public:
  MeHazard();
  virtual ~MeHazard();

  MeHazard(const MeHazard& from);

  inline MeHazard& operator=(const MeHazard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MeHazard(MeHazard&& from) noexcept
    : MeHazard() {
    *this = ::std::move(from);
  }

  inline MeHazard& operator=(MeHazard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MeHazard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeHazard* internal_default_instance() {
    return reinterpret_cast<const MeHazard*>(
               &_MeHazard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MeHazard* other);
  friend void swap(MeHazard& a, MeHazard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MeHazard* New() const final {
    return CreateMaybeMessage<MeHazard>(NULL);
  }

  MeHazard* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MeHazard>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MeHazard& from);
  void MergeFrom(const MeHazard& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeHazard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double existence_prob = 2;
  void clear_existence_prob();
  static const int kExistenceProbFieldNumber = 2;
  double existence_prob() const;
  void set_existence_prob(double value);

  // double dist_long = 3;
  void clear_dist_long();
  static const int kDistLongFieldNumber = 3;
  double dist_long() const;
  void set_dist_long(double value);

  // double dist_lat = 4;
  void clear_dist_lat();
  static const int kDistLatFieldNumber = 4;
  double dist_lat() const;
  void set_dist_lat(double value);

  // double dist_vert = 5;
  void clear_dist_vert();
  static const int kDistVertFieldNumber = 5;
  double dist_vert() const;
  void set_dist_vert(double value);

  // double height = 6;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  double height() const;
  void set_height(double value);

  // double width = 7;
  void clear_width();
  static const int kWidthFieldNumber = 7;
  double width() const;
  void set_width(double value);

  // double dist_long_std = 8;
  void clear_dist_long_std();
  static const int kDistLongStdFieldNumber = 8;
  double dist_long_std() const;
  void set_dist_long_std(double value);

  // double dist_lat_std = 9;
  void clear_dist_lat_std();
  static const int kDistLatStdFieldNumber = 9;
  double dist_lat_std() const;
  void set_dist_lat_std(double value);

  // uint32 hzd_id = 1;
  void clear_hzd_id();
  static const int kHzdIdFieldNumber = 1;
  ::google::protobuf::uint32 hzd_id() const;
  void set_hzd_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:camera_me_hazard.proto.MeHazard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double existence_prob_;
  double dist_long_;
  double dist_lat_;
  double dist_vert_;
  double height_;
  double width_;
  double dist_long_std_;
  double dist_lat_std_;
  ::google::protobuf::uint32 hzd_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fme_5fhazard_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class me_frame_hzd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camera_me_hazard.proto.me_frame_hzd) */ {
 public:
  me_frame_hzd();
  virtual ~me_frame_hzd();

  me_frame_hzd(const me_frame_hzd& from);

  inline me_frame_hzd& operator=(const me_frame_hzd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  me_frame_hzd(me_frame_hzd&& from) noexcept
    : me_frame_hzd() {
    *this = ::std::move(from);
  }

  inline me_frame_hzd& operator=(me_frame_hzd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const me_frame_hzd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const me_frame_hzd* internal_default_instance() {
    return reinterpret_cast<const me_frame_hzd*>(
               &_me_frame_hzd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(me_frame_hzd* other);
  friend void swap(me_frame_hzd& a, me_frame_hzd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline me_frame_hzd* New() const final {
    return CreateMaybeMessage<me_frame_hzd>(NULL);
  }

  me_frame_hzd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<me_frame_hzd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const me_frame_hzd& from);
  void MergeFrom(const me_frame_hzd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(me_frame_hzd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .camera_me_hazard.proto.MeHazard hzd = 3;
  int hzd_size() const;
  void clear_hzd();
  static const int kHzdFieldNumber = 3;
  ::camera_me_hazard::proto::MeHazard* mutable_hzd(int index);
  ::google::protobuf::RepeatedPtrField< ::camera_me_hazard::proto::MeHazard >*
      mutable_hzd();
  const ::camera_me_hazard::proto::MeHazard& hzd(int index) const;
  ::camera_me_hazard::proto::MeHazard* add_hzd();
  const ::google::protobuf::RepeatedPtrField< ::camera_me_hazard::proto::MeHazard >&
      hzd() const;

  // .camera_me_hazard.proto.MeHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::camera_me_hazard::proto::MeHeader& _internal_header() const;
  public:
  const ::camera_me_hazard::proto::MeHeader& header() const;
  ::camera_me_hazard::proto::MeHeader* release_header();
  ::camera_me_hazard::proto::MeHeader* mutable_header();
  void set_allocated_header(::camera_me_hazard::proto::MeHeader* header);

  // uint64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:camera_me_hazard.proto.me_frame_hzd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::camera_me_hazard::proto::MeHazard > hzd_;
  ::camera_me_hazard::proto::MeHeader* header_;
  ::google::protobuf::uint64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_camera_5fme_5fhazard_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MeHeader

// uint64 timestamp = 1;
inline void MeHeader::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MeHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.MeHeader.timestamp)
  return timestamp_;
}
inline void MeHeader::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:camera_me_hazard.proto.MeHeader.timestamp)
}

// uint32 rolling_counter = 2;
inline void MeHeader::clear_rolling_counter() {
  rolling_counter_ = 0u;
}
inline ::google::protobuf::uint32 MeHeader::rolling_counter() const {
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.MeHeader.rolling_counter)
  return rolling_counter_;
}
inline void MeHeader::set_rolling_counter(::google::protobuf::uint32 value) {
  
  rolling_counter_ = value;
  // @@protoc_insertion_point(field_set:camera_me_hazard.proto.MeHeader.rolling_counter)
}

// uint32 sensor_id = 3;
inline void MeHeader::clear_sensor_id() {
  sensor_id_ = 0u;
}
inline ::google::protobuf::uint32 MeHeader::sensor_id() const {
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.MeHeader.sensor_id)
  return sensor_id_;
}
inline void MeHeader::set_sensor_id(::google::protobuf::uint32 value) {
  
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:camera_me_hazard.proto.MeHeader.sensor_id)
}

// uint32 obj_num = 4;
inline void MeHeader::clear_obj_num() {
  obj_num_ = 0u;
}
inline ::google::protobuf::uint32 MeHeader::obj_num() const {
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.MeHeader.obj_num)
  return obj_num_;
}
inline void MeHeader::set_obj_num(::google::protobuf::uint32 value) {
  
  obj_num_ = value;
  // @@protoc_insertion_point(field_set:camera_me_hazard.proto.MeHeader.obj_num)
}

// uint32 line_num = 5;
inline void MeHeader::clear_line_num() {
  line_num_ = 0u;
}
inline ::google::protobuf::uint32 MeHeader::line_num() const {
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.MeHeader.line_num)
  return line_num_;
}
inline void MeHeader::set_line_num(::google::protobuf::uint32 value) {
  
  line_num_ = value;
  // @@protoc_insertion_point(field_set:camera_me_hazard.proto.MeHeader.line_num)
}

// uint32 hazard_num = 6;
inline void MeHeader::clear_hazard_num() {
  hazard_num_ = 0u;
}
inline ::google::protobuf::uint32 MeHeader::hazard_num() const {
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.MeHeader.hazard_num)
  return hazard_num_;
}
inline void MeHeader::set_hazard_num(::google::protobuf::uint32 value) {
  
  hazard_num_ = value;
  // @@protoc_insertion_point(field_set:camera_me_hazard.proto.MeHeader.hazard_num)
}

// -------------------------------------------------------------------

// MeHazard

// uint32 hzd_id = 1;
inline void MeHazard::clear_hzd_id() {
  hzd_id_ = 0u;
}
inline ::google::protobuf::uint32 MeHazard::hzd_id() const {
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.MeHazard.hzd_id)
  return hzd_id_;
}
inline void MeHazard::set_hzd_id(::google::protobuf::uint32 value) {
  
  hzd_id_ = value;
  // @@protoc_insertion_point(field_set:camera_me_hazard.proto.MeHazard.hzd_id)
}

// double existence_prob = 2;
inline void MeHazard::clear_existence_prob() {
  existence_prob_ = 0;
}
inline double MeHazard::existence_prob() const {
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.MeHazard.existence_prob)
  return existence_prob_;
}
inline void MeHazard::set_existence_prob(double value) {
  
  existence_prob_ = value;
  // @@protoc_insertion_point(field_set:camera_me_hazard.proto.MeHazard.existence_prob)
}

// double dist_long = 3;
inline void MeHazard::clear_dist_long() {
  dist_long_ = 0;
}
inline double MeHazard::dist_long() const {
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.MeHazard.dist_long)
  return dist_long_;
}
inline void MeHazard::set_dist_long(double value) {
  
  dist_long_ = value;
  // @@protoc_insertion_point(field_set:camera_me_hazard.proto.MeHazard.dist_long)
}

// double dist_lat = 4;
inline void MeHazard::clear_dist_lat() {
  dist_lat_ = 0;
}
inline double MeHazard::dist_lat() const {
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.MeHazard.dist_lat)
  return dist_lat_;
}
inline void MeHazard::set_dist_lat(double value) {
  
  dist_lat_ = value;
  // @@protoc_insertion_point(field_set:camera_me_hazard.proto.MeHazard.dist_lat)
}

// double dist_vert = 5;
inline void MeHazard::clear_dist_vert() {
  dist_vert_ = 0;
}
inline double MeHazard::dist_vert() const {
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.MeHazard.dist_vert)
  return dist_vert_;
}
inline void MeHazard::set_dist_vert(double value) {
  
  dist_vert_ = value;
  // @@protoc_insertion_point(field_set:camera_me_hazard.proto.MeHazard.dist_vert)
}

// double height = 6;
inline void MeHazard::clear_height() {
  height_ = 0;
}
inline double MeHazard::height() const {
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.MeHazard.height)
  return height_;
}
inline void MeHazard::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:camera_me_hazard.proto.MeHazard.height)
}

// double width = 7;
inline void MeHazard::clear_width() {
  width_ = 0;
}
inline double MeHazard::width() const {
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.MeHazard.width)
  return width_;
}
inline void MeHazard::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:camera_me_hazard.proto.MeHazard.width)
}

// double dist_long_std = 8;
inline void MeHazard::clear_dist_long_std() {
  dist_long_std_ = 0;
}
inline double MeHazard::dist_long_std() const {
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.MeHazard.dist_long_std)
  return dist_long_std_;
}
inline void MeHazard::set_dist_long_std(double value) {
  
  dist_long_std_ = value;
  // @@protoc_insertion_point(field_set:camera_me_hazard.proto.MeHazard.dist_long_std)
}

// double dist_lat_std = 9;
inline void MeHazard::clear_dist_lat_std() {
  dist_lat_std_ = 0;
}
inline double MeHazard::dist_lat_std() const {
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.MeHazard.dist_lat_std)
  return dist_lat_std_;
}
inline void MeHazard::set_dist_lat_std(double value) {
  
  dist_lat_std_ = value;
  // @@protoc_insertion_point(field_set:camera_me_hazard.proto.MeHazard.dist_lat_std)
}

// -------------------------------------------------------------------

// me_frame_hzd

// .camera_me_hazard.proto.MeHeader header = 1;
inline bool me_frame_hzd::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void me_frame_hzd::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::camera_me_hazard::proto::MeHeader& me_frame_hzd::_internal_header() const {
  return *header_;
}
inline const ::camera_me_hazard::proto::MeHeader& me_frame_hzd::header() const {
  const ::camera_me_hazard::proto::MeHeader* p = header_;
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.me_frame_hzd.header)
  return p != NULL ? *p : *reinterpret_cast<const ::camera_me_hazard::proto::MeHeader*>(
      &::camera_me_hazard::proto::_MeHeader_default_instance_);
}
inline ::camera_me_hazard::proto::MeHeader* me_frame_hzd::release_header() {
  // @@protoc_insertion_point(field_release:camera_me_hazard.proto.me_frame_hzd.header)
  
  ::camera_me_hazard::proto::MeHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::camera_me_hazard::proto::MeHeader* me_frame_hzd::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::camera_me_hazard::proto::MeHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:camera_me_hazard.proto.me_frame_hzd.header)
  return header_;
}
inline void me_frame_hzd::set_allocated_header(::camera_me_hazard::proto::MeHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:camera_me_hazard.proto.me_frame_hzd.header)
}

// uint64 timestamp = 2;
inline void me_frame_hzd::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 me_frame_hzd::timestamp() const {
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.me_frame_hzd.timestamp)
  return timestamp_;
}
inline void me_frame_hzd::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:camera_me_hazard.proto.me_frame_hzd.timestamp)
}

// repeated .camera_me_hazard.proto.MeHazard hzd = 3;
inline int me_frame_hzd::hzd_size() const {
  return hzd_.size();
}
inline void me_frame_hzd::clear_hzd() {
  hzd_.Clear();
}
inline ::camera_me_hazard::proto::MeHazard* me_frame_hzd::mutable_hzd(int index) {
  // @@protoc_insertion_point(field_mutable:camera_me_hazard.proto.me_frame_hzd.hzd)
  return hzd_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::camera_me_hazard::proto::MeHazard >*
me_frame_hzd::mutable_hzd() {
  // @@protoc_insertion_point(field_mutable_list:camera_me_hazard.proto.me_frame_hzd.hzd)
  return &hzd_;
}
inline const ::camera_me_hazard::proto::MeHazard& me_frame_hzd::hzd(int index) const {
  // @@protoc_insertion_point(field_get:camera_me_hazard.proto.me_frame_hzd.hzd)
  return hzd_.Get(index);
}
inline ::camera_me_hazard::proto::MeHazard* me_frame_hzd::add_hzd() {
  // @@protoc_insertion_point(field_add:camera_me_hazard.proto.me_frame_hzd.hzd)
  return hzd_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::camera_me_hazard::proto::MeHazard >&
me_frame_hzd::hzd() const {
  // @@protoc_insertion_point(field_list:camera_me_hazard.proto.me_frame_hzd.hzd)
  return hzd_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace camera_me_hazard

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_camera_5fme_5fhazard_2eproto
