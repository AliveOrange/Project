// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gnss_in.proto

#ifndef PROTOBUF_INCLUDED_gnss_5fin_2eproto
#define PROTOBUF_INCLUDED_gnss_5fin_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gnss_5fin_2eproto 

namespace protobuf_gnss_5fin_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_gnss_5fin_2eproto
namespace gnss_in {
namespace proto {
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Frame_Header;
class Frame_HeaderDefaultTypeInternal;
extern Frame_HeaderDefaultTypeInternal _Frame_Header_default_instance_;
class Frame_Utc;
class Frame_UtcDefaultTypeInternal;
extern Frame_UtcDefaultTypeInternal _Frame_Utc_default_instance_;
class Gnss;
class GnssDefaultTypeInternal;
extern GnssDefaultTypeInternal _Gnss_default_instance_;
class Gnss_Dop;
class Gnss_DopDefaultTypeInternal;
extern Gnss_DopDefaultTypeInternal _Gnss_Dop_default_instance_;
class Gnss_HeadingAndPitch;
class Gnss_HeadingAndPitchDefaultTypeInternal;
extern Gnss_HeadingAndPitchDefaultTypeInternal _Gnss_HeadingAndPitch_default_instance_;
class Gnss_HeightAndWeek;
class Gnss_HeightAndWeekDefaultTypeInternal;
extern Gnss_HeightAndWeekDefaultTypeInternal _Gnss_HeightAndWeek_default_instance_;
class Gnss_LatitudeLongitude;
class Gnss_LatitudeLongitudeDefaultTypeInternal;
extern Gnss_LatitudeLongitudeDefaultTypeInternal _Gnss_LatitudeLongitude_default_instance_;
}  // namespace proto
}  // namespace gnss_in
namespace google {
namespace protobuf {
template<> ::gnss_in::proto::Frame* Arena::CreateMaybeMessage<::gnss_in::proto::Frame>(Arena*);
template<> ::gnss_in::proto::Frame_Header* Arena::CreateMaybeMessage<::gnss_in::proto::Frame_Header>(Arena*);
template<> ::gnss_in::proto::Frame_Utc* Arena::CreateMaybeMessage<::gnss_in::proto::Frame_Utc>(Arena*);
template<> ::gnss_in::proto::Gnss* Arena::CreateMaybeMessage<::gnss_in::proto::Gnss>(Arena*);
template<> ::gnss_in::proto::Gnss_Dop* Arena::CreateMaybeMessage<::gnss_in::proto::Gnss_Dop>(Arena*);
template<> ::gnss_in::proto::Gnss_HeadingAndPitch* Arena::CreateMaybeMessage<::gnss_in::proto::Gnss_HeadingAndPitch>(Arena*);
template<> ::gnss_in::proto::Gnss_HeightAndWeek* Arena::CreateMaybeMessage<::gnss_in::proto::Gnss_HeightAndWeek>(Arena*);
template<> ::gnss_in::proto::Gnss_LatitudeLongitude* Arena::CreateMaybeMessage<::gnss_in::proto::Gnss_LatitudeLongitude>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gnss_in {
namespace proto {

// ===================================================================

class Gnss_LatitudeLongitude : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gnss_in.proto.Gnss.LatitudeLongitude) */ {
 public:
  Gnss_LatitudeLongitude();
  virtual ~Gnss_LatitudeLongitude();

  Gnss_LatitudeLongitude(const Gnss_LatitudeLongitude& from);

  inline Gnss_LatitudeLongitude& operator=(const Gnss_LatitudeLongitude& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Gnss_LatitudeLongitude(Gnss_LatitudeLongitude&& from) noexcept
    : Gnss_LatitudeLongitude() {
    *this = ::std::move(from);
  }

  inline Gnss_LatitudeLongitude& operator=(Gnss_LatitudeLongitude&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Gnss_LatitudeLongitude& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gnss_LatitudeLongitude* internal_default_instance() {
    return reinterpret_cast<const Gnss_LatitudeLongitude*>(
               &_Gnss_LatitudeLongitude_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Gnss_LatitudeLongitude* other);
  friend void swap(Gnss_LatitudeLongitude& a, Gnss_LatitudeLongitude& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gnss_LatitudeLongitude* New() const final {
    return CreateMaybeMessage<Gnss_LatitudeLongitude>(NULL);
  }

  Gnss_LatitudeLongitude* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Gnss_LatitudeLongitude>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Gnss_LatitudeLongitude& from);
  void MergeFrom(const Gnss_LatitudeLongitude& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gnss_LatitudeLongitude* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double longitude = 1;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 1;
  double longitude() const;
  void set_longitude(double value);

  // double latitude = 2;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  double latitude() const;
  void set_latitude(double value);

  // @@protoc_insertion_point(class_scope:gnss_in.proto.Gnss.LatitudeLongitude)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double longitude_;
  double latitude_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gnss_5fin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gnss_HeightAndWeek : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gnss_in.proto.Gnss.HeightAndWeek) */ {
 public:
  Gnss_HeightAndWeek();
  virtual ~Gnss_HeightAndWeek();

  Gnss_HeightAndWeek(const Gnss_HeightAndWeek& from);

  inline Gnss_HeightAndWeek& operator=(const Gnss_HeightAndWeek& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Gnss_HeightAndWeek(Gnss_HeightAndWeek&& from) noexcept
    : Gnss_HeightAndWeek() {
    *this = ::std::move(from);
  }

  inline Gnss_HeightAndWeek& operator=(Gnss_HeightAndWeek&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Gnss_HeightAndWeek& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gnss_HeightAndWeek* internal_default_instance() {
    return reinterpret_cast<const Gnss_HeightAndWeek*>(
               &_Gnss_HeightAndWeek_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Gnss_HeightAndWeek* other);
  friend void swap(Gnss_HeightAndWeek& a, Gnss_HeightAndWeek& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gnss_HeightAndWeek* New() const final {
    return CreateMaybeMessage<Gnss_HeightAndWeek>(NULL);
  }

  Gnss_HeightAndWeek* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Gnss_HeightAndWeek>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Gnss_HeightAndWeek& from);
  void MergeFrom(const Gnss_HeightAndWeek& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gnss_HeightAndWeek* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  double height() const;
  void set_height(double value);

  // uint32 week = 1;
  void clear_week();
  static const int kWeekFieldNumber = 1;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gnss_in.proto.Gnss.HeightAndWeek)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double height_;
  ::google::protobuf::uint32 week_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gnss_5fin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gnss_Dop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gnss_in.proto.Gnss.Dop) */ {
 public:
  Gnss_Dop();
  virtual ~Gnss_Dop();

  Gnss_Dop(const Gnss_Dop& from);

  inline Gnss_Dop& operator=(const Gnss_Dop& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Gnss_Dop(Gnss_Dop&& from) noexcept
    : Gnss_Dop() {
    *this = ::std::move(from);
  }

  inline Gnss_Dop& operator=(Gnss_Dop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Gnss_Dop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gnss_Dop* internal_default_instance() {
    return reinterpret_cast<const Gnss_Dop*>(
               &_Gnss_Dop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Gnss_Dop* other);
  friend void swap(Gnss_Dop& a, Gnss_Dop& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gnss_Dop* New() const final {
    return CreateMaybeMessage<Gnss_Dop>(NULL);
  }

  Gnss_Dop* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Gnss_Dop>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Gnss_Dop& from);
  void MergeFrom(const Gnss_Dop& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gnss_Dop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double htdop = 1;
  void clear_htdop();
  static const int kHtdopFieldNumber = 1;
  double htdop() const;
  void set_htdop(double value);

  // double pdop = 2;
  void clear_pdop();
  static const int kPdopFieldNumber = 2;
  double pdop() const;
  void set_pdop(double value);

  // double hdop = 3;
  void clear_hdop();
  static const int kHdopFieldNumber = 3;
  double hdop() const;
  void set_hdop(double value);

  // double gdop = 4;
  void clear_gdop();
  static const int kGdopFieldNumber = 4;
  double gdop() const;
  void set_gdop(double value);

  // @@protoc_insertion_point(class_scope:gnss_in.proto.Gnss.Dop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double htdop_;
  double pdop_;
  double hdop_;
  double gdop_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gnss_5fin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gnss_HeadingAndPitch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gnss_in.proto.Gnss.HeadingAndPitch) */ {
 public:
  Gnss_HeadingAndPitch();
  virtual ~Gnss_HeadingAndPitch();

  Gnss_HeadingAndPitch(const Gnss_HeadingAndPitch& from);

  inline Gnss_HeadingAndPitch& operator=(const Gnss_HeadingAndPitch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Gnss_HeadingAndPitch(Gnss_HeadingAndPitch&& from) noexcept
    : Gnss_HeadingAndPitch() {
    *this = ::std::move(from);
  }

  inline Gnss_HeadingAndPitch& operator=(Gnss_HeadingAndPitch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Gnss_HeadingAndPitch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gnss_HeadingAndPitch* internal_default_instance() {
    return reinterpret_cast<const Gnss_HeadingAndPitch*>(
               &_Gnss_HeadingAndPitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Gnss_HeadingAndPitch* other);
  friend void swap(Gnss_HeadingAndPitch& a, Gnss_HeadingAndPitch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gnss_HeadingAndPitch* New() const final {
    return CreateMaybeMessage<Gnss_HeadingAndPitch>(NULL);
  }

  Gnss_HeadingAndPitch* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Gnss_HeadingAndPitch>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Gnss_HeadingAndPitch& from);
  void MergeFrom(const Gnss_HeadingAndPitch& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gnss_HeadingAndPitch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double pitch = 1;
  void clear_pitch();
  static const int kPitchFieldNumber = 1;
  double pitch() const;
  void set_pitch(double value);

  // double heading = 2;
  void clear_heading();
  static const int kHeadingFieldNumber = 2;
  double heading() const;
  void set_heading(double value);

  // @@protoc_insertion_point(class_scope:gnss_in.proto.Gnss.HeadingAndPitch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double pitch_;
  double heading_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gnss_5fin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gnss : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gnss_in.proto.Gnss) */ {
 public:
  Gnss();
  virtual ~Gnss();

  Gnss(const Gnss& from);

  inline Gnss& operator=(const Gnss& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Gnss(Gnss&& from) noexcept
    : Gnss() {
    *this = ::std::move(from);
  }

  inline Gnss& operator=(Gnss&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Gnss& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gnss* internal_default_instance() {
    return reinterpret_cast<const Gnss*>(
               &_Gnss_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Gnss* other);
  friend void swap(Gnss& a, Gnss& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gnss* New() const final {
    return CreateMaybeMessage<Gnss>(NULL);
  }

  Gnss* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Gnss>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Gnss& from);
  void MergeFrom(const Gnss& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gnss* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Gnss_LatitudeLongitude LatitudeLongitude;
  typedef Gnss_HeightAndWeek HeightAndWeek;
  typedef Gnss_Dop Dop;
  typedef Gnss_HeadingAndPitch HeadingAndPitch;

  // accessors -------------------------------------------------------

  // .gnss_in.proto.Gnss.LatitudeLongitude latitude_longitude = 1;
  bool has_latitude_longitude() const;
  void clear_latitude_longitude();
  static const int kLatitudeLongitudeFieldNumber = 1;
  private:
  const ::gnss_in::proto::Gnss_LatitudeLongitude& _internal_latitude_longitude() const;
  public:
  const ::gnss_in::proto::Gnss_LatitudeLongitude& latitude_longitude() const;
  ::gnss_in::proto::Gnss_LatitudeLongitude* release_latitude_longitude();
  ::gnss_in::proto::Gnss_LatitudeLongitude* mutable_latitude_longitude();
  void set_allocated_latitude_longitude(::gnss_in::proto::Gnss_LatitudeLongitude* latitude_longitude);

  // .gnss_in.proto.Gnss.HeightAndWeek height_and_week = 2;
  bool has_height_and_week() const;
  void clear_height_and_week();
  static const int kHeightAndWeekFieldNumber = 2;
  private:
  const ::gnss_in::proto::Gnss_HeightAndWeek& _internal_height_and_week() const;
  public:
  const ::gnss_in::proto::Gnss_HeightAndWeek& height_and_week() const;
  ::gnss_in::proto::Gnss_HeightAndWeek* release_height_and_week();
  ::gnss_in::proto::Gnss_HeightAndWeek* mutable_height_and_week();
  void set_allocated_height_and_week(::gnss_in::proto::Gnss_HeightAndWeek* height_and_week);

  // .gnss_in.proto.Gnss.Dop dop = 3;
  bool has_dop() const;
  void clear_dop();
  static const int kDopFieldNumber = 3;
  private:
  const ::gnss_in::proto::Gnss_Dop& _internal_dop() const;
  public:
  const ::gnss_in::proto::Gnss_Dop& dop() const;
  ::gnss_in::proto::Gnss_Dop* release_dop();
  ::gnss_in::proto::Gnss_Dop* mutable_dop();
  void set_allocated_dop(::gnss_in::proto::Gnss_Dop* dop);

  // .gnss_in.proto.Gnss.HeadingAndPitch heading_and_pitch = 4;
  bool has_heading_and_pitch() const;
  void clear_heading_and_pitch();
  static const int kHeadingAndPitchFieldNumber = 4;
  private:
  const ::gnss_in::proto::Gnss_HeadingAndPitch& _internal_heading_and_pitch() const;
  public:
  const ::gnss_in::proto::Gnss_HeadingAndPitch& heading_and_pitch() const;
  ::gnss_in::proto::Gnss_HeadingAndPitch* release_heading_and_pitch();
  ::gnss_in::proto::Gnss_HeadingAndPitch* mutable_heading_and_pitch();
  void set_allocated_heading_and_pitch(::gnss_in::proto::Gnss_HeadingAndPitch* heading_and_pitch);

  // @@protoc_insertion_point(class_scope:gnss_in.proto.Gnss)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gnss_in::proto::Gnss_LatitudeLongitude* latitude_longitude_;
  ::gnss_in::proto::Gnss_HeightAndWeek* height_and_week_;
  ::gnss_in::proto::Gnss_Dop* dop_;
  ::gnss_in::proto::Gnss_HeadingAndPitch* heading_and_pitch_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gnss_5fin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Frame_Utc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gnss_in.proto.Frame.Utc) */ {
 public:
  Frame_Utc();
  virtual ~Frame_Utc();

  Frame_Utc(const Frame_Utc& from);

  inline Frame_Utc& operator=(const Frame_Utc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Frame_Utc(Frame_Utc&& from) noexcept
    : Frame_Utc() {
    *this = ::std::move(from);
  }

  inline Frame_Utc& operator=(Frame_Utc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame_Utc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame_Utc* internal_default_instance() {
    return reinterpret_cast<const Frame_Utc*>(
               &_Frame_Utc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Frame_Utc* other);
  friend void swap(Frame_Utc& a, Frame_Utc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Frame_Utc* New() const final {
    return CreateMaybeMessage<Frame_Utc>(NULL);
  }

  Frame_Utc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Frame_Utc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Frame_Utc& from);
  void MergeFrom(const Frame_Utc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame_Utc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 year = 1;
  void clear_year();
  static const int kYearFieldNumber = 1;
  ::google::protobuf::uint32 year() const;
  void set_year(::google::protobuf::uint32 value);

  // uint32 sec = 2;
  void clear_sec();
  static const int kSecFieldNumber = 2;
  ::google::protobuf::uint32 sec() const;
  void set_sec(::google::protobuf::uint32 value);

  // uint32 msec = 3;
  void clear_msec();
  static const int kMsecFieldNumber = 3;
  ::google::protobuf::uint32 msec() const;
  void set_msec(::google::protobuf::uint32 value);

  // uint32 month = 4;
  void clear_month();
  static const int kMonthFieldNumber = 4;
  ::google::protobuf::uint32 month() const;
  void set_month(::google::protobuf::uint32 value);

  // uint32 min = 5;
  void clear_min();
  static const int kMinFieldNumber = 5;
  ::google::protobuf::uint32 min() const;
  void set_min(::google::protobuf::uint32 value);

  // uint32 hour = 6;
  void clear_hour();
  static const int kHourFieldNumber = 6;
  ::google::protobuf::uint32 hour() const;
  void set_hour(::google::protobuf::uint32 value);

  // uint32 day = 7;
  void clear_day();
  static const int kDayFieldNumber = 7;
  ::google::protobuf::uint32 day() const;
  void set_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gnss_in.proto.Frame.Utc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 sec_;
  ::google::protobuf::uint32 msec_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 min_;
  ::google::protobuf::uint32 hour_;
  ::google::protobuf::uint32 day_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gnss_5fin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Frame_Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gnss_in.proto.Frame.Header) */ {
 public:
  Frame_Header();
  virtual ~Frame_Header();

  Frame_Header(const Frame_Header& from);

  inline Frame_Header& operator=(const Frame_Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Frame_Header(Frame_Header&& from) noexcept
    : Frame_Header() {
    *this = ::std::move(from);
  }

  inline Frame_Header& operator=(Frame_Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame_Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame_Header* internal_default_instance() {
    return reinterpret_cast<const Frame_Header*>(
               &_Frame_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Frame_Header* other);
  friend void swap(Frame_Header& a, Frame_Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Frame_Header* New() const final {
    return CreateMaybeMessage<Frame_Header>(NULL);
  }

  Frame_Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Frame_Header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Frame_Header& from);
  void MergeFrom(const Frame_Header& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame_Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string frame_id = 4;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 4;
  const ::std::string& frame_id() const;
  void set_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_id(::std::string&& value);
  #endif
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  ::std::string* mutable_frame_id();
  ::std::string* release_frame_id();
  void set_allocated_frame_id(::std::string* frame_id);

  // .gnss_in.proto.Frame.Utc utc = 2;
  bool has_utc() const;
  void clear_utc();
  static const int kUtcFieldNumber = 2;
  private:
  const ::gnss_in::proto::Frame_Utc& _internal_utc() const;
  public:
  const ::gnss_in::proto::Frame_Utc& utc() const;
  ::gnss_in::proto::Frame_Utc* release_utc();
  ::gnss_in::proto::Frame_Utc* mutable_utc();
  void set_allocated_utc(::gnss_in::proto::Frame_Utc* utc);

  // uint64 rolling_counter = 3;
  void clear_rolling_counter();
  static const int kRollingCounterFieldNumber = 3;
  ::google::protobuf::uint64 rolling_counter() const;
  void set_rolling_counter(::google::protobuf::uint64 value);

  // uint32 gnss_id = 1;
  void clear_gnss_id();
  static const int kGnssIdFieldNumber = 1;
  ::google::protobuf::uint32 gnss_id() const;
  void set_gnss_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gnss_in.proto.Frame.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr frame_id_;
  ::gnss_in::proto::Frame_Utc* utc_;
  ::google::protobuf::uint64 rolling_counter_;
  ::google::protobuf::uint32 gnss_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gnss_5fin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gnss_in.proto.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Frame* other);
  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(NULL);
  }

  Frame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Frame_Utc Utc;
  typedef Frame_Header Header;

  // accessors -------------------------------------------------------

  // .gnss_in.proto.Frame.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gnss_in::proto::Frame_Header& _internal_header() const;
  public:
  const ::gnss_in::proto::Frame_Header& header() const;
  ::gnss_in::proto::Frame_Header* release_header();
  ::gnss_in::proto::Frame_Header* mutable_header();
  void set_allocated_header(::gnss_in::proto::Frame_Header* header);

  // .gnss_in.proto.Gnss gnss = 3;
  bool has_gnss() const;
  void clear_gnss();
  static const int kGnssFieldNumber = 3;
  private:
  const ::gnss_in::proto::Gnss& _internal_gnss() const;
  public:
  const ::gnss_in::proto::Gnss& gnss() const;
  ::gnss_in::proto::Gnss* release_gnss();
  ::gnss_in::proto::Gnss* mutable_gnss();
  void set_allocated_gnss(::gnss_in::proto::Gnss* gnss);

  // uint64 sys_timestamp = 2;
  void clear_sys_timestamp();
  static const int kSysTimestampFieldNumber = 2;
  ::google::protobuf::uint64 sys_timestamp() const;
  void set_sys_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gnss_in.proto.Frame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gnss_in::proto::Frame_Header* header_;
  ::gnss_in::proto::Gnss* gnss_;
  ::google::protobuf::uint64 sys_timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_gnss_5fin_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Gnss_LatitudeLongitude

// double longitude = 1;
inline void Gnss_LatitudeLongitude::clear_longitude() {
  longitude_ = 0;
}
inline double Gnss_LatitudeLongitude::longitude() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Gnss.LatitudeLongitude.longitude)
  return longitude_;
}
inline void Gnss_LatitudeLongitude::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Gnss.LatitudeLongitude.longitude)
}

// double latitude = 2;
inline void Gnss_LatitudeLongitude::clear_latitude() {
  latitude_ = 0;
}
inline double Gnss_LatitudeLongitude::latitude() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Gnss.LatitudeLongitude.latitude)
  return latitude_;
}
inline void Gnss_LatitudeLongitude::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Gnss.LatitudeLongitude.latitude)
}

// -------------------------------------------------------------------

// Gnss_HeightAndWeek

// uint32 week = 1;
inline void Gnss_HeightAndWeek::clear_week() {
  week_ = 0u;
}
inline ::google::protobuf::uint32 Gnss_HeightAndWeek::week() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Gnss.HeightAndWeek.week)
  return week_;
}
inline void Gnss_HeightAndWeek::set_week(::google::protobuf::uint32 value) {
  
  week_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Gnss.HeightAndWeek.week)
}

// double height = 2;
inline void Gnss_HeightAndWeek::clear_height() {
  height_ = 0;
}
inline double Gnss_HeightAndWeek::height() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Gnss.HeightAndWeek.height)
  return height_;
}
inline void Gnss_HeightAndWeek::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Gnss.HeightAndWeek.height)
}

// -------------------------------------------------------------------

// Gnss_Dop

// double htdop = 1;
inline void Gnss_Dop::clear_htdop() {
  htdop_ = 0;
}
inline double Gnss_Dop::htdop() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Gnss.Dop.htdop)
  return htdop_;
}
inline void Gnss_Dop::set_htdop(double value) {
  
  htdop_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Gnss.Dop.htdop)
}

// double pdop = 2;
inline void Gnss_Dop::clear_pdop() {
  pdop_ = 0;
}
inline double Gnss_Dop::pdop() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Gnss.Dop.pdop)
  return pdop_;
}
inline void Gnss_Dop::set_pdop(double value) {
  
  pdop_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Gnss.Dop.pdop)
}

// double hdop = 3;
inline void Gnss_Dop::clear_hdop() {
  hdop_ = 0;
}
inline double Gnss_Dop::hdop() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Gnss.Dop.hdop)
  return hdop_;
}
inline void Gnss_Dop::set_hdop(double value) {
  
  hdop_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Gnss.Dop.hdop)
}

// double gdop = 4;
inline void Gnss_Dop::clear_gdop() {
  gdop_ = 0;
}
inline double Gnss_Dop::gdop() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Gnss.Dop.gdop)
  return gdop_;
}
inline void Gnss_Dop::set_gdop(double value) {
  
  gdop_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Gnss.Dop.gdop)
}

// -------------------------------------------------------------------

// Gnss_HeadingAndPitch

// double pitch = 1;
inline void Gnss_HeadingAndPitch::clear_pitch() {
  pitch_ = 0;
}
inline double Gnss_HeadingAndPitch::pitch() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Gnss.HeadingAndPitch.pitch)
  return pitch_;
}
inline void Gnss_HeadingAndPitch::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Gnss.HeadingAndPitch.pitch)
}

// double heading = 2;
inline void Gnss_HeadingAndPitch::clear_heading() {
  heading_ = 0;
}
inline double Gnss_HeadingAndPitch::heading() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Gnss.HeadingAndPitch.heading)
  return heading_;
}
inline void Gnss_HeadingAndPitch::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Gnss.HeadingAndPitch.heading)
}

// -------------------------------------------------------------------

// Gnss

// .gnss_in.proto.Gnss.LatitudeLongitude latitude_longitude = 1;
inline bool Gnss::has_latitude_longitude() const {
  return this != internal_default_instance() && latitude_longitude_ != NULL;
}
inline void Gnss::clear_latitude_longitude() {
  if (GetArenaNoVirtual() == NULL && latitude_longitude_ != NULL) {
    delete latitude_longitude_;
  }
  latitude_longitude_ = NULL;
}
inline const ::gnss_in::proto::Gnss_LatitudeLongitude& Gnss::_internal_latitude_longitude() const {
  return *latitude_longitude_;
}
inline const ::gnss_in::proto::Gnss_LatitudeLongitude& Gnss::latitude_longitude() const {
  const ::gnss_in::proto::Gnss_LatitudeLongitude* p = latitude_longitude_;
  // @@protoc_insertion_point(field_get:gnss_in.proto.Gnss.latitude_longitude)
  return p != NULL ? *p : *reinterpret_cast<const ::gnss_in::proto::Gnss_LatitudeLongitude*>(
      &::gnss_in::proto::_Gnss_LatitudeLongitude_default_instance_);
}
inline ::gnss_in::proto::Gnss_LatitudeLongitude* Gnss::release_latitude_longitude() {
  // @@protoc_insertion_point(field_release:gnss_in.proto.Gnss.latitude_longitude)
  
  ::gnss_in::proto::Gnss_LatitudeLongitude* temp = latitude_longitude_;
  latitude_longitude_ = NULL;
  return temp;
}
inline ::gnss_in::proto::Gnss_LatitudeLongitude* Gnss::mutable_latitude_longitude() {
  
  if (latitude_longitude_ == NULL) {
    auto* p = CreateMaybeMessage<::gnss_in::proto::Gnss_LatitudeLongitude>(GetArenaNoVirtual());
    latitude_longitude_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gnss_in.proto.Gnss.latitude_longitude)
  return latitude_longitude_;
}
inline void Gnss::set_allocated_latitude_longitude(::gnss_in::proto::Gnss_LatitudeLongitude* latitude_longitude) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete latitude_longitude_;
  }
  if (latitude_longitude) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      latitude_longitude = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, latitude_longitude, submessage_arena);
    }
    
  } else {
    
  }
  latitude_longitude_ = latitude_longitude;
  // @@protoc_insertion_point(field_set_allocated:gnss_in.proto.Gnss.latitude_longitude)
}

// .gnss_in.proto.Gnss.HeightAndWeek height_and_week = 2;
inline bool Gnss::has_height_and_week() const {
  return this != internal_default_instance() && height_and_week_ != NULL;
}
inline void Gnss::clear_height_and_week() {
  if (GetArenaNoVirtual() == NULL && height_and_week_ != NULL) {
    delete height_and_week_;
  }
  height_and_week_ = NULL;
}
inline const ::gnss_in::proto::Gnss_HeightAndWeek& Gnss::_internal_height_and_week() const {
  return *height_and_week_;
}
inline const ::gnss_in::proto::Gnss_HeightAndWeek& Gnss::height_and_week() const {
  const ::gnss_in::proto::Gnss_HeightAndWeek* p = height_and_week_;
  // @@protoc_insertion_point(field_get:gnss_in.proto.Gnss.height_and_week)
  return p != NULL ? *p : *reinterpret_cast<const ::gnss_in::proto::Gnss_HeightAndWeek*>(
      &::gnss_in::proto::_Gnss_HeightAndWeek_default_instance_);
}
inline ::gnss_in::proto::Gnss_HeightAndWeek* Gnss::release_height_and_week() {
  // @@protoc_insertion_point(field_release:gnss_in.proto.Gnss.height_and_week)
  
  ::gnss_in::proto::Gnss_HeightAndWeek* temp = height_and_week_;
  height_and_week_ = NULL;
  return temp;
}
inline ::gnss_in::proto::Gnss_HeightAndWeek* Gnss::mutable_height_and_week() {
  
  if (height_and_week_ == NULL) {
    auto* p = CreateMaybeMessage<::gnss_in::proto::Gnss_HeightAndWeek>(GetArenaNoVirtual());
    height_and_week_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gnss_in.proto.Gnss.height_and_week)
  return height_and_week_;
}
inline void Gnss::set_allocated_height_and_week(::gnss_in::proto::Gnss_HeightAndWeek* height_and_week) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete height_and_week_;
  }
  if (height_and_week) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      height_and_week = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, height_and_week, submessage_arena);
    }
    
  } else {
    
  }
  height_and_week_ = height_and_week;
  // @@protoc_insertion_point(field_set_allocated:gnss_in.proto.Gnss.height_and_week)
}

// .gnss_in.proto.Gnss.Dop dop = 3;
inline bool Gnss::has_dop() const {
  return this != internal_default_instance() && dop_ != NULL;
}
inline void Gnss::clear_dop() {
  if (GetArenaNoVirtual() == NULL && dop_ != NULL) {
    delete dop_;
  }
  dop_ = NULL;
}
inline const ::gnss_in::proto::Gnss_Dop& Gnss::_internal_dop() const {
  return *dop_;
}
inline const ::gnss_in::proto::Gnss_Dop& Gnss::dop() const {
  const ::gnss_in::proto::Gnss_Dop* p = dop_;
  // @@protoc_insertion_point(field_get:gnss_in.proto.Gnss.dop)
  return p != NULL ? *p : *reinterpret_cast<const ::gnss_in::proto::Gnss_Dop*>(
      &::gnss_in::proto::_Gnss_Dop_default_instance_);
}
inline ::gnss_in::proto::Gnss_Dop* Gnss::release_dop() {
  // @@protoc_insertion_point(field_release:gnss_in.proto.Gnss.dop)
  
  ::gnss_in::proto::Gnss_Dop* temp = dop_;
  dop_ = NULL;
  return temp;
}
inline ::gnss_in::proto::Gnss_Dop* Gnss::mutable_dop() {
  
  if (dop_ == NULL) {
    auto* p = CreateMaybeMessage<::gnss_in::proto::Gnss_Dop>(GetArenaNoVirtual());
    dop_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gnss_in.proto.Gnss.dop)
  return dop_;
}
inline void Gnss::set_allocated_dop(::gnss_in::proto::Gnss_Dop* dop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dop_;
  }
  if (dop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dop, submessage_arena);
    }
    
  } else {
    
  }
  dop_ = dop;
  // @@protoc_insertion_point(field_set_allocated:gnss_in.proto.Gnss.dop)
}

// .gnss_in.proto.Gnss.HeadingAndPitch heading_and_pitch = 4;
inline bool Gnss::has_heading_and_pitch() const {
  return this != internal_default_instance() && heading_and_pitch_ != NULL;
}
inline void Gnss::clear_heading_and_pitch() {
  if (GetArenaNoVirtual() == NULL && heading_and_pitch_ != NULL) {
    delete heading_and_pitch_;
  }
  heading_and_pitch_ = NULL;
}
inline const ::gnss_in::proto::Gnss_HeadingAndPitch& Gnss::_internal_heading_and_pitch() const {
  return *heading_and_pitch_;
}
inline const ::gnss_in::proto::Gnss_HeadingAndPitch& Gnss::heading_and_pitch() const {
  const ::gnss_in::proto::Gnss_HeadingAndPitch* p = heading_and_pitch_;
  // @@protoc_insertion_point(field_get:gnss_in.proto.Gnss.heading_and_pitch)
  return p != NULL ? *p : *reinterpret_cast<const ::gnss_in::proto::Gnss_HeadingAndPitch*>(
      &::gnss_in::proto::_Gnss_HeadingAndPitch_default_instance_);
}
inline ::gnss_in::proto::Gnss_HeadingAndPitch* Gnss::release_heading_and_pitch() {
  // @@protoc_insertion_point(field_release:gnss_in.proto.Gnss.heading_and_pitch)
  
  ::gnss_in::proto::Gnss_HeadingAndPitch* temp = heading_and_pitch_;
  heading_and_pitch_ = NULL;
  return temp;
}
inline ::gnss_in::proto::Gnss_HeadingAndPitch* Gnss::mutable_heading_and_pitch() {
  
  if (heading_and_pitch_ == NULL) {
    auto* p = CreateMaybeMessage<::gnss_in::proto::Gnss_HeadingAndPitch>(GetArenaNoVirtual());
    heading_and_pitch_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gnss_in.proto.Gnss.heading_and_pitch)
  return heading_and_pitch_;
}
inline void Gnss::set_allocated_heading_and_pitch(::gnss_in::proto::Gnss_HeadingAndPitch* heading_and_pitch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete heading_and_pitch_;
  }
  if (heading_and_pitch) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      heading_and_pitch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, heading_and_pitch, submessage_arena);
    }
    
  } else {
    
  }
  heading_and_pitch_ = heading_and_pitch;
  // @@protoc_insertion_point(field_set_allocated:gnss_in.proto.Gnss.heading_and_pitch)
}

// -------------------------------------------------------------------

// Frame_Utc

// uint32 year = 1;
inline void Frame_Utc::clear_year() {
  year_ = 0u;
}
inline ::google::protobuf::uint32 Frame_Utc::year() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Frame.Utc.year)
  return year_;
}
inline void Frame_Utc::set_year(::google::protobuf::uint32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Frame.Utc.year)
}

// uint32 sec = 2;
inline void Frame_Utc::clear_sec() {
  sec_ = 0u;
}
inline ::google::protobuf::uint32 Frame_Utc::sec() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Frame.Utc.sec)
  return sec_;
}
inline void Frame_Utc::set_sec(::google::protobuf::uint32 value) {
  
  sec_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Frame.Utc.sec)
}

// uint32 msec = 3;
inline void Frame_Utc::clear_msec() {
  msec_ = 0u;
}
inline ::google::protobuf::uint32 Frame_Utc::msec() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Frame.Utc.msec)
  return msec_;
}
inline void Frame_Utc::set_msec(::google::protobuf::uint32 value) {
  
  msec_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Frame.Utc.msec)
}

// uint32 month = 4;
inline void Frame_Utc::clear_month() {
  month_ = 0u;
}
inline ::google::protobuf::uint32 Frame_Utc::month() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Frame.Utc.month)
  return month_;
}
inline void Frame_Utc::set_month(::google::protobuf::uint32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Frame.Utc.month)
}

// uint32 min = 5;
inline void Frame_Utc::clear_min() {
  min_ = 0u;
}
inline ::google::protobuf::uint32 Frame_Utc::min() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Frame.Utc.min)
  return min_;
}
inline void Frame_Utc::set_min(::google::protobuf::uint32 value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Frame.Utc.min)
}

// uint32 hour = 6;
inline void Frame_Utc::clear_hour() {
  hour_ = 0u;
}
inline ::google::protobuf::uint32 Frame_Utc::hour() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Frame.Utc.hour)
  return hour_;
}
inline void Frame_Utc::set_hour(::google::protobuf::uint32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Frame.Utc.hour)
}

// uint32 day = 7;
inline void Frame_Utc::clear_day() {
  day_ = 0u;
}
inline ::google::protobuf::uint32 Frame_Utc::day() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Frame.Utc.day)
  return day_;
}
inline void Frame_Utc::set_day(::google::protobuf::uint32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Frame.Utc.day)
}

// -------------------------------------------------------------------

// Frame_Header

// uint32 gnss_id = 1;
inline void Frame_Header::clear_gnss_id() {
  gnss_id_ = 0u;
}
inline ::google::protobuf::uint32 Frame_Header::gnss_id() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Frame.Header.gnss_id)
  return gnss_id_;
}
inline void Frame_Header::set_gnss_id(::google::protobuf::uint32 value) {
  
  gnss_id_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Frame.Header.gnss_id)
}

// .gnss_in.proto.Frame.Utc utc = 2;
inline bool Frame_Header::has_utc() const {
  return this != internal_default_instance() && utc_ != NULL;
}
inline void Frame_Header::clear_utc() {
  if (GetArenaNoVirtual() == NULL && utc_ != NULL) {
    delete utc_;
  }
  utc_ = NULL;
}
inline const ::gnss_in::proto::Frame_Utc& Frame_Header::_internal_utc() const {
  return *utc_;
}
inline const ::gnss_in::proto::Frame_Utc& Frame_Header::utc() const {
  const ::gnss_in::proto::Frame_Utc* p = utc_;
  // @@protoc_insertion_point(field_get:gnss_in.proto.Frame.Header.utc)
  return p != NULL ? *p : *reinterpret_cast<const ::gnss_in::proto::Frame_Utc*>(
      &::gnss_in::proto::_Frame_Utc_default_instance_);
}
inline ::gnss_in::proto::Frame_Utc* Frame_Header::release_utc() {
  // @@protoc_insertion_point(field_release:gnss_in.proto.Frame.Header.utc)
  
  ::gnss_in::proto::Frame_Utc* temp = utc_;
  utc_ = NULL;
  return temp;
}
inline ::gnss_in::proto::Frame_Utc* Frame_Header::mutable_utc() {
  
  if (utc_ == NULL) {
    auto* p = CreateMaybeMessage<::gnss_in::proto::Frame_Utc>(GetArenaNoVirtual());
    utc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gnss_in.proto.Frame.Header.utc)
  return utc_;
}
inline void Frame_Header::set_allocated_utc(::gnss_in::proto::Frame_Utc* utc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete utc_;
  }
  if (utc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      utc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, utc, submessage_arena);
    }
    
  } else {
    
  }
  utc_ = utc;
  // @@protoc_insertion_point(field_set_allocated:gnss_in.proto.Frame.Header.utc)
}

// uint64 rolling_counter = 3;
inline void Frame_Header::clear_rolling_counter() {
  rolling_counter_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Frame_Header::rolling_counter() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Frame.Header.rolling_counter)
  return rolling_counter_;
}
inline void Frame_Header::set_rolling_counter(::google::protobuf::uint64 value) {
  
  rolling_counter_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Frame.Header.rolling_counter)
}

// string frame_id = 4;
inline void Frame_Header::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Frame_Header::frame_id() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Frame.Header.frame_id)
  return frame_id_.GetNoArena();
}
inline void Frame_Header::set_frame_id(const ::std::string& value) {
  
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gnss_in.proto.Frame.Header.frame_id)
}
#if LANG_CXX11
inline void Frame_Header::set_frame_id(::std::string&& value) {
  
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gnss_in.proto.Frame.Header.frame_id)
}
#endif
inline void Frame_Header::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gnss_in.proto.Frame.Header.frame_id)
}
inline void Frame_Header::set_frame_id(const char* value, size_t size) {
  
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gnss_in.proto.Frame.Header.frame_id)
}
inline ::std::string* Frame_Header::mutable_frame_id() {
  
  // @@protoc_insertion_point(field_mutable:gnss_in.proto.Frame.Header.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Frame_Header::release_frame_id() {
  // @@protoc_insertion_point(field_release:gnss_in.proto.Frame.Header.frame_id)
  
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Frame_Header::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    
  } else {
    
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:gnss_in.proto.Frame.Header.frame_id)
}

// -------------------------------------------------------------------

// Frame

// .gnss_in.proto.Frame.Header header = 1;
inline bool Frame::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void Frame::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::gnss_in::proto::Frame_Header& Frame::_internal_header() const {
  return *header_;
}
inline const ::gnss_in::proto::Frame_Header& Frame::header() const {
  const ::gnss_in::proto::Frame_Header* p = header_;
  // @@protoc_insertion_point(field_get:gnss_in.proto.Frame.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gnss_in::proto::Frame_Header*>(
      &::gnss_in::proto::_Frame_Header_default_instance_);
}
inline ::gnss_in::proto::Frame_Header* Frame::release_header() {
  // @@protoc_insertion_point(field_release:gnss_in.proto.Frame.header)
  
  ::gnss_in::proto::Frame_Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gnss_in::proto::Frame_Header* Frame::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gnss_in::proto::Frame_Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gnss_in.proto.Frame.header)
  return header_;
}
inline void Frame::set_allocated_header(::gnss_in::proto::Frame_Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gnss_in.proto.Frame.header)
}

// uint64 sys_timestamp = 2;
inline void Frame::clear_sys_timestamp() {
  sys_timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Frame::sys_timestamp() const {
  // @@protoc_insertion_point(field_get:gnss_in.proto.Frame.sys_timestamp)
  return sys_timestamp_;
}
inline void Frame::set_sys_timestamp(::google::protobuf::uint64 value) {
  
  sys_timestamp_ = value;
  // @@protoc_insertion_point(field_set:gnss_in.proto.Frame.sys_timestamp)
}

// .gnss_in.proto.Gnss gnss = 3;
inline bool Frame::has_gnss() const {
  return this != internal_default_instance() && gnss_ != NULL;
}
inline void Frame::clear_gnss() {
  if (GetArenaNoVirtual() == NULL && gnss_ != NULL) {
    delete gnss_;
  }
  gnss_ = NULL;
}
inline const ::gnss_in::proto::Gnss& Frame::_internal_gnss() const {
  return *gnss_;
}
inline const ::gnss_in::proto::Gnss& Frame::gnss() const {
  const ::gnss_in::proto::Gnss* p = gnss_;
  // @@protoc_insertion_point(field_get:gnss_in.proto.Frame.gnss)
  return p != NULL ? *p : *reinterpret_cast<const ::gnss_in::proto::Gnss*>(
      &::gnss_in::proto::_Gnss_default_instance_);
}
inline ::gnss_in::proto::Gnss* Frame::release_gnss() {
  // @@protoc_insertion_point(field_release:gnss_in.proto.Frame.gnss)
  
  ::gnss_in::proto::Gnss* temp = gnss_;
  gnss_ = NULL;
  return temp;
}
inline ::gnss_in::proto::Gnss* Frame::mutable_gnss() {
  
  if (gnss_ == NULL) {
    auto* p = CreateMaybeMessage<::gnss_in::proto::Gnss>(GetArenaNoVirtual());
    gnss_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gnss_in.proto.Frame.gnss)
  return gnss_;
}
inline void Frame::set_allocated_gnss(::gnss_in::proto::Gnss* gnss) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gnss_;
  }
  if (gnss) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gnss = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gnss, submessage_arena);
    }
    
  } else {
    
  }
  gnss_ = gnss;
  // @@protoc_insertion_point(field_set_allocated:gnss_in.proto.Frame.gnss)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace gnss_in

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gnss_5fin_2eproto
