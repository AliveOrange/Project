// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lidar_obj.proto

#ifndef PROTOBUF_INCLUDED_lidar_5fobj_2eproto
#define PROTOBUF_INCLUDED_lidar_5fobj_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_lidar_5fobj_2eproto 

namespace protobuf_lidar_5fobj_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_lidar_5fobj_2eproto
namespace lidar_obj {
namespace proto {
class HEADER;
class HEADERDefaultTypeInternal;
extern HEADERDefaultTypeInternal _HEADER_default_instance_;
class lidar_obj;
class lidar_objDefaultTypeInternal;
extern lidar_objDefaultTypeInternal _lidar_obj_default_instance_;
class obj_info;
class obj_infoDefaultTypeInternal;
extern obj_infoDefaultTypeInternal _obj_info_default_instance_;
}  // namespace proto
}  // namespace lidar_obj
namespace google {
namespace protobuf {
template<> ::lidar_obj::proto::HEADER* Arena::CreateMaybeMessage<::lidar_obj::proto::HEADER>(Arena*);
template<> ::lidar_obj::proto::lidar_obj* Arena::CreateMaybeMessage<::lidar_obj::proto::lidar_obj>(Arena*);
template<> ::lidar_obj::proto::obj_info* Arena::CreateMaybeMessage<::lidar_obj::proto::obj_info>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace lidar_obj {
namespace proto {

// ===================================================================

class HEADER : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lidar_obj.proto.HEADER) */ {
 public:
  HEADER();
  virtual ~HEADER();

  HEADER(const HEADER& from);

  inline HEADER& operator=(const HEADER& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HEADER(HEADER&& from) noexcept
    : HEADER() {
    *this = ::std::move(from);
  }

  inline HEADER& operator=(HEADER&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HEADER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HEADER* internal_default_instance() {
    return reinterpret_cast<const HEADER*>(
               &_HEADER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HEADER* other);
  friend void swap(HEADER& a, HEADER& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HEADER* New() const final {
    return CreateMaybeMessage<HEADER>(NULL);
  }

  HEADER* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HEADER>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HEADER& from);
  void MergeFrom(const HEADER& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HEADER* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int64 frame_id = 2;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 2;
  ::google::protobuf::int64 frame_id() const;
  void set_frame_id(::google::protobuf::int64 value);

  // int64 rolling_counter = 3;
  void clear_rolling_counter();
  static const int kRollingCounterFieldNumber = 3;
  ::google::protobuf::int64 rolling_counter() const;
  void set_rolling_counter(::google::protobuf::int64 value);

  // int32 num_of_obj = 4;
  void clear_num_of_obj();
  static const int kNumOfObjFieldNumber = 4;
  ::google::protobuf::int32 num_of_obj() const;
  void set_num_of_obj(::google::protobuf::int32 value);

  // int32 id_liar = 5;
  void clear_id_liar();
  static const int kIdLiarFieldNumber = 5;
  ::google::protobuf::int32 id_liar() const;
  void set_id_liar(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lidar_obj.proto.HEADER)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 frame_id_;
  ::google::protobuf::int64 rolling_counter_;
  ::google::protobuf::int32 num_of_obj_;
  ::google::protobuf::int32 id_liar_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_lidar_5fobj_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class obj_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lidar_obj.proto.obj_info) */ {
 public:
  obj_info();
  virtual ~obj_info();

  obj_info(const obj_info& from);

  inline obj_info& operator=(const obj_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  obj_info(obj_info&& from) noexcept
    : obj_info() {
    *this = ::std::move(from);
  }

  inline obj_info& operator=(obj_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const obj_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const obj_info* internal_default_instance() {
    return reinterpret_cast<const obj_info*>(
               &_obj_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(obj_info* other);
  friend void swap(obj_info& a, obj_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline obj_info* New() const final {
    return CreateMaybeMessage<obj_info>(NULL);
  }

  obj_info* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<obj_info>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const obj_info& from);
  void MergeFrom(const obj_info& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(obj_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 class_type = 1;
  void clear_class_type();
  static const int kClassTypeFieldNumber = 1;
  ::google::protobuf::int32 class_type() const;
  void set_class_type(::google::protobuf::int32 value);

  // float confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  float confidence() const;
  void set_confidence(float value);

  // float length = 3;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  float length() const;
  void set_length(float value);

  // float width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  float width() const;
  void set_width(float value);

  // float height = 5;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  float height() const;
  void set_height(float value);

  // float loc_x = 6;
  void clear_loc_x();
  static const int kLocXFieldNumber = 6;
  float loc_x() const;
  void set_loc_x(float value);

  // float loc_y = 7;
  void clear_loc_y();
  static const int kLocYFieldNumber = 7;
  float loc_y() const;
  void set_loc_y(float value);

  // float loc_z = 8;
  void clear_loc_z();
  static const int kLocZFieldNumber = 8;
  float loc_z() const;
  void set_loc_z(float value);

  // float orientation_angle = 9;
  void clear_orientation_angle();
  static const int kOrientationAngleFieldNumber = 9;
  float orientation_angle() const;
  void set_orientation_angle(float value);

  // @@protoc_insertion_point(class_scope:lidar_obj.proto.obj_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 class_type_;
  float confidence_;
  float length_;
  float width_;
  float height_;
  float loc_x_;
  float loc_y_;
  float loc_z_;
  float orientation_angle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_lidar_5fobj_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class lidar_obj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lidar_obj.proto.lidar_obj) */ {
 public:
  lidar_obj();
  virtual ~lidar_obj();

  lidar_obj(const lidar_obj& from);

  inline lidar_obj& operator=(const lidar_obj& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  lidar_obj(lidar_obj&& from) noexcept
    : lidar_obj() {
    *this = ::std::move(from);
  }

  inline lidar_obj& operator=(lidar_obj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const lidar_obj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const lidar_obj* internal_default_instance() {
    return reinterpret_cast<const lidar_obj*>(
               &_lidar_obj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(lidar_obj* other);
  friend void swap(lidar_obj& a, lidar_obj& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline lidar_obj* New() const final {
    return CreateMaybeMessage<lidar_obj>(NULL);
  }

  lidar_obj* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<lidar_obj>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const lidar_obj& from);
  void MergeFrom(const lidar_obj& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(lidar_obj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lidar_obj.proto.obj_info obj = 2;
  int obj_size() const;
  void clear_obj();
  static const int kObjFieldNumber = 2;
  ::lidar_obj::proto::obj_info* mutable_obj(int index);
  ::google::protobuf::RepeatedPtrField< ::lidar_obj::proto::obj_info >*
      mutable_obj();
  const ::lidar_obj::proto::obj_info& obj(int index) const;
  ::lidar_obj::proto::obj_info* add_obj();
  const ::google::protobuf::RepeatedPtrField< ::lidar_obj::proto::obj_info >&
      obj() const;

  // .lidar_obj.proto.HEADER header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::lidar_obj::proto::HEADER& _internal_header() const;
  public:
  const ::lidar_obj::proto::HEADER& header() const;
  ::lidar_obj::proto::HEADER* release_header();
  ::lidar_obj::proto::HEADER* mutable_header();
  void set_allocated_header(::lidar_obj::proto::HEADER* header);

  // @@protoc_insertion_point(class_scope:lidar_obj.proto.lidar_obj)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::lidar_obj::proto::obj_info > obj_;
  ::lidar_obj::proto::HEADER* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_lidar_5fobj_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HEADER

// int64 timestamp = 1;
inline void HEADER::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HEADER::timestamp() const {
  // @@protoc_insertion_point(field_get:lidar_obj.proto.HEADER.timestamp)
  return timestamp_;
}
inline void HEADER::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:lidar_obj.proto.HEADER.timestamp)
}

// int64 frame_id = 2;
inline void HEADER::clear_frame_id() {
  frame_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HEADER::frame_id() const {
  // @@protoc_insertion_point(field_get:lidar_obj.proto.HEADER.frame_id)
  return frame_id_;
}
inline void HEADER::set_frame_id(::google::protobuf::int64 value) {
  
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:lidar_obj.proto.HEADER.frame_id)
}

// int64 rolling_counter = 3;
inline void HEADER::clear_rolling_counter() {
  rolling_counter_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HEADER::rolling_counter() const {
  // @@protoc_insertion_point(field_get:lidar_obj.proto.HEADER.rolling_counter)
  return rolling_counter_;
}
inline void HEADER::set_rolling_counter(::google::protobuf::int64 value) {
  
  rolling_counter_ = value;
  // @@protoc_insertion_point(field_set:lidar_obj.proto.HEADER.rolling_counter)
}

// int32 num_of_obj = 4;
inline void HEADER::clear_num_of_obj() {
  num_of_obj_ = 0;
}
inline ::google::protobuf::int32 HEADER::num_of_obj() const {
  // @@protoc_insertion_point(field_get:lidar_obj.proto.HEADER.num_of_obj)
  return num_of_obj_;
}
inline void HEADER::set_num_of_obj(::google::protobuf::int32 value) {
  
  num_of_obj_ = value;
  // @@protoc_insertion_point(field_set:lidar_obj.proto.HEADER.num_of_obj)
}

// int32 id_liar = 5;
inline void HEADER::clear_id_liar() {
  id_liar_ = 0;
}
inline ::google::protobuf::int32 HEADER::id_liar() const {
  // @@protoc_insertion_point(field_get:lidar_obj.proto.HEADER.id_liar)
  return id_liar_;
}
inline void HEADER::set_id_liar(::google::protobuf::int32 value) {
  
  id_liar_ = value;
  // @@protoc_insertion_point(field_set:lidar_obj.proto.HEADER.id_liar)
}

// -------------------------------------------------------------------

// obj_info

// int32 class_type = 1;
inline void obj_info::clear_class_type() {
  class_type_ = 0;
}
inline ::google::protobuf::int32 obj_info::class_type() const {
  // @@protoc_insertion_point(field_get:lidar_obj.proto.obj_info.class_type)
  return class_type_;
}
inline void obj_info::set_class_type(::google::protobuf::int32 value) {
  
  class_type_ = value;
  // @@protoc_insertion_point(field_set:lidar_obj.proto.obj_info.class_type)
}

// float confidence = 2;
inline void obj_info::clear_confidence() {
  confidence_ = 0;
}
inline float obj_info::confidence() const {
  // @@protoc_insertion_point(field_get:lidar_obj.proto.obj_info.confidence)
  return confidence_;
}
inline void obj_info::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:lidar_obj.proto.obj_info.confidence)
}

// float length = 3;
inline void obj_info::clear_length() {
  length_ = 0;
}
inline float obj_info::length() const {
  // @@protoc_insertion_point(field_get:lidar_obj.proto.obj_info.length)
  return length_;
}
inline void obj_info::set_length(float value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:lidar_obj.proto.obj_info.length)
}

// float width = 4;
inline void obj_info::clear_width() {
  width_ = 0;
}
inline float obj_info::width() const {
  // @@protoc_insertion_point(field_get:lidar_obj.proto.obj_info.width)
  return width_;
}
inline void obj_info::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:lidar_obj.proto.obj_info.width)
}

// float height = 5;
inline void obj_info::clear_height() {
  height_ = 0;
}
inline float obj_info::height() const {
  // @@protoc_insertion_point(field_get:lidar_obj.proto.obj_info.height)
  return height_;
}
inline void obj_info::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:lidar_obj.proto.obj_info.height)
}

// float loc_x = 6;
inline void obj_info::clear_loc_x() {
  loc_x_ = 0;
}
inline float obj_info::loc_x() const {
  // @@protoc_insertion_point(field_get:lidar_obj.proto.obj_info.loc_x)
  return loc_x_;
}
inline void obj_info::set_loc_x(float value) {
  
  loc_x_ = value;
  // @@protoc_insertion_point(field_set:lidar_obj.proto.obj_info.loc_x)
}

// float loc_y = 7;
inline void obj_info::clear_loc_y() {
  loc_y_ = 0;
}
inline float obj_info::loc_y() const {
  // @@protoc_insertion_point(field_get:lidar_obj.proto.obj_info.loc_y)
  return loc_y_;
}
inline void obj_info::set_loc_y(float value) {
  
  loc_y_ = value;
  // @@protoc_insertion_point(field_set:lidar_obj.proto.obj_info.loc_y)
}

// float loc_z = 8;
inline void obj_info::clear_loc_z() {
  loc_z_ = 0;
}
inline float obj_info::loc_z() const {
  // @@protoc_insertion_point(field_get:lidar_obj.proto.obj_info.loc_z)
  return loc_z_;
}
inline void obj_info::set_loc_z(float value) {
  
  loc_z_ = value;
  // @@protoc_insertion_point(field_set:lidar_obj.proto.obj_info.loc_z)
}

// float orientation_angle = 9;
inline void obj_info::clear_orientation_angle() {
  orientation_angle_ = 0;
}
inline float obj_info::orientation_angle() const {
  // @@protoc_insertion_point(field_get:lidar_obj.proto.obj_info.orientation_angle)
  return orientation_angle_;
}
inline void obj_info::set_orientation_angle(float value) {
  
  orientation_angle_ = value;
  // @@protoc_insertion_point(field_set:lidar_obj.proto.obj_info.orientation_angle)
}

// -------------------------------------------------------------------

// lidar_obj

// .lidar_obj.proto.HEADER header = 1;
inline bool lidar_obj::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void lidar_obj::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::lidar_obj::proto::HEADER& lidar_obj::_internal_header() const {
  return *header_;
}
inline const ::lidar_obj::proto::HEADER& lidar_obj::header() const {
  const ::lidar_obj::proto::HEADER* p = header_;
  // @@protoc_insertion_point(field_get:lidar_obj.proto.lidar_obj.header)
  return p != NULL ? *p : *reinterpret_cast<const ::lidar_obj::proto::HEADER*>(
      &::lidar_obj::proto::_HEADER_default_instance_);
}
inline ::lidar_obj::proto::HEADER* lidar_obj::release_header() {
  // @@protoc_insertion_point(field_release:lidar_obj.proto.lidar_obj.header)
  
  ::lidar_obj::proto::HEADER* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::lidar_obj::proto::HEADER* lidar_obj::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::lidar_obj::proto::HEADER>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lidar_obj.proto.lidar_obj.header)
  return header_;
}
inline void lidar_obj::set_allocated_header(::lidar_obj::proto::HEADER* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:lidar_obj.proto.lidar_obj.header)
}

// repeated .lidar_obj.proto.obj_info obj = 2;
inline int lidar_obj::obj_size() const {
  return obj_.size();
}
inline void lidar_obj::clear_obj() {
  obj_.Clear();
}
inline ::lidar_obj::proto::obj_info* lidar_obj::mutable_obj(int index) {
  // @@protoc_insertion_point(field_mutable:lidar_obj.proto.lidar_obj.obj)
  return obj_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::lidar_obj::proto::obj_info >*
lidar_obj::mutable_obj() {
  // @@protoc_insertion_point(field_mutable_list:lidar_obj.proto.lidar_obj.obj)
  return &obj_;
}
inline const ::lidar_obj::proto::obj_info& lidar_obj::obj(int index) const {
  // @@protoc_insertion_point(field_get:lidar_obj.proto.lidar_obj.obj)
  return obj_.Get(index);
}
inline ::lidar_obj::proto::obj_info* lidar_obj::add_obj() {
  // @@protoc_insertion_point(field_add:lidar_obj.proto.lidar_obj.obj)
  return obj_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::lidar_obj::proto::obj_info >&
lidar_obj::obj() const {
  // @@protoc_insertion_point(field_list:lidar_obj.proto.lidar_obj.obj)
  return obj_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace lidar_obj

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_lidar_5fobj_2eproto
