// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: radar_ars_od.proto

#include "radar_ars_od.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_radar_5fars_5fod_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_radar_5fars_5fod_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ArsHeader;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_radar_5fars_5fod_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ArsObjectInfo;
}  // namespace protobuf_radar_5fars_5fod_2eproto
namespace radar_ars {
namespace proto {
class ArsHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArsHeader>
      _instance;
} _ArsHeader_default_instance_;
class ArsObjectInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArsObjectInfo>
      _instance;
} _ArsObjectInfo_default_instance_;
class ars_frameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ars_frame>
      _instance;
} _ars_frame_default_instance_;
}  // namespace proto
}  // namespace radar_ars
namespace protobuf_radar_5fars_5fod_2eproto {
static void InitDefaultsArsHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::radar_ars::proto::_ArsHeader_default_instance_;
    new (ptr) ::radar_ars::proto::ArsHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::radar_ars::proto::ArsHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ArsHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsArsHeader}, {}};

static void InitDefaultsArsObjectInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::radar_ars::proto::_ArsObjectInfo_default_instance_;
    new (ptr) ::radar_ars::proto::ArsObjectInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::radar_ars::proto::ArsObjectInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ArsObjectInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsArsObjectInfo}, {}};

static void InitDefaultsars_frame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::radar_ars::proto::_ars_frame_default_instance_;
    new (ptr) ::radar_ars::proto::ars_frame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::radar_ars::proto::ars_frame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ars_frame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsars_frame}, {
      &protobuf_radar_5fars_5fod_2eproto::scc_info_ArsHeader.base,
      &protobuf_radar_5fars_5fod_2eproto::scc_info_ArsObjectInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ArsHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArsObjectInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ars_frame.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsHeader, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsHeader, rolling_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsHeader, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsHeader, obj_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, obj_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, class_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, life_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, motion_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, dist_long_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, dist_lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, vrel_long_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, vrel_lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, arel_long_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, arel_lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, yaw_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, orientation_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, meas_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, rcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, dist_long_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, dist_lat_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, vrel_long_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, vrel_lat_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, arel_long_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, arel_lat_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ArsObjectInfo, orientation_rms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ars_frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ars_frame, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ars_frame, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::radar_ars::proto::ars_frame, objects_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::radar_ars::proto::ArsHeader)},
  { 9, -1, sizeof(::radar_ars::proto::ArsObjectInfo)},
  { 39, -1, sizeof(::radar_ars::proto::ars_frame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::radar_ars::proto::_ArsHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::radar_ars::proto::_ArsObjectInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::radar_ars::proto::_ars_frame_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "radar_ars_od.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022radar_ars_od.proto\022\017radar_ars.proto\"[\n"
      "\tArsHeader\022\021\n\ttimestamp\030\001 \001(\004\022\027\n\017rolling"
      "_counter\030\002 \001(\r\022\021\n\tsensor_id\030\003 \001(\r\022\017\n\007obj"
      "_num\030\004 \001(\r\"\376\003\n\rArsObjectInfo\022\016\n\006obj_id\030\001"
      " \001(\r\022\022\n\nclass_type\030\002 \001(\r\022\022\n\nconfidence\030\003"
      " \001(\001\022\021\n\tlife_time\030\004 \001(\r\022\025\n\rmotion_status"
      "\030\005 \001(\r\022\016\n\006height\030\006 \001(\001\022\r\n\005width\030\007 \001(\001\022\016\n"
      "\006length\030\010 \001(\001\022\021\n\tdist_long\030\t \001(\001\022\020\n\010dist"
      "_lat\030\n \001(\001\022\021\n\tvrel_long\030\013 \001(\001\022\020\n\010vrel_la"
      "t\030\014 \001(\001\022\021\n\tarel_long\030\r \001(\001\022\020\n\010arel_lat\030\016"
      " \001(\001\022\021\n\tyaw_angle\030\017 \001(\001\022\031\n\021orientation_a"
      "ngle\030\020 \001(\001\022\022\n\nmeas_state\030\021 \001(\r\022\013\n\003rcs\030\022 "
      "\001(\001\022\025\n\rdist_long_rms\030\023 \001(\001\022\024\n\014dist_lat_r"
      "ms\030\024 \001(\001\022\025\n\rvrel_long_rms\030\025 \001(\001\022\024\n\014vrel_"
      "lat_rms\030\026 \001(\001\022\025\n\rarel_long_rms\030\027 \001(\001\022\024\n\014"
      "arel_lat_rms\030\030 \001(\001\022\027\n\017orientation_rms\030\031 "
      "\001(\001\"{\n\tars_frame\022*\n\006header\030\001 \001(\0132\032.radar"
      "_ars.proto.ArsHeader\022\021\n\ttimestamp\030\002 \001(\004\022"
      "/\n\007objects\030\003 \003(\0132\036.radar_ars.proto.ArsOb"
      "jectInfob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 776);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "radar_ars_od.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_radar_5fars_5fod_2eproto
namespace radar_ars {
namespace proto {

// ===================================================================

void ArsHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArsHeader::kTimestampFieldNumber;
const int ArsHeader::kRollingCounterFieldNumber;
const int ArsHeader::kSensorIdFieldNumber;
const int ArsHeader::kObjNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArsHeader::ArsHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_radar_5fars_5fod_2eproto::scc_info_ArsHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:radar_ars.proto.ArsHeader)
}
ArsHeader::ArsHeader(const ArsHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&obj_num_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(obj_num_));
  // @@protoc_insertion_point(copy_constructor:radar_ars.proto.ArsHeader)
}

void ArsHeader::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_num_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(obj_num_));
}

ArsHeader::~ArsHeader() {
  // @@protoc_insertion_point(destructor:radar_ars.proto.ArsHeader)
  SharedDtor();
}

void ArsHeader::SharedDtor() {
}

void ArsHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ArsHeader::descriptor() {
  ::protobuf_radar_5fars_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_radar_5fars_5fod_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArsHeader& ArsHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_radar_5fars_5fod_2eproto::scc_info_ArsHeader.base);
  return *internal_default_instance();
}


void ArsHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:radar_ars.proto.ArsHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_num_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(obj_num_));
  _internal_metadata_.Clear();
}

bool ArsHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:radar_ars.proto.ArsHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rolling_counter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolling_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 obj_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:radar_ars.proto.ArsHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:radar_ars.proto.ArsHeader)
  return false;
#undef DO_
}

void ArsHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:radar_ars.proto.ArsHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rolling_counter(), output);
  }

  // uint32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sensor_id(), output);
  }

  // uint32 obj_num = 4;
  if (this->obj_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->obj_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:radar_ars.proto.ArsHeader)
}

::google::protobuf::uint8* ArsHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:radar_ars.proto.ArsHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rolling_counter(), target);
  }

  // uint32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sensor_id(), target);
  }

  // uint32 obj_num = 4;
  if (this->obj_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->obj_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar_ars.proto.ArsHeader)
  return target;
}

size_t ArsHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radar_ars.proto.ArsHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rolling_counter());
  }

  // uint32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_id());
  }

  // uint32 obj_num = 4;
  if (this->obj_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->obj_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArsHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:radar_ars.proto.ArsHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ArsHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArsHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:radar_ars.proto.ArsHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:radar_ars.proto.ArsHeader)
    MergeFrom(*source);
  }
}

void ArsHeader::MergeFrom(const ArsHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:radar_ars.proto.ArsHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.rolling_counter() != 0) {
    set_rolling_counter(from.rolling_counter());
  }
  if (from.sensor_id() != 0) {
    set_sensor_id(from.sensor_id());
  }
  if (from.obj_num() != 0) {
    set_obj_num(from.obj_num());
  }
}

void ArsHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:radar_ars.proto.ArsHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArsHeader::CopyFrom(const ArsHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar_ars.proto.ArsHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArsHeader::IsInitialized() const {
  return true;
}

void ArsHeader::Swap(ArsHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArsHeader::InternalSwap(ArsHeader* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(rolling_counter_, other->rolling_counter_);
  swap(sensor_id_, other->sensor_id_);
  swap(obj_num_, other->obj_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ArsHeader::GetMetadata() const {
  protobuf_radar_5fars_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_radar_5fars_5fod_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ArsObjectInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArsObjectInfo::kObjIdFieldNumber;
const int ArsObjectInfo::kClassTypeFieldNumber;
const int ArsObjectInfo::kConfidenceFieldNumber;
const int ArsObjectInfo::kLifeTimeFieldNumber;
const int ArsObjectInfo::kMotionStatusFieldNumber;
const int ArsObjectInfo::kHeightFieldNumber;
const int ArsObjectInfo::kWidthFieldNumber;
const int ArsObjectInfo::kLengthFieldNumber;
const int ArsObjectInfo::kDistLongFieldNumber;
const int ArsObjectInfo::kDistLatFieldNumber;
const int ArsObjectInfo::kVrelLongFieldNumber;
const int ArsObjectInfo::kVrelLatFieldNumber;
const int ArsObjectInfo::kArelLongFieldNumber;
const int ArsObjectInfo::kArelLatFieldNumber;
const int ArsObjectInfo::kYawAngleFieldNumber;
const int ArsObjectInfo::kOrientationAngleFieldNumber;
const int ArsObjectInfo::kMeasStateFieldNumber;
const int ArsObjectInfo::kRcsFieldNumber;
const int ArsObjectInfo::kDistLongRmsFieldNumber;
const int ArsObjectInfo::kDistLatRmsFieldNumber;
const int ArsObjectInfo::kVrelLongRmsFieldNumber;
const int ArsObjectInfo::kVrelLatRmsFieldNumber;
const int ArsObjectInfo::kArelLongRmsFieldNumber;
const int ArsObjectInfo::kArelLatRmsFieldNumber;
const int ArsObjectInfo::kOrientationRmsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArsObjectInfo::ArsObjectInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_radar_5fars_5fod_2eproto::scc_info_ArsObjectInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:radar_ars.proto.ArsObjectInfo)
}
ArsObjectInfo::ArsObjectInfo(const ArsObjectInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&obj_id_, &from.obj_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&meas_state_) -
    reinterpret_cast<char*>(&obj_id_)) + sizeof(meas_state_));
  // @@protoc_insertion_point(copy_constructor:radar_ars.proto.ArsObjectInfo)
}

void ArsObjectInfo::SharedCtor() {
  ::memset(&obj_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meas_state_) -
      reinterpret_cast<char*>(&obj_id_)) + sizeof(meas_state_));
}

ArsObjectInfo::~ArsObjectInfo() {
  // @@protoc_insertion_point(destructor:radar_ars.proto.ArsObjectInfo)
  SharedDtor();
}

void ArsObjectInfo::SharedDtor() {
}

void ArsObjectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ArsObjectInfo::descriptor() {
  ::protobuf_radar_5fars_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_radar_5fars_5fod_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArsObjectInfo& ArsObjectInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_radar_5fars_5fod_2eproto::scc_info_ArsObjectInfo.base);
  return *internal_default_instance();
}


void ArsObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:radar_ars.proto.ArsObjectInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&obj_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meas_state_) -
      reinterpret_cast<char*>(&obj_id_)) + sizeof(meas_state_));
  _internal_metadata_.Clear();
}

bool ArsObjectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:radar_ars.proto.ArsObjectInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 obj_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 class_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double confidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 life_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &life_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 motion_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motion_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dist_long = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_long_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dist_lat = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vrel_long = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vrel_long_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vrel_lat = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vrel_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double arel_long = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arel_long_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double arel_lat = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arel_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw_angle = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double orientation_angle = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientation_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 meas_state = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meas_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rcs = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rcs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dist_long_rms = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_long_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dist_lat_rms = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_lat_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vrel_long_rms = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vrel_long_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vrel_lat_rms = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vrel_lat_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double arel_long_rms = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arel_long_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double arel_lat_rms = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arel_lat_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double orientation_rms = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientation_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:radar_ars.proto.ArsObjectInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:radar_ars.proto.ArsObjectInfo)
  return false;
#undef DO_
}

void ArsObjectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:radar_ars.proto.ArsObjectInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 obj_id = 1;
  if (this->obj_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->obj_id(), output);
  }

  // uint32 class_type = 2;
  if (this->class_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->class_type(), output);
  }

  // double confidence = 3;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->confidence(), output);
  }

  // uint32 life_time = 4;
  if (this->life_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->life_time(), output);
  }

  // uint32 motion_status = 5;
  if (this->motion_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->motion_status(), output);
  }

  // double height = 6;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->height(), output);
  }

  // double width = 7;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->width(), output);
  }

  // double length = 8;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->length(), output);
  }

  // double dist_long = 9;
  if (this->dist_long() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->dist_long(), output);
  }

  // double dist_lat = 10;
  if (this->dist_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->dist_lat(), output);
  }

  // double vrel_long = 11;
  if (this->vrel_long() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->vrel_long(), output);
  }

  // double vrel_lat = 12;
  if (this->vrel_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->vrel_lat(), output);
  }

  // double arel_long = 13;
  if (this->arel_long() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->arel_long(), output);
  }

  // double arel_lat = 14;
  if (this->arel_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->arel_lat(), output);
  }

  // double yaw_angle = 15;
  if (this->yaw_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->yaw_angle(), output);
  }

  // double orientation_angle = 16;
  if (this->orientation_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->orientation_angle(), output);
  }

  // uint32 meas_state = 17;
  if (this->meas_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->meas_state(), output);
  }

  // double rcs = 18;
  if (this->rcs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->rcs(), output);
  }

  // double dist_long_rms = 19;
  if (this->dist_long_rms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->dist_long_rms(), output);
  }

  // double dist_lat_rms = 20;
  if (this->dist_lat_rms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->dist_lat_rms(), output);
  }

  // double vrel_long_rms = 21;
  if (this->vrel_long_rms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->vrel_long_rms(), output);
  }

  // double vrel_lat_rms = 22;
  if (this->vrel_lat_rms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->vrel_lat_rms(), output);
  }

  // double arel_long_rms = 23;
  if (this->arel_long_rms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->arel_long_rms(), output);
  }

  // double arel_lat_rms = 24;
  if (this->arel_lat_rms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->arel_lat_rms(), output);
  }

  // double orientation_rms = 25;
  if (this->orientation_rms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->orientation_rms(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:radar_ars.proto.ArsObjectInfo)
}

::google::protobuf::uint8* ArsObjectInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:radar_ars.proto.ArsObjectInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 obj_id = 1;
  if (this->obj_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->obj_id(), target);
  }

  // uint32 class_type = 2;
  if (this->class_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->class_type(), target);
  }

  // double confidence = 3;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->confidence(), target);
  }

  // uint32 life_time = 4;
  if (this->life_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->life_time(), target);
  }

  // uint32 motion_status = 5;
  if (this->motion_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->motion_status(), target);
  }

  // double height = 6;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->height(), target);
  }

  // double width = 7;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->width(), target);
  }

  // double length = 8;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->length(), target);
  }

  // double dist_long = 9;
  if (this->dist_long() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->dist_long(), target);
  }

  // double dist_lat = 10;
  if (this->dist_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->dist_lat(), target);
  }

  // double vrel_long = 11;
  if (this->vrel_long() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->vrel_long(), target);
  }

  // double vrel_lat = 12;
  if (this->vrel_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->vrel_lat(), target);
  }

  // double arel_long = 13;
  if (this->arel_long() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->arel_long(), target);
  }

  // double arel_lat = 14;
  if (this->arel_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->arel_lat(), target);
  }

  // double yaw_angle = 15;
  if (this->yaw_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->yaw_angle(), target);
  }

  // double orientation_angle = 16;
  if (this->orientation_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->orientation_angle(), target);
  }

  // uint32 meas_state = 17;
  if (this->meas_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->meas_state(), target);
  }

  // double rcs = 18;
  if (this->rcs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->rcs(), target);
  }

  // double dist_long_rms = 19;
  if (this->dist_long_rms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->dist_long_rms(), target);
  }

  // double dist_lat_rms = 20;
  if (this->dist_lat_rms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->dist_lat_rms(), target);
  }

  // double vrel_long_rms = 21;
  if (this->vrel_long_rms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->vrel_long_rms(), target);
  }

  // double vrel_lat_rms = 22;
  if (this->vrel_lat_rms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->vrel_lat_rms(), target);
  }

  // double arel_long_rms = 23;
  if (this->arel_long_rms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->arel_long_rms(), target);
  }

  // double arel_lat_rms = 24;
  if (this->arel_lat_rms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->arel_lat_rms(), target);
  }

  // double orientation_rms = 25;
  if (this->orientation_rms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->orientation_rms(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar_ars.proto.ArsObjectInfo)
  return target;
}

size_t ArsObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radar_ars.proto.ArsObjectInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 obj_id = 1;
  if (this->obj_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->obj_id());
  }

  // uint32 class_type = 2;
  if (this->class_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->class_type());
  }

  // double confidence = 3;
  if (this->confidence() != 0) {
    total_size += 1 + 8;
  }

  // uint32 life_time = 4;
  if (this->life_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->life_time());
  }

  // uint32 motion_status = 5;
  if (this->motion_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->motion_status());
  }

  // double height = 6;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // double width = 7;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // double length = 8;
  if (this->length() != 0) {
    total_size += 1 + 8;
  }

  // double dist_long = 9;
  if (this->dist_long() != 0) {
    total_size += 1 + 8;
  }

  // double dist_lat = 10;
  if (this->dist_lat() != 0) {
    total_size += 1 + 8;
  }

  // double vrel_long = 11;
  if (this->vrel_long() != 0) {
    total_size += 1 + 8;
  }

  // double vrel_lat = 12;
  if (this->vrel_lat() != 0) {
    total_size += 1 + 8;
  }

  // double arel_long = 13;
  if (this->arel_long() != 0) {
    total_size += 1 + 8;
  }

  // double arel_lat = 14;
  if (this->arel_lat() != 0) {
    total_size += 1 + 8;
  }

  // double yaw_angle = 15;
  if (this->yaw_angle() != 0) {
    total_size += 1 + 8;
  }

  // double orientation_angle = 16;
  if (this->orientation_angle() != 0) {
    total_size += 2 + 8;
  }

  // double rcs = 18;
  if (this->rcs() != 0) {
    total_size += 2 + 8;
  }

  // double dist_long_rms = 19;
  if (this->dist_long_rms() != 0) {
    total_size += 2 + 8;
  }

  // double dist_lat_rms = 20;
  if (this->dist_lat_rms() != 0) {
    total_size += 2 + 8;
  }

  // double vrel_long_rms = 21;
  if (this->vrel_long_rms() != 0) {
    total_size += 2 + 8;
  }

  // double vrel_lat_rms = 22;
  if (this->vrel_lat_rms() != 0) {
    total_size += 2 + 8;
  }

  // double arel_long_rms = 23;
  if (this->arel_long_rms() != 0) {
    total_size += 2 + 8;
  }

  // double arel_lat_rms = 24;
  if (this->arel_lat_rms() != 0) {
    total_size += 2 + 8;
  }

  // double orientation_rms = 25;
  if (this->orientation_rms() != 0) {
    total_size += 2 + 8;
  }

  // uint32 meas_state = 17;
  if (this->meas_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->meas_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArsObjectInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:radar_ars.proto.ArsObjectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ArsObjectInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArsObjectInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:radar_ars.proto.ArsObjectInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:radar_ars.proto.ArsObjectInfo)
    MergeFrom(*source);
  }
}

void ArsObjectInfo::MergeFrom(const ArsObjectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:radar_ars.proto.ArsObjectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obj_id() != 0) {
    set_obj_id(from.obj_id());
  }
  if (from.class_type() != 0) {
    set_class_type(from.class_type());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.life_time() != 0) {
    set_life_time(from.life_time());
  }
  if (from.motion_status() != 0) {
    set_motion_status(from.motion_status());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.dist_long() != 0) {
    set_dist_long(from.dist_long());
  }
  if (from.dist_lat() != 0) {
    set_dist_lat(from.dist_lat());
  }
  if (from.vrel_long() != 0) {
    set_vrel_long(from.vrel_long());
  }
  if (from.vrel_lat() != 0) {
    set_vrel_lat(from.vrel_lat());
  }
  if (from.arel_long() != 0) {
    set_arel_long(from.arel_long());
  }
  if (from.arel_lat() != 0) {
    set_arel_lat(from.arel_lat());
  }
  if (from.yaw_angle() != 0) {
    set_yaw_angle(from.yaw_angle());
  }
  if (from.orientation_angle() != 0) {
    set_orientation_angle(from.orientation_angle());
  }
  if (from.rcs() != 0) {
    set_rcs(from.rcs());
  }
  if (from.dist_long_rms() != 0) {
    set_dist_long_rms(from.dist_long_rms());
  }
  if (from.dist_lat_rms() != 0) {
    set_dist_lat_rms(from.dist_lat_rms());
  }
  if (from.vrel_long_rms() != 0) {
    set_vrel_long_rms(from.vrel_long_rms());
  }
  if (from.vrel_lat_rms() != 0) {
    set_vrel_lat_rms(from.vrel_lat_rms());
  }
  if (from.arel_long_rms() != 0) {
    set_arel_long_rms(from.arel_long_rms());
  }
  if (from.arel_lat_rms() != 0) {
    set_arel_lat_rms(from.arel_lat_rms());
  }
  if (from.orientation_rms() != 0) {
    set_orientation_rms(from.orientation_rms());
  }
  if (from.meas_state() != 0) {
    set_meas_state(from.meas_state());
  }
}

void ArsObjectInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:radar_ars.proto.ArsObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArsObjectInfo::CopyFrom(const ArsObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar_ars.proto.ArsObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArsObjectInfo::IsInitialized() const {
  return true;
}

void ArsObjectInfo::Swap(ArsObjectInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArsObjectInfo::InternalSwap(ArsObjectInfo* other) {
  using std::swap;
  swap(obj_id_, other->obj_id_);
  swap(class_type_, other->class_type_);
  swap(confidence_, other->confidence_);
  swap(life_time_, other->life_time_);
  swap(motion_status_, other->motion_status_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(length_, other->length_);
  swap(dist_long_, other->dist_long_);
  swap(dist_lat_, other->dist_lat_);
  swap(vrel_long_, other->vrel_long_);
  swap(vrel_lat_, other->vrel_lat_);
  swap(arel_long_, other->arel_long_);
  swap(arel_lat_, other->arel_lat_);
  swap(yaw_angle_, other->yaw_angle_);
  swap(orientation_angle_, other->orientation_angle_);
  swap(rcs_, other->rcs_);
  swap(dist_long_rms_, other->dist_long_rms_);
  swap(dist_lat_rms_, other->dist_lat_rms_);
  swap(vrel_long_rms_, other->vrel_long_rms_);
  swap(vrel_lat_rms_, other->vrel_lat_rms_);
  swap(arel_long_rms_, other->arel_long_rms_);
  swap(arel_lat_rms_, other->arel_lat_rms_);
  swap(orientation_rms_, other->orientation_rms_);
  swap(meas_state_, other->meas_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ArsObjectInfo::GetMetadata() const {
  protobuf_radar_5fars_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_radar_5fars_5fod_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ars_frame::InitAsDefaultInstance() {
  ::radar_ars::proto::_ars_frame_default_instance_._instance.get_mutable()->header_ = const_cast< ::radar_ars::proto::ArsHeader*>(
      ::radar_ars::proto::ArsHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ars_frame::kHeaderFieldNumber;
const int ars_frame::kTimestampFieldNumber;
const int ars_frame::kObjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ars_frame::ars_frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_radar_5fars_5fod_2eproto::scc_info_ars_frame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:radar_ars.proto.ars_frame)
}
ars_frame::ars_frame(const ars_frame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::radar_ars::proto::ArsHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:radar_ars.proto.ars_frame)
}

void ars_frame::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(timestamp_));
}

ars_frame::~ars_frame() {
  // @@protoc_insertion_point(destructor:radar_ars.proto.ars_frame)
  SharedDtor();
}

void ars_frame::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ars_frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ars_frame::descriptor() {
  ::protobuf_radar_5fars_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_radar_5fars_5fod_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ars_frame& ars_frame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_radar_5fars_5fod_2eproto::scc_info_ars_frame.base);
  return *internal_default_instance();
}


void ars_frame::Clear() {
// @@protoc_insertion_point(message_clear_start:radar_ars.proto.ars_frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ars_frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:radar_ars.proto.ars_frame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .radar_ars.proto.ArsHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .radar_ars.proto.ArsObjectInfo objects = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:radar_ars.proto.ars_frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:radar_ars.proto.ars_frame)
  return false;
#undef DO_
}

void ars_frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:radar_ars.proto.ars_frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .radar_ars.proto.ArsHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // repeated .radar_ars.proto.ArsObjectInfo objects = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->objects(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:radar_ars.proto.ars_frame)
}

::google::protobuf::uint8* ars_frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:radar_ars.proto.ars_frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .radar_ars.proto.ArsHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // repeated .radar_ars.proto.ArsObjectInfo objects = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->objects(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:radar_ars.proto.ars_frame)
  return target;
}

size_t ars_frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:radar_ars.proto.ars_frame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .radar_ars.proto.ArsObjectInfo objects = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objects(static_cast<int>(i)));
    }
  }

  // .radar_ars.proto.ArsHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ars_frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:radar_ars.proto.ars_frame)
  GOOGLE_DCHECK_NE(&from, this);
  const ars_frame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ars_frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:radar_ars.proto.ars_frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:radar_ars.proto.ars_frame)
    MergeFrom(*source);
  }
}

void ars_frame::MergeFrom(const ars_frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:radar_ars.proto.ars_frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  if (from.has_header()) {
    mutable_header()->::radar_ars::proto::ArsHeader::MergeFrom(from.header());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void ars_frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:radar_ars.proto.ars_frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ars_frame::CopyFrom(const ars_frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:radar_ars.proto.ars_frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ars_frame::IsInitialized() const {
  return true;
}

void ars_frame::Swap(ars_frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ars_frame::InternalSwap(ars_frame* other) {
  using std::swap;
  CastToBase(&objects_)->InternalSwap(CastToBase(&other->objects_));
  swap(header_, other->header_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ars_frame::GetMetadata() const {
  protobuf_radar_5fars_5fod_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_radar_5fars_5fod_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace radar_ars
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::radar_ars::proto::ArsHeader* Arena::CreateMaybeMessage< ::radar_ars::proto::ArsHeader >(Arena* arena) {
  return Arena::CreateInternal< ::radar_ars::proto::ArsHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::radar_ars::proto::ArsObjectInfo* Arena::CreateMaybeMessage< ::radar_ars::proto::ArsObjectInfo >(Arena* arena) {
  return Arena::CreateInternal< ::radar_ars::proto::ArsObjectInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::radar_ars::proto::ars_frame* Arena::CreateMaybeMessage< ::radar_ars::proto::ars_frame >(Arena* arena) {
  return Arena::CreateInternal< ::radar_ars::proto::ars_frame >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
