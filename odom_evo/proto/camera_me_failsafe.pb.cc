// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_me_failsafe.proto

#include "camera_me_failsafe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_camera_5fme_5ffailsafe_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fme_5ffailsafe_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MeFailSafe;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_camera_5fme_5ffailsafe_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MeHeader;
}  // namespace protobuf_camera_5fme_5ffailsafe_2eproto
namespace camera_me_failsafe {
namespace proto {
class MeHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MeHeader>
      _instance;
} _MeHeader_default_instance_;
class MeFailSafeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MeFailSafe>
      _instance;
} _MeFailSafe_default_instance_;
class me_frame_fsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<me_frame_fs>
      _instance;
} _me_frame_fs_default_instance_;
}  // namespace proto
}  // namespace camera_me_failsafe
namespace protobuf_camera_5fme_5ffailsafe_2eproto {
static void InitDefaultsMeHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::camera_me_failsafe::proto::_MeHeader_default_instance_;
    new (ptr) ::camera_me_failsafe::proto::MeHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::camera_me_failsafe::proto::MeHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MeHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMeHeader}, {}};

static void InitDefaultsMeFailSafe() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::camera_me_failsafe::proto::_MeFailSafe_default_instance_;
    new (ptr) ::camera_me_failsafe::proto::MeFailSafe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::camera_me_failsafe::proto::MeFailSafe::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MeFailSafe =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMeFailSafe}, {}};

static void InitDefaultsme_frame_fs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::camera_me_failsafe::proto::_me_frame_fs_default_instance_;
    new (ptr) ::camera_me_failsafe::proto::me_frame_fs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::camera_me_failsafe::proto::me_frame_fs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_me_frame_fs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsme_frame_fs}, {
      &protobuf_camera_5fme_5ffailsafe_2eproto::scc_info_MeHeader.base,
      &protobuf_camera_5fme_5ffailsafe_2eproto::scc_info_MeFailSafe.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MeHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MeFailSafe.base);
  ::google::protobuf::internal::InitSCC(&scc_info_me_frame_fs.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeHeader, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeHeader, rolling_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeHeader, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeHeader, obj_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeHeader, line_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeHeader, hazard_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeFailSafe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeFailSafe, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeFailSafe, free_sight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeFailSafe, rain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeFailSafe, fog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeFailSafe, sun_ray_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeFailSafe, low_sun_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeFailSafe, blur_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeFailSafe, partial_blockage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeFailSafe, full_blockage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeFailSafe, frozen_windshield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeFailSafe, out_of_calib_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeFailSafe, out_of_focus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::MeFailSafe, tsr_out_of_calib_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::me_frame_fs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::me_frame_fs, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::me_frame_fs, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::camera_me_failsafe::proto::me_frame_fs, fail_safe_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::camera_me_failsafe::proto::MeHeader)},
  { 11, -1, sizeof(::camera_me_failsafe::proto::MeFailSafe)},
  { 29, -1, sizeof(::camera_me_failsafe::proto::me_frame_fs)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::camera_me_failsafe::proto::_MeHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::camera_me_failsafe::proto::_MeFailSafe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::camera_me_failsafe::proto::_me_frame_fs_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "camera_me_failsafe.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030camera_me_failsafe.proto\022\030camera_me_fa"
      "ilsafe.proto\"\200\001\n\010MeHeader\022\021\n\ttimestamp\030\001"
      " \001(\004\022\027\n\017rolling_counter\030\002 \001(\r\022\021\n\tsensor_"
      "id\030\003 \001(\r\022\017\n\007obj_num\030\004 \001(\r\022\020\n\010line_num\030\005 "
      "\001(\r\022\022\n\nhazard_num\030\006 \001(\r\"\225\002\n\nMeFailSafe\022\020"
      "\n\010frame_id\030\001 \001(\r\022\022\n\nfree_sight\030\002 \001(\r\022\014\n\004"
      "rain\030\003 \001(\r\022\013\n\003fog\030\004 \001(\r\022\017\n\007sun_ray\030\005 \001(\r"
      "\022\017\n\007low_sun\030\006 \001(\r\022\022\n\nblur_image\030\007 \001(\r\022\030\n"
      "\020partial_blockage\030\010 \001(\r\022\025\n\rfull_blockage"
      "\030\t \001(\r\022\031\n\021frozen_windshield\030\n \001(\r\022\024\n\014out"
      "_of_calib\030\013 \001(\r\022\024\n\014out_of_focus\030\014 \001(\r\022\030\n"
      "\020tsr_out_of_calib\030\r \001(\r\"\215\001\n\013me_frame_fs\022"
      "2\n\006header\030\001 \001(\0132\".camera_me_failsafe.pro"
      "to.MeHeader\022\021\n\ttimestamp\030\002 \001(\004\0227\n\tfail_s"
      "afe\030\003 \001(\0132$.camera_me_failsafe.proto.MeF"
      "ailSafeb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 615);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "camera_me_failsafe.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_camera_5fme_5ffailsafe_2eproto
namespace camera_me_failsafe {
namespace proto {

// ===================================================================

void MeHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeHeader::kTimestampFieldNumber;
const int MeHeader::kRollingCounterFieldNumber;
const int MeHeader::kSensorIdFieldNumber;
const int MeHeader::kObjNumFieldNumber;
const int MeHeader::kLineNumFieldNumber;
const int MeHeader::kHazardNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeHeader::MeHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fme_5ffailsafe_2eproto::scc_info_MeHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:camera_me_failsafe.proto.MeHeader)
}
MeHeader::MeHeader(const MeHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&hazard_num_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(hazard_num_));
  // @@protoc_insertion_point(copy_constructor:camera_me_failsafe.proto.MeHeader)
}

void MeHeader::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hazard_num_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(hazard_num_));
}

MeHeader::~MeHeader() {
  // @@protoc_insertion_point(destructor:camera_me_failsafe.proto.MeHeader)
  SharedDtor();
}

void MeHeader::SharedDtor() {
}

void MeHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MeHeader::descriptor() {
  ::protobuf_camera_5fme_5ffailsafe_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fme_5ffailsafe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MeHeader& MeHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fme_5ffailsafe_2eproto::scc_info_MeHeader.base);
  return *internal_default_instance();
}


void MeHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:camera_me_failsafe.proto.MeHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hazard_num_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(hazard_num_));
  _internal_metadata_.Clear();
}

bool MeHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camera_me_failsafe.proto.MeHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rolling_counter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolling_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 obj_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 line_num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hazard_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hazard_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camera_me_failsafe.proto.MeHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camera_me_failsafe.proto.MeHeader)
  return false;
#undef DO_
}

void MeHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camera_me_failsafe.proto.MeHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rolling_counter(), output);
  }

  // uint32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sensor_id(), output);
  }

  // uint32 obj_num = 4;
  if (this->obj_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->obj_num(), output);
  }

  // uint32 line_num = 5;
  if (this->line_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->line_num(), output);
  }

  // uint32 hazard_num = 6;
  if (this->hazard_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hazard_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:camera_me_failsafe.proto.MeHeader)
}

::google::protobuf::uint8* MeHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:camera_me_failsafe.proto.MeHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rolling_counter(), target);
  }

  // uint32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sensor_id(), target);
  }

  // uint32 obj_num = 4;
  if (this->obj_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->obj_num(), target);
  }

  // uint32 line_num = 5;
  if (this->line_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->line_num(), target);
  }

  // uint32 hazard_num = 6;
  if (this->hazard_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hazard_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camera_me_failsafe.proto.MeHeader)
  return target;
}

size_t MeHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camera_me_failsafe.proto.MeHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint32 rolling_counter = 2;
  if (this->rolling_counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rolling_counter());
  }

  // uint32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_id());
  }

  // uint32 obj_num = 4;
  if (this->obj_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->obj_num());
  }

  // uint32 line_num = 5;
  if (this->line_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->line_num());
  }

  // uint32 hazard_num = 6;
  if (this->hazard_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hazard_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camera_me_failsafe.proto.MeHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MeHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camera_me_failsafe.proto.MeHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camera_me_failsafe.proto.MeHeader)
    MergeFrom(*source);
  }
}

void MeHeader::MergeFrom(const MeHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camera_me_failsafe.proto.MeHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.rolling_counter() != 0) {
    set_rolling_counter(from.rolling_counter());
  }
  if (from.sensor_id() != 0) {
    set_sensor_id(from.sensor_id());
  }
  if (from.obj_num() != 0) {
    set_obj_num(from.obj_num());
  }
  if (from.line_num() != 0) {
    set_line_num(from.line_num());
  }
  if (from.hazard_num() != 0) {
    set_hazard_num(from.hazard_num());
  }
}

void MeHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camera_me_failsafe.proto.MeHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeHeader::CopyFrom(const MeHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camera_me_failsafe.proto.MeHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeHeader::IsInitialized() const {
  return true;
}

void MeHeader::Swap(MeHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeHeader::InternalSwap(MeHeader* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(rolling_counter_, other->rolling_counter_);
  swap(sensor_id_, other->sensor_id_);
  swap(obj_num_, other->obj_num_);
  swap(line_num_, other->line_num_);
  swap(hazard_num_, other->hazard_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MeHeader::GetMetadata() const {
  protobuf_camera_5fme_5ffailsafe_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fme_5ffailsafe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MeFailSafe::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeFailSafe::kFrameIdFieldNumber;
const int MeFailSafe::kFreeSightFieldNumber;
const int MeFailSafe::kRainFieldNumber;
const int MeFailSafe::kFogFieldNumber;
const int MeFailSafe::kSunRayFieldNumber;
const int MeFailSafe::kLowSunFieldNumber;
const int MeFailSafe::kBlurImageFieldNumber;
const int MeFailSafe::kPartialBlockageFieldNumber;
const int MeFailSafe::kFullBlockageFieldNumber;
const int MeFailSafe::kFrozenWindshieldFieldNumber;
const int MeFailSafe::kOutOfCalibFieldNumber;
const int MeFailSafe::kOutOfFocusFieldNumber;
const int MeFailSafe::kTsrOutOfCalibFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeFailSafe::MeFailSafe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fme_5ffailsafe_2eproto::scc_info_MeFailSafe.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:camera_me_failsafe.proto.MeFailSafe)
}
MeFailSafe::MeFailSafe(const MeFailSafe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tsr_out_of_calib_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(tsr_out_of_calib_));
  // @@protoc_insertion_point(copy_constructor:camera_me_failsafe.proto.MeFailSafe)
}

void MeFailSafe::SharedCtor() {
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tsr_out_of_calib_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(tsr_out_of_calib_));
}

MeFailSafe::~MeFailSafe() {
  // @@protoc_insertion_point(destructor:camera_me_failsafe.proto.MeFailSafe)
  SharedDtor();
}

void MeFailSafe::SharedDtor() {
}

void MeFailSafe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MeFailSafe::descriptor() {
  ::protobuf_camera_5fme_5ffailsafe_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fme_5ffailsafe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MeFailSafe& MeFailSafe::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fme_5ffailsafe_2eproto::scc_info_MeFailSafe.base);
  return *internal_default_instance();
}


void MeFailSafe::Clear() {
// @@protoc_insertion_point(message_clear_start:camera_me_failsafe.proto.MeFailSafe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tsr_out_of_calib_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(tsr_out_of_calib_));
  _internal_metadata_.Clear();
}

bool MeFailSafe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camera_me_failsafe.proto.MeFailSafe)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 frame_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 free_sight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_sight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fog = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fog_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sun_ray = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sun_ray_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 low_sun = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_sun_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 blur_image = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blur_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 partial_blockage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partial_blockage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 full_blockage = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &full_blockage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 frozen_windshield = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frozen_windshield_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 out_of_calib = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_of_calib_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 out_of_focus = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_of_focus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tsr_out_of_calib = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tsr_out_of_calib_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camera_me_failsafe.proto.MeFailSafe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camera_me_failsafe.proto.MeFailSafe)
  return false;
#undef DO_
}

void MeFailSafe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camera_me_failsafe.proto.MeFailSafe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame_id = 1;
  if (this->frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frame_id(), output);
  }

  // uint32 free_sight = 2;
  if (this->free_sight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->free_sight(), output);
  }

  // uint32 rain = 3;
  if (this->rain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rain(), output);
  }

  // uint32 fog = 4;
  if (this->fog() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fog(), output);
  }

  // uint32 sun_ray = 5;
  if (this->sun_ray() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sun_ray(), output);
  }

  // uint32 low_sun = 6;
  if (this->low_sun() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->low_sun(), output);
  }

  // uint32 blur_image = 7;
  if (this->blur_image() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->blur_image(), output);
  }

  // uint32 partial_blockage = 8;
  if (this->partial_blockage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->partial_blockage(), output);
  }

  // uint32 full_blockage = 9;
  if (this->full_blockage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->full_blockage(), output);
  }

  // uint32 frozen_windshield = 10;
  if (this->frozen_windshield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->frozen_windshield(), output);
  }

  // uint32 out_of_calib = 11;
  if (this->out_of_calib() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->out_of_calib(), output);
  }

  // uint32 out_of_focus = 12;
  if (this->out_of_focus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->out_of_focus(), output);
  }

  // uint32 tsr_out_of_calib = 13;
  if (this->tsr_out_of_calib() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->tsr_out_of_calib(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:camera_me_failsafe.proto.MeFailSafe)
}

::google::protobuf::uint8* MeFailSafe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:camera_me_failsafe.proto.MeFailSafe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame_id = 1;
  if (this->frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frame_id(), target);
  }

  // uint32 free_sight = 2;
  if (this->free_sight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->free_sight(), target);
  }

  // uint32 rain = 3;
  if (this->rain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rain(), target);
  }

  // uint32 fog = 4;
  if (this->fog() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fog(), target);
  }

  // uint32 sun_ray = 5;
  if (this->sun_ray() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sun_ray(), target);
  }

  // uint32 low_sun = 6;
  if (this->low_sun() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->low_sun(), target);
  }

  // uint32 blur_image = 7;
  if (this->blur_image() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->blur_image(), target);
  }

  // uint32 partial_blockage = 8;
  if (this->partial_blockage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->partial_blockage(), target);
  }

  // uint32 full_blockage = 9;
  if (this->full_blockage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->full_blockage(), target);
  }

  // uint32 frozen_windshield = 10;
  if (this->frozen_windshield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->frozen_windshield(), target);
  }

  // uint32 out_of_calib = 11;
  if (this->out_of_calib() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->out_of_calib(), target);
  }

  // uint32 out_of_focus = 12;
  if (this->out_of_focus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->out_of_focus(), target);
  }

  // uint32 tsr_out_of_calib = 13;
  if (this->tsr_out_of_calib() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->tsr_out_of_calib(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camera_me_failsafe.proto.MeFailSafe)
  return target;
}

size_t MeFailSafe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camera_me_failsafe.proto.MeFailSafe)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 frame_id = 1;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame_id());
  }

  // uint32 free_sight = 2;
  if (this->free_sight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->free_sight());
  }

  // uint32 rain = 3;
  if (this->rain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rain());
  }

  // uint32 fog = 4;
  if (this->fog() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fog());
  }

  // uint32 sun_ray = 5;
  if (this->sun_ray() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sun_ray());
  }

  // uint32 low_sun = 6;
  if (this->low_sun() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low_sun());
  }

  // uint32 blur_image = 7;
  if (this->blur_image() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blur_image());
  }

  // uint32 partial_blockage = 8;
  if (this->partial_blockage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->partial_blockage());
  }

  // uint32 full_blockage = 9;
  if (this->full_blockage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->full_blockage());
  }

  // uint32 frozen_windshield = 10;
  if (this->frozen_windshield() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frozen_windshield());
  }

  // uint32 out_of_calib = 11;
  if (this->out_of_calib() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->out_of_calib());
  }

  // uint32 out_of_focus = 12;
  if (this->out_of_focus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->out_of_focus());
  }

  // uint32 tsr_out_of_calib = 13;
  if (this->tsr_out_of_calib() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tsr_out_of_calib());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeFailSafe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camera_me_failsafe.proto.MeFailSafe)
  GOOGLE_DCHECK_NE(&from, this);
  const MeFailSafe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeFailSafe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camera_me_failsafe.proto.MeFailSafe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camera_me_failsafe.proto.MeFailSafe)
    MergeFrom(*source);
  }
}

void MeFailSafe::MergeFrom(const MeFailSafe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camera_me_failsafe.proto.MeFailSafe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_id() != 0) {
    set_frame_id(from.frame_id());
  }
  if (from.free_sight() != 0) {
    set_free_sight(from.free_sight());
  }
  if (from.rain() != 0) {
    set_rain(from.rain());
  }
  if (from.fog() != 0) {
    set_fog(from.fog());
  }
  if (from.sun_ray() != 0) {
    set_sun_ray(from.sun_ray());
  }
  if (from.low_sun() != 0) {
    set_low_sun(from.low_sun());
  }
  if (from.blur_image() != 0) {
    set_blur_image(from.blur_image());
  }
  if (from.partial_blockage() != 0) {
    set_partial_blockage(from.partial_blockage());
  }
  if (from.full_blockage() != 0) {
    set_full_blockage(from.full_blockage());
  }
  if (from.frozen_windshield() != 0) {
    set_frozen_windshield(from.frozen_windshield());
  }
  if (from.out_of_calib() != 0) {
    set_out_of_calib(from.out_of_calib());
  }
  if (from.out_of_focus() != 0) {
    set_out_of_focus(from.out_of_focus());
  }
  if (from.tsr_out_of_calib() != 0) {
    set_tsr_out_of_calib(from.tsr_out_of_calib());
  }
}

void MeFailSafe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camera_me_failsafe.proto.MeFailSafe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeFailSafe::CopyFrom(const MeFailSafe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camera_me_failsafe.proto.MeFailSafe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeFailSafe::IsInitialized() const {
  return true;
}

void MeFailSafe::Swap(MeFailSafe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeFailSafe::InternalSwap(MeFailSafe* other) {
  using std::swap;
  swap(frame_id_, other->frame_id_);
  swap(free_sight_, other->free_sight_);
  swap(rain_, other->rain_);
  swap(fog_, other->fog_);
  swap(sun_ray_, other->sun_ray_);
  swap(low_sun_, other->low_sun_);
  swap(blur_image_, other->blur_image_);
  swap(partial_blockage_, other->partial_blockage_);
  swap(full_blockage_, other->full_blockage_);
  swap(frozen_windshield_, other->frozen_windshield_);
  swap(out_of_calib_, other->out_of_calib_);
  swap(out_of_focus_, other->out_of_focus_);
  swap(tsr_out_of_calib_, other->tsr_out_of_calib_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MeFailSafe::GetMetadata() const {
  protobuf_camera_5fme_5ffailsafe_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fme_5ffailsafe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void me_frame_fs::InitAsDefaultInstance() {
  ::camera_me_failsafe::proto::_me_frame_fs_default_instance_._instance.get_mutable()->header_ = const_cast< ::camera_me_failsafe::proto::MeHeader*>(
      ::camera_me_failsafe::proto::MeHeader::internal_default_instance());
  ::camera_me_failsafe::proto::_me_frame_fs_default_instance_._instance.get_mutable()->fail_safe_ = const_cast< ::camera_me_failsafe::proto::MeFailSafe*>(
      ::camera_me_failsafe::proto::MeFailSafe::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int me_frame_fs::kHeaderFieldNumber;
const int me_frame_fs::kTimestampFieldNumber;
const int me_frame_fs::kFailSafeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

me_frame_fs::me_frame_fs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_camera_5fme_5ffailsafe_2eproto::scc_info_me_frame_fs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:camera_me_failsafe.proto.me_frame_fs)
}
me_frame_fs::me_frame_fs(const me_frame_fs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::camera_me_failsafe::proto::MeHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_fail_safe()) {
    fail_safe_ = new ::camera_me_failsafe::proto::MeFailSafe(*from.fail_safe_);
  } else {
    fail_safe_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:camera_me_failsafe.proto.me_frame_fs)
}

void me_frame_fs::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(timestamp_));
}

me_frame_fs::~me_frame_fs() {
  // @@protoc_insertion_point(destructor:camera_me_failsafe.proto.me_frame_fs)
  SharedDtor();
}

void me_frame_fs::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete fail_safe_;
}

void me_frame_fs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* me_frame_fs::descriptor() {
  ::protobuf_camera_5fme_5ffailsafe_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fme_5ffailsafe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const me_frame_fs& me_frame_fs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_camera_5fme_5ffailsafe_2eproto::scc_info_me_frame_fs.base);
  return *internal_default_instance();
}


void me_frame_fs::Clear() {
// @@protoc_insertion_point(message_clear_start:camera_me_failsafe.proto.me_frame_fs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && fail_safe_ != NULL) {
    delete fail_safe_;
  }
  fail_safe_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool me_frame_fs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camera_me_failsafe.proto.me_frame_fs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .camera_me_failsafe.proto.MeHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .camera_me_failsafe.proto.MeFailSafe fail_safe = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fail_safe()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camera_me_failsafe.proto.me_frame_fs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camera_me_failsafe.proto.me_frame_fs)
  return false;
#undef DO_
}

void me_frame_fs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camera_me_failsafe.proto.me_frame_fs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .camera_me_failsafe.proto.MeHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // .camera_me_failsafe.proto.MeFailSafe fail_safe = 3;
  if (this->has_fail_safe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_fail_safe(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:camera_me_failsafe.proto.me_frame_fs)
}

::google::protobuf::uint8* me_frame_fs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:camera_me_failsafe.proto.me_frame_fs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .camera_me_failsafe.proto.MeHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // .camera_me_failsafe.proto.MeFailSafe fail_safe = 3;
  if (this->has_fail_safe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_fail_safe(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camera_me_failsafe.proto.me_frame_fs)
  return target;
}

size_t me_frame_fs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camera_me_failsafe.proto.me_frame_fs)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .camera_me_failsafe.proto.MeHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .camera_me_failsafe.proto.MeFailSafe fail_safe = 3;
  if (this->has_fail_safe()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fail_safe_);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void me_frame_fs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camera_me_failsafe.proto.me_frame_fs)
  GOOGLE_DCHECK_NE(&from, this);
  const me_frame_fs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const me_frame_fs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camera_me_failsafe.proto.me_frame_fs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camera_me_failsafe.proto.me_frame_fs)
    MergeFrom(*source);
  }
}

void me_frame_fs::MergeFrom(const me_frame_fs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camera_me_failsafe.proto.me_frame_fs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::camera_me_failsafe::proto::MeHeader::MergeFrom(from.header());
  }
  if (from.has_fail_safe()) {
    mutable_fail_safe()->::camera_me_failsafe::proto::MeFailSafe::MergeFrom(from.fail_safe());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void me_frame_fs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camera_me_failsafe.proto.me_frame_fs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void me_frame_fs::CopyFrom(const me_frame_fs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camera_me_failsafe.proto.me_frame_fs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool me_frame_fs::IsInitialized() const {
  return true;
}

void me_frame_fs::Swap(me_frame_fs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void me_frame_fs::InternalSwap(me_frame_fs* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(fail_safe_, other->fail_safe_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata me_frame_fs::GetMetadata() const {
  protobuf_camera_5fme_5ffailsafe_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_camera_5fme_5ffailsafe_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace camera_me_failsafe
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::camera_me_failsafe::proto::MeHeader* Arena::CreateMaybeMessage< ::camera_me_failsafe::proto::MeHeader >(Arena* arena) {
  return Arena::CreateInternal< ::camera_me_failsafe::proto::MeHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::camera_me_failsafe::proto::MeFailSafe* Arena::CreateMaybeMessage< ::camera_me_failsafe::proto::MeFailSafe >(Arena* arena) {
  return Arena::CreateInternal< ::camera_me_failsafe::proto::MeFailSafe >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::camera_me_failsafe::proto::me_frame_fs* Arena::CreateMaybeMessage< ::camera_me_failsafe::proto::me_frame_fs >(Arena* arena) {
  return Arena::CreateInternal< ::camera_me_failsafe::proto::me_frame_fs >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
