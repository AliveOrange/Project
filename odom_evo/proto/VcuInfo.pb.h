// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VcuInfo.proto

#ifndef PROTOBUF_INCLUDED_VcuInfo_2eproto
#define PROTOBUF_INCLUDED_VcuInfo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_VcuInfo_2eproto 

namespace protobuf_VcuInfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_VcuInfo_2eproto
namespace Calmcar {
namespace drivers {
namespace VCUINFO {
class Accel_report_6b;
class Accel_report_6bDefaultTypeInternal;
extern Accel_report_6bDefaultTypeInternal _Accel_report_6b_default_instance_;
class Gear_report_67;
class Gear_report_67DefaultTypeInternal;
extern Gear_report_67DefaultTypeInternal _Gear_report_67_default_instance_;
class Gyro_report_6c;
class Gyro_report_6cDefaultTypeInternal;
extern Gyro_report_6cDefaultTypeInternal _Gyro_report_6c_default_instance_;
class Steering_report_65;
class Steering_report_65DefaultTypeInternal;
extern Steering_report_65DefaultTypeInternal _Steering_report_65_default_instance_;
class VcuInfo;
class VcuInfoDefaultTypeInternal;
extern VcuInfoDefaultTypeInternal _VcuInfo_default_instance_;
class Wheelspeed_report_6a;
class Wheelspeed_report_6aDefaultTypeInternal;
extern Wheelspeed_report_6aDefaultTypeInternal _Wheelspeed_report_6a_default_instance_;
}  // namespace VCUINFO
}  // namespace drivers
}  // namespace Calmcar
namespace google {
namespace protobuf {
template<> ::Calmcar::drivers::VCUINFO::Accel_report_6b* Arena::CreateMaybeMessage<::Calmcar::drivers::VCUINFO::Accel_report_6b>(Arena*);
template<> ::Calmcar::drivers::VCUINFO::Gear_report_67* Arena::CreateMaybeMessage<::Calmcar::drivers::VCUINFO::Gear_report_67>(Arena*);
template<> ::Calmcar::drivers::VCUINFO::Gyro_report_6c* Arena::CreateMaybeMessage<::Calmcar::drivers::VCUINFO::Gyro_report_6c>(Arena*);
template<> ::Calmcar::drivers::VCUINFO::Steering_report_65* Arena::CreateMaybeMessage<::Calmcar::drivers::VCUINFO::Steering_report_65>(Arena*);
template<> ::Calmcar::drivers::VCUINFO::VcuInfo* Arena::CreateMaybeMessage<::Calmcar::drivers::VCUINFO::VcuInfo>(Arena*);
template<> ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a* Arena::CreateMaybeMessage<::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Calmcar {
namespace drivers {
namespace VCUINFO {

enum Steering_report_65_FltwdcType {
  Steering_report_65_FltwdcType_FLTWDC_NO_FAULT = 0,
  Steering_report_65_FltwdcType_FLTWDC_FAULT = 1,
  Steering_report_65_FltwdcType_Steering_report_65_FltwdcType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Steering_report_65_FltwdcType_Steering_report_65_FltwdcType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Steering_report_65_FltwdcType_IsValid(int value);
const Steering_report_65_FltwdcType Steering_report_65_FltwdcType_FltwdcType_MIN = Steering_report_65_FltwdcType_FLTWDC_NO_FAULT;
const Steering_report_65_FltwdcType Steering_report_65_FltwdcType_FltwdcType_MAX = Steering_report_65_FltwdcType_FLTWDC_FAULT;
const int Steering_report_65_FltwdcType_FltwdcType_ARRAYSIZE = Steering_report_65_FltwdcType_FltwdcType_MAX + 1;

enum Steering_report_65_FltcalType {
  Steering_report_65_FltcalType_FLTCAL_NO_FAULT = 0,
  Steering_report_65_FltcalType_FLTCAL_FAULT = 1,
  Steering_report_65_FltcalType_Steering_report_65_FltcalType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Steering_report_65_FltcalType_Steering_report_65_FltcalType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Steering_report_65_FltcalType_IsValid(int value);
const Steering_report_65_FltcalType Steering_report_65_FltcalType_FltcalType_MIN = Steering_report_65_FltcalType_FLTCAL_NO_FAULT;
const Steering_report_65_FltcalType Steering_report_65_FltcalType_FltcalType_MAX = Steering_report_65_FltcalType_FLTCAL_FAULT;
const int Steering_report_65_FltcalType_FltcalType_ARRAYSIZE = Steering_report_65_FltcalType_FltcalType_MAX + 1;

enum Steering_report_65_TmoutType {
  Steering_report_65_TmoutType_TMOUT_VALID = 0,
  Steering_report_65_TmoutType_TMOUT_TIMEOUT = 1,
  Steering_report_65_TmoutType_Steering_report_65_TmoutType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Steering_report_65_TmoutType_Steering_report_65_TmoutType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Steering_report_65_TmoutType_IsValid(int value);
const Steering_report_65_TmoutType Steering_report_65_TmoutType_TmoutType_MIN = Steering_report_65_TmoutType_TMOUT_VALID;
const Steering_report_65_TmoutType Steering_report_65_TmoutType_TmoutType_MAX = Steering_report_65_TmoutType_TMOUT_TIMEOUT;
const int Steering_report_65_TmoutType_TmoutType_ARRAYSIZE = Steering_report_65_TmoutType_TmoutType_MAX + 1;

enum Steering_report_65_Flt2Type {
  Steering_report_65_Flt2Type_FLT2_NO_FAULT = 0,
  Steering_report_65_Flt2Type_FLT2_FAULT = 1,
  Steering_report_65_Flt2Type_Steering_report_65_Flt2Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Steering_report_65_Flt2Type_Steering_report_65_Flt2Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Steering_report_65_Flt2Type_IsValid(int value);
const Steering_report_65_Flt2Type Steering_report_65_Flt2Type_Flt2Type_MIN = Steering_report_65_Flt2Type_FLT2_NO_FAULT;
const Steering_report_65_Flt2Type Steering_report_65_Flt2Type_Flt2Type_MAX = Steering_report_65_Flt2Type_FLT2_FAULT;
const int Steering_report_65_Flt2Type_Flt2Type_ARRAYSIZE = Steering_report_65_Flt2Type_Flt2Type_MAX + 1;

enum Steering_report_65_Flt1Type {
  Steering_report_65_Flt1Type_FLT1_NO_FAULT = 0,
  Steering_report_65_Flt1Type_FLT1_FAULT = 1,
  Steering_report_65_Flt1Type_Steering_report_65_Flt1Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Steering_report_65_Flt1Type_Steering_report_65_Flt1Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Steering_report_65_Flt1Type_IsValid(int value);
const Steering_report_65_Flt1Type Steering_report_65_Flt1Type_Flt1Type_MIN = Steering_report_65_Flt1Type_FLT1_NO_FAULT;
const Steering_report_65_Flt1Type Steering_report_65_Flt1Type_Flt1Type_MAX = Steering_report_65_Flt1Type_FLT1_FAULT;
const int Steering_report_65_Flt1Type_Flt1Type_ARRAYSIZE = Steering_report_65_Flt1Type_Flt1Type_MAX + 1;

enum Steering_report_65_EnType {
  Steering_report_65_EnType_EN_DISABLED = 0,
  Steering_report_65_EnType_EN_ENABLED = 1,
  Steering_report_65_EnType_Steering_report_65_EnType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Steering_report_65_EnType_Steering_report_65_EnType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Steering_report_65_EnType_IsValid(int value);
const Steering_report_65_EnType Steering_report_65_EnType_EnType_MIN = Steering_report_65_EnType_EN_DISABLED;
const Steering_report_65_EnType Steering_report_65_EnType_EnType_MAX = Steering_report_65_EnType_EN_ENABLED;
const int Steering_report_65_EnType_EnType_ARRAYSIZE = Steering_report_65_EnType_EnType_MAX + 1;

enum Steering_report_65_OverrideType {
  Steering_report_65_OverrideType_OVERRIDE_NO_OVERRIDE = 0,
  Steering_report_65_OverrideType_OVERRIDE_DRIVER_OVERRIDE = 1,
  Steering_report_65_OverrideType_Steering_report_65_OverrideType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Steering_report_65_OverrideType_Steering_report_65_OverrideType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Steering_report_65_OverrideType_IsValid(int value);
const Steering_report_65_OverrideType Steering_report_65_OverrideType_OverrideType_MIN = Steering_report_65_OverrideType_OVERRIDE_NO_OVERRIDE;
const Steering_report_65_OverrideType Steering_report_65_OverrideType_OverrideType_MAX = Steering_report_65_OverrideType_OVERRIDE_DRIVER_OVERRIDE;
const int Steering_report_65_OverrideType_OverrideType_ARRAYSIZE = Steering_report_65_OverrideType_OverrideType_MAX + 1;

enum Gear_report_67_RejectType {
  Gear_report_67_RejectType_REJECT_NOT_REJECTED = 0,
  Gear_report_67_RejectType_REJECT_OVERRIDE = 1,
  Gear_report_67_RejectType_REJECT_SHIFT_IN_PROGRESS = 2,
  Gear_report_67_RejectType_REJECT_REPEAT = 3,
  Gear_report_67_RejectType_REJECT_CMD_ILLEGAL = 4,
  Gear_report_67_RejectType_REJECT_SPEED_NOT_2KPH = 5,
  Gear_report_67_RejectType_REJECT_REJECTED_BY_VEHICLE_TIMEOUT = 6,
  Gear_report_67_RejectType_Gear_report_67_RejectType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Gear_report_67_RejectType_Gear_report_67_RejectType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Gear_report_67_RejectType_IsValid(int value);
const Gear_report_67_RejectType Gear_report_67_RejectType_RejectType_MIN = Gear_report_67_RejectType_REJECT_NOT_REJECTED;
const Gear_report_67_RejectType Gear_report_67_RejectType_RejectType_MAX = Gear_report_67_RejectType_REJECT_REJECTED_BY_VEHICLE_TIMEOUT;
const int Gear_report_67_RejectType_RejectType_ARRAYSIZE = Gear_report_67_RejectType_RejectType_MAX + 1;

enum Gear_report_67_StateType {
  Gear_report_67_StateType_STATE_NONE = 0,
  Gear_report_67_StateType_STATE_PARK = 1,
  Gear_report_67_StateType_STATE_REVERSE = 2,
  Gear_report_67_StateType_STATE_NEUTRAL = 3,
  Gear_report_67_StateType_STATE_DRIVE = 4,
  Gear_report_67_StateType_STATE_LOW = 5,
  Gear_report_67_StateType_Gear_report_67_StateType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Gear_report_67_StateType_Gear_report_67_StateType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Gear_report_67_StateType_IsValid(int value);
const Gear_report_67_StateType Gear_report_67_StateType_StateType_MIN = Gear_report_67_StateType_STATE_NONE;
const Gear_report_67_StateType Gear_report_67_StateType_StateType_MAX = Gear_report_67_StateType_STATE_LOW;
const int Gear_report_67_StateType_StateType_ARRAYSIZE = Gear_report_67_StateType_StateType_MAX + 1;

enum Gear_report_67_FltbusType {
  Gear_report_67_FltbusType_FLTBUS_NO_FAULT = 0,
  Gear_report_67_FltbusType_FLTBUS_FAULT = 1,
  Gear_report_67_FltbusType_Gear_report_67_FltbusType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Gear_report_67_FltbusType_Gear_report_67_FltbusType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Gear_report_67_FltbusType_IsValid(int value);
const Gear_report_67_FltbusType Gear_report_67_FltbusType_FltbusType_MIN = Gear_report_67_FltbusType_FLTBUS_NO_FAULT;
const Gear_report_67_FltbusType Gear_report_67_FltbusType_FltbusType_MAX = Gear_report_67_FltbusType_FLTBUS_FAULT;
const int Gear_report_67_FltbusType_FltbusType_ARRAYSIZE = Gear_report_67_FltbusType_FltbusType_MAX + 1;

enum Gear_report_67_DriverType {
  Gear_report_67_DriverType_DRIVER_LAST_SHIFT_REQUESTED_BY_WIRE = 0,
  Gear_report_67_DriverType_DRIVER_LAST_SHIFT_REQUESTED_BY_DRIVER = 1,
  Gear_report_67_DriverType_Gear_report_67_DriverType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Gear_report_67_DriverType_Gear_report_67_DriverType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Gear_report_67_DriverType_IsValid(int value);
const Gear_report_67_DriverType Gear_report_67_DriverType_DriverType_MIN = Gear_report_67_DriverType_DRIVER_LAST_SHIFT_REQUESTED_BY_WIRE;
const Gear_report_67_DriverType Gear_report_67_DriverType_DriverType_MAX = Gear_report_67_DriverType_DRIVER_LAST_SHIFT_REQUESTED_BY_DRIVER;
const int Gear_report_67_DriverType_DriverType_ARRAYSIZE = Gear_report_67_DriverType_DriverType_MAX + 1;

enum Gear_report_67_CmdType {
  Gear_report_67_CmdType_CMD_NONE = 0,
  Gear_report_67_CmdType_CMD_PARK = 1,
  Gear_report_67_CmdType_CMD_REVERSE = 2,
  Gear_report_67_CmdType_CMD_NEUTRAL = 3,
  Gear_report_67_CmdType_CMD_DRIVE = 4,
  Gear_report_67_CmdType_CMD_LOW = 5,
  Gear_report_67_CmdType_Gear_report_67_CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Gear_report_67_CmdType_Gear_report_67_CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Gear_report_67_CmdType_IsValid(int value);
const Gear_report_67_CmdType Gear_report_67_CmdType_CmdType_MIN = Gear_report_67_CmdType_CMD_NONE;
const Gear_report_67_CmdType Gear_report_67_CmdType_CmdType_MAX = Gear_report_67_CmdType_CMD_LOW;
const int Gear_report_67_CmdType_CmdType_ARRAYSIZE = Gear_report_67_CmdType_CmdType_MAX + 1;

// ===================================================================

class Steering_report_65 : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Calmcar.drivers.VCUINFO.Steering_report_65) */ {
 public:
  Steering_report_65();
  virtual ~Steering_report_65();

  Steering_report_65(const Steering_report_65& from);

  inline Steering_report_65& operator=(const Steering_report_65& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Steering_report_65(Steering_report_65&& from) noexcept
    : Steering_report_65() {
    *this = ::std::move(from);
  }

  inline Steering_report_65& operator=(Steering_report_65&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Steering_report_65& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Steering_report_65* internal_default_instance() {
    return reinterpret_cast<const Steering_report_65*>(
               &_Steering_report_65_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Steering_report_65* other);
  friend void swap(Steering_report_65& a, Steering_report_65& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Steering_report_65* New() const final {
    return CreateMaybeMessage<Steering_report_65>(NULL);
  }

  Steering_report_65* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Steering_report_65>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Steering_report_65& from);
  void MergeFrom(const Steering_report_65& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Steering_report_65* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Steering_report_65_FltwdcType FltwdcType;
  static const FltwdcType FLTWDC_NO_FAULT =
    Steering_report_65_FltwdcType_FLTWDC_NO_FAULT;
  static const FltwdcType FLTWDC_FAULT =
    Steering_report_65_FltwdcType_FLTWDC_FAULT;
  static inline bool FltwdcType_IsValid(int value) {
    return Steering_report_65_FltwdcType_IsValid(value);
  }
  static const FltwdcType FltwdcType_MIN =
    Steering_report_65_FltwdcType_FltwdcType_MIN;
  static const FltwdcType FltwdcType_MAX =
    Steering_report_65_FltwdcType_FltwdcType_MAX;
  static const int FltwdcType_ARRAYSIZE =
    Steering_report_65_FltwdcType_FltwdcType_ARRAYSIZE;

  typedef Steering_report_65_FltcalType FltcalType;
  static const FltcalType FLTCAL_NO_FAULT =
    Steering_report_65_FltcalType_FLTCAL_NO_FAULT;
  static const FltcalType FLTCAL_FAULT =
    Steering_report_65_FltcalType_FLTCAL_FAULT;
  static inline bool FltcalType_IsValid(int value) {
    return Steering_report_65_FltcalType_IsValid(value);
  }
  static const FltcalType FltcalType_MIN =
    Steering_report_65_FltcalType_FltcalType_MIN;
  static const FltcalType FltcalType_MAX =
    Steering_report_65_FltcalType_FltcalType_MAX;
  static const int FltcalType_ARRAYSIZE =
    Steering_report_65_FltcalType_FltcalType_ARRAYSIZE;

  typedef Steering_report_65_TmoutType TmoutType;
  static const TmoutType TMOUT_VALID =
    Steering_report_65_TmoutType_TMOUT_VALID;
  static const TmoutType TMOUT_TIMEOUT =
    Steering_report_65_TmoutType_TMOUT_TIMEOUT;
  static inline bool TmoutType_IsValid(int value) {
    return Steering_report_65_TmoutType_IsValid(value);
  }
  static const TmoutType TmoutType_MIN =
    Steering_report_65_TmoutType_TmoutType_MIN;
  static const TmoutType TmoutType_MAX =
    Steering_report_65_TmoutType_TmoutType_MAX;
  static const int TmoutType_ARRAYSIZE =
    Steering_report_65_TmoutType_TmoutType_ARRAYSIZE;

  typedef Steering_report_65_Flt2Type Flt2Type;
  static const Flt2Type FLT2_NO_FAULT =
    Steering_report_65_Flt2Type_FLT2_NO_FAULT;
  static const Flt2Type FLT2_FAULT =
    Steering_report_65_Flt2Type_FLT2_FAULT;
  static inline bool Flt2Type_IsValid(int value) {
    return Steering_report_65_Flt2Type_IsValid(value);
  }
  static const Flt2Type Flt2Type_MIN =
    Steering_report_65_Flt2Type_Flt2Type_MIN;
  static const Flt2Type Flt2Type_MAX =
    Steering_report_65_Flt2Type_Flt2Type_MAX;
  static const int Flt2Type_ARRAYSIZE =
    Steering_report_65_Flt2Type_Flt2Type_ARRAYSIZE;

  typedef Steering_report_65_Flt1Type Flt1Type;
  static const Flt1Type FLT1_NO_FAULT =
    Steering_report_65_Flt1Type_FLT1_NO_FAULT;
  static const Flt1Type FLT1_FAULT =
    Steering_report_65_Flt1Type_FLT1_FAULT;
  static inline bool Flt1Type_IsValid(int value) {
    return Steering_report_65_Flt1Type_IsValid(value);
  }
  static const Flt1Type Flt1Type_MIN =
    Steering_report_65_Flt1Type_Flt1Type_MIN;
  static const Flt1Type Flt1Type_MAX =
    Steering_report_65_Flt1Type_Flt1Type_MAX;
  static const int Flt1Type_ARRAYSIZE =
    Steering_report_65_Flt1Type_Flt1Type_ARRAYSIZE;

  typedef Steering_report_65_EnType EnType;
  static const EnType EN_DISABLED =
    Steering_report_65_EnType_EN_DISABLED;
  static const EnType EN_ENABLED =
    Steering_report_65_EnType_EN_ENABLED;
  static inline bool EnType_IsValid(int value) {
    return Steering_report_65_EnType_IsValid(value);
  }
  static const EnType EnType_MIN =
    Steering_report_65_EnType_EnType_MIN;
  static const EnType EnType_MAX =
    Steering_report_65_EnType_EnType_MAX;
  static const int EnType_ARRAYSIZE =
    Steering_report_65_EnType_EnType_ARRAYSIZE;

  typedef Steering_report_65_OverrideType OverrideType;
  static const OverrideType OVERRIDE_NO_OVERRIDE =
    Steering_report_65_OverrideType_OVERRIDE_NO_OVERRIDE;
  static const OverrideType OVERRIDE_DRIVER_OVERRIDE =
    Steering_report_65_OverrideType_OVERRIDE_DRIVER_OVERRIDE;
  static inline bool OverrideType_IsValid(int value) {
    return Steering_report_65_OverrideType_IsValid(value);
  }
  static const OverrideType OverrideType_MIN =
    Steering_report_65_OverrideType_OverrideType_MIN;
  static const OverrideType OverrideType_MAX =
    Steering_report_65_OverrideType_OverrideType_MAX;
  static const int OverrideType_ARRAYSIZE =
    Steering_report_65_OverrideType_OverrideType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // .Calmcar.drivers.VCUINFO.Steering_report_65.FltwdcType fltwdc = 1;
  void clear_fltwdc();
  static const int kFltwdcFieldNumber = 1;
  ::Calmcar::drivers::VCUINFO::Steering_report_65_FltwdcType fltwdc() const;
  void set_fltwdc(::Calmcar::drivers::VCUINFO::Steering_report_65_FltwdcType value);

  // .Calmcar.drivers.VCUINFO.Steering_report_65.FltcalType fltcal = 2;
  void clear_fltcal();
  static const int kFltcalFieldNumber = 2;
  ::Calmcar::drivers::VCUINFO::Steering_report_65_FltcalType fltcal() const;
  void set_fltcal(::Calmcar::drivers::VCUINFO::Steering_report_65_FltcalType value);

  // double torque = 4;
  void clear_torque();
  static const int kTorqueFieldNumber = 4;
  double torque() const;
  void set_torque(double value);

  // .Calmcar.drivers.VCUINFO.Steering_report_65.TmoutType tmout = 3;
  void clear_tmout();
  static const int kTmoutFieldNumber = 3;
  ::Calmcar::drivers::VCUINFO::Steering_report_65_TmoutType tmout() const;
  void set_tmout(::Calmcar::drivers::VCUINFO::Steering_report_65_TmoutType value);

  // .Calmcar.drivers.VCUINFO.Steering_report_65.Flt2Type flt2 = 6;
  void clear_flt2();
  static const int kFlt2FieldNumber = 6;
  ::Calmcar::drivers::VCUINFO::Steering_report_65_Flt2Type flt2() const;
  void set_flt2(::Calmcar::drivers::VCUINFO::Steering_report_65_Flt2Type value);

  // double speed = 5;
  void clear_speed();
  static const int kSpeedFieldNumber = 5;
  double speed() const;
  void set_speed(double value);

  // .Calmcar.drivers.VCUINFO.Steering_report_65.Flt1Type flt1 = 7;
  void clear_flt1();
  static const int kFlt1FieldNumber = 7;
  ::Calmcar::drivers::VCUINFO::Steering_report_65_Flt1Type flt1() const;
  void set_flt1(::Calmcar::drivers::VCUINFO::Steering_report_65_Flt1Type value);

  // .Calmcar.drivers.VCUINFO.Steering_report_65.EnType en = 8;
  void clear_en();
  static const int kEnFieldNumber = 8;
  ::Calmcar::drivers::VCUINFO::Steering_report_65_EnType en() const;
  void set_en(::Calmcar::drivers::VCUINFO::Steering_report_65_EnType value);

  // double cmd = 10;
  void clear_cmd();
  static const int kCmdFieldNumber = 10;
  double cmd() const;
  void set_cmd(double value);

  // double angle = 11;
  void clear_angle();
  static const int kAngleFieldNumber = 11;
  double angle() const;
  void set_angle(double value);

  // .Calmcar.drivers.VCUINFO.Steering_report_65.OverrideType override = 9;
  void clear_override();
  static const int kOverrideFieldNumber = 9;
  ::Calmcar::drivers::VCUINFO::Steering_report_65_OverrideType override() const;
  void set_override(::Calmcar::drivers::VCUINFO::Steering_report_65_OverrideType value);

  // @@protoc_insertion_point(class_scope:Calmcar.drivers.VCUINFO.Steering_report_65)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int fltwdc_;
  int fltcal_;
  double torque_;
  int tmout_;
  int flt2_;
  double speed_;
  int flt1_;
  int en_;
  double cmd_;
  double angle_;
  int override_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_VcuInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gear_report_67 : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Calmcar.drivers.VCUINFO.Gear_report_67) */ {
 public:
  Gear_report_67();
  virtual ~Gear_report_67();

  Gear_report_67(const Gear_report_67& from);

  inline Gear_report_67& operator=(const Gear_report_67& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Gear_report_67(Gear_report_67&& from) noexcept
    : Gear_report_67() {
    *this = ::std::move(from);
  }

  inline Gear_report_67& operator=(Gear_report_67&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Gear_report_67& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gear_report_67* internal_default_instance() {
    return reinterpret_cast<const Gear_report_67*>(
               &_Gear_report_67_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Gear_report_67* other);
  friend void swap(Gear_report_67& a, Gear_report_67& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gear_report_67* New() const final {
    return CreateMaybeMessage<Gear_report_67>(NULL);
  }

  Gear_report_67* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Gear_report_67>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Gear_report_67& from);
  void MergeFrom(const Gear_report_67& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Gear_report_67* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Gear_report_67_RejectType RejectType;
  static const RejectType REJECT_NOT_REJECTED =
    Gear_report_67_RejectType_REJECT_NOT_REJECTED;
  static const RejectType REJECT_OVERRIDE =
    Gear_report_67_RejectType_REJECT_OVERRIDE;
  static const RejectType REJECT_SHIFT_IN_PROGRESS =
    Gear_report_67_RejectType_REJECT_SHIFT_IN_PROGRESS;
  static const RejectType REJECT_REPEAT =
    Gear_report_67_RejectType_REJECT_REPEAT;
  static const RejectType REJECT_CMD_ILLEGAL =
    Gear_report_67_RejectType_REJECT_CMD_ILLEGAL;
  static const RejectType REJECT_SPEED_NOT_2KPH =
    Gear_report_67_RejectType_REJECT_SPEED_NOT_2KPH;
  static const RejectType REJECT_REJECTED_BY_VEHICLE_TIMEOUT =
    Gear_report_67_RejectType_REJECT_REJECTED_BY_VEHICLE_TIMEOUT;
  static inline bool RejectType_IsValid(int value) {
    return Gear_report_67_RejectType_IsValid(value);
  }
  static const RejectType RejectType_MIN =
    Gear_report_67_RejectType_RejectType_MIN;
  static const RejectType RejectType_MAX =
    Gear_report_67_RejectType_RejectType_MAX;
  static const int RejectType_ARRAYSIZE =
    Gear_report_67_RejectType_RejectType_ARRAYSIZE;

  typedef Gear_report_67_StateType StateType;
  static const StateType STATE_NONE =
    Gear_report_67_StateType_STATE_NONE;
  static const StateType STATE_PARK =
    Gear_report_67_StateType_STATE_PARK;
  static const StateType STATE_REVERSE =
    Gear_report_67_StateType_STATE_REVERSE;
  static const StateType STATE_NEUTRAL =
    Gear_report_67_StateType_STATE_NEUTRAL;
  static const StateType STATE_DRIVE =
    Gear_report_67_StateType_STATE_DRIVE;
  static const StateType STATE_LOW =
    Gear_report_67_StateType_STATE_LOW;
  static inline bool StateType_IsValid(int value) {
    return Gear_report_67_StateType_IsValid(value);
  }
  static const StateType StateType_MIN =
    Gear_report_67_StateType_StateType_MIN;
  static const StateType StateType_MAX =
    Gear_report_67_StateType_StateType_MAX;
  static const int StateType_ARRAYSIZE =
    Gear_report_67_StateType_StateType_ARRAYSIZE;

  typedef Gear_report_67_FltbusType FltbusType;
  static const FltbusType FLTBUS_NO_FAULT =
    Gear_report_67_FltbusType_FLTBUS_NO_FAULT;
  static const FltbusType FLTBUS_FAULT =
    Gear_report_67_FltbusType_FLTBUS_FAULT;
  static inline bool FltbusType_IsValid(int value) {
    return Gear_report_67_FltbusType_IsValid(value);
  }
  static const FltbusType FltbusType_MIN =
    Gear_report_67_FltbusType_FltbusType_MIN;
  static const FltbusType FltbusType_MAX =
    Gear_report_67_FltbusType_FltbusType_MAX;
  static const int FltbusType_ARRAYSIZE =
    Gear_report_67_FltbusType_FltbusType_ARRAYSIZE;

  typedef Gear_report_67_DriverType DriverType;
  static const DriverType DRIVER_LAST_SHIFT_REQUESTED_BY_WIRE =
    Gear_report_67_DriverType_DRIVER_LAST_SHIFT_REQUESTED_BY_WIRE;
  static const DriverType DRIVER_LAST_SHIFT_REQUESTED_BY_DRIVER =
    Gear_report_67_DriverType_DRIVER_LAST_SHIFT_REQUESTED_BY_DRIVER;
  static inline bool DriverType_IsValid(int value) {
    return Gear_report_67_DriverType_IsValid(value);
  }
  static const DriverType DriverType_MIN =
    Gear_report_67_DriverType_DriverType_MIN;
  static const DriverType DriverType_MAX =
    Gear_report_67_DriverType_DriverType_MAX;
  static const int DriverType_ARRAYSIZE =
    Gear_report_67_DriverType_DriverType_ARRAYSIZE;

  typedef Gear_report_67_CmdType CmdType;
  static const CmdType CMD_NONE =
    Gear_report_67_CmdType_CMD_NONE;
  static const CmdType CMD_PARK =
    Gear_report_67_CmdType_CMD_PARK;
  static const CmdType CMD_REVERSE =
    Gear_report_67_CmdType_CMD_REVERSE;
  static const CmdType CMD_NEUTRAL =
    Gear_report_67_CmdType_CMD_NEUTRAL;
  static const CmdType CMD_DRIVE =
    Gear_report_67_CmdType_CMD_DRIVE;
  static const CmdType CMD_LOW =
    Gear_report_67_CmdType_CMD_LOW;
  static inline bool CmdType_IsValid(int value) {
    return Gear_report_67_CmdType_IsValid(value);
  }
  static const CmdType CmdType_MIN =
    Gear_report_67_CmdType_CmdType_MIN;
  static const CmdType CmdType_MAX =
    Gear_report_67_CmdType_CmdType_MAX;
  static const int CmdType_ARRAYSIZE =
    Gear_report_67_CmdType_CmdType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // int32 acc_state = 1;
  void clear_acc_state();
  static const int kAccStateFieldNumber = 1;
  ::google::protobuf::int32 acc_state() const;
  void set_acc_state(::google::protobuf::int32 value);

  // .Calmcar.drivers.VCUINFO.Gear_report_67.RejectType reject = 2;
  void clear_reject();
  static const int kRejectFieldNumber = 2;
  ::Calmcar::drivers::VCUINFO::Gear_report_67_RejectType reject() const;
  void set_reject(::Calmcar::drivers::VCUINFO::Gear_report_67_RejectType value);

  // .Calmcar.drivers.VCUINFO.Gear_report_67.StateType state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::Calmcar::drivers::VCUINFO::Gear_report_67_StateType state() const;
  void set_state(::Calmcar::drivers::VCUINFO::Gear_report_67_StateType value);

  // .Calmcar.drivers.VCUINFO.Gear_report_67.FltbusType fltbus = 4;
  void clear_fltbus();
  static const int kFltbusFieldNumber = 4;
  ::Calmcar::drivers::VCUINFO::Gear_report_67_FltbusType fltbus() const;
  void set_fltbus(::Calmcar::drivers::VCUINFO::Gear_report_67_FltbusType value);

  // .Calmcar.drivers.VCUINFO.Gear_report_67.DriverType driver = 5;
  void clear_driver();
  static const int kDriverFieldNumber = 5;
  ::Calmcar::drivers::VCUINFO::Gear_report_67_DriverType driver() const;
  void set_driver(::Calmcar::drivers::VCUINFO::Gear_report_67_DriverType value);

  // .Calmcar.drivers.VCUINFO.Gear_report_67.CmdType cmd = 6;
  void clear_cmd();
  static const int kCmdFieldNumber = 6;
  ::Calmcar::drivers::VCUINFO::Gear_report_67_CmdType cmd() const;
  void set_cmd(::Calmcar::drivers::VCUINFO::Gear_report_67_CmdType value);

  // @@protoc_insertion_point(class_scope:Calmcar.drivers.VCUINFO.Gear_report_67)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int32 acc_state_;
  int reject_;
  int state_;
  int fltbus_;
  int driver_;
  int cmd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_VcuInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Wheelspeed_report_6a : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a) */ {
 public:
  Wheelspeed_report_6a();
  virtual ~Wheelspeed_report_6a();

  Wheelspeed_report_6a(const Wheelspeed_report_6a& from);

  inline Wheelspeed_report_6a& operator=(const Wheelspeed_report_6a& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Wheelspeed_report_6a(Wheelspeed_report_6a&& from) noexcept
    : Wheelspeed_report_6a() {
    *this = ::std::move(from);
  }

  inline Wheelspeed_report_6a& operator=(Wheelspeed_report_6a&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Wheelspeed_report_6a& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Wheelspeed_report_6a* internal_default_instance() {
    return reinterpret_cast<const Wheelspeed_report_6a*>(
               &_Wheelspeed_report_6a_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Wheelspeed_report_6a* other);
  friend void swap(Wheelspeed_report_6a& a, Wheelspeed_report_6a& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Wheelspeed_report_6a* New() const final {
    return CreateMaybeMessage<Wheelspeed_report_6a>(NULL);
  }

  Wheelspeed_report_6a* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Wheelspeed_report_6a>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Wheelspeed_report_6a& from);
  void MergeFrom(const Wheelspeed_report_6a& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Wheelspeed_report_6a* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double rr = 1;
  void clear_rr();
  static const int kRrFieldNumber = 1;
  double rr() const;
  void set_rr(double value);

  // double rl = 2;
  void clear_rl();
  static const int kRlFieldNumber = 2;
  double rl() const;
  void set_rl(double value);

  // double fr = 3;
  void clear_fr();
  static const int kFrFieldNumber = 3;
  double fr() const;
  void set_fr(double value);

  // double fl = 4;
  void clear_fl();
  static const int kFlFieldNumber = 4;
  double fl() const;
  void set_fl(double value);

  // @@protoc_insertion_point(class_scope:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  double rr_;
  double rl_;
  double fr_;
  double fl_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_VcuInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Accel_report_6b : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Calmcar.drivers.VCUINFO.Accel_report_6b) */ {
 public:
  Accel_report_6b();
  virtual ~Accel_report_6b();

  Accel_report_6b(const Accel_report_6b& from);

  inline Accel_report_6b& operator=(const Accel_report_6b& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Accel_report_6b(Accel_report_6b&& from) noexcept
    : Accel_report_6b() {
    *this = ::std::move(from);
  }

  inline Accel_report_6b& operator=(Accel_report_6b&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Accel_report_6b& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Accel_report_6b* internal_default_instance() {
    return reinterpret_cast<const Accel_report_6b*>(
               &_Accel_report_6b_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Accel_report_6b* other);
  friend void swap(Accel_report_6b& a, Accel_report_6b& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Accel_report_6b* New() const final {
    return CreateMaybeMessage<Accel_report_6b>(NULL);
  }

  Accel_report_6b* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Accel_report_6b>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Accel_report_6b& from);
  void MergeFrom(const Accel_report_6b& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Accel_report_6b* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double vert = 1;
  void clear_vert();
  static const int kVertFieldNumber = 1;
  double vert() const;
  void set_vert(double value);

  // double my_long = 2;
  void clear_my_long();
  static const int kMyLongFieldNumber = 2;
  double my_long() const;
  void set_my_long(double value);

  // double lat = 3;
  void clear_lat();
  static const int kLatFieldNumber = 3;
  double lat() const;
  void set_lat(double value);

  // @@protoc_insertion_point(class_scope:Calmcar.drivers.VCUINFO.Accel_report_6b)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  double vert_;
  double my_long_;
  double lat_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_VcuInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gyro_report_6c : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Calmcar.drivers.VCUINFO.Gyro_report_6c) */ {
 public:
  Gyro_report_6c();
  virtual ~Gyro_report_6c();

  Gyro_report_6c(const Gyro_report_6c& from);

  inline Gyro_report_6c& operator=(const Gyro_report_6c& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Gyro_report_6c(Gyro_report_6c&& from) noexcept
    : Gyro_report_6c() {
    *this = ::std::move(from);
  }

  inline Gyro_report_6c& operator=(Gyro_report_6c&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Gyro_report_6c& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gyro_report_6c* internal_default_instance() {
    return reinterpret_cast<const Gyro_report_6c*>(
               &_Gyro_report_6c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Gyro_report_6c* other);
  friend void swap(Gyro_report_6c& a, Gyro_report_6c& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gyro_report_6c* New() const final {
    return CreateMaybeMessage<Gyro_report_6c>(NULL);
  }

  Gyro_report_6c* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Gyro_report_6c>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Gyro_report_6c& from);
  void MergeFrom(const Gyro_report_6c& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Gyro_report_6c* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double yaw = 1;
  void clear_yaw();
  static const int kYawFieldNumber = 1;
  double yaw() const;
  void set_yaw(double value);

  // double roll = 2;
  void clear_roll();
  static const int kRollFieldNumber = 2;
  double roll() const;
  void set_roll(double value);

  // @@protoc_insertion_point(class_scope:Calmcar.drivers.VCUINFO.Gyro_report_6c)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  double yaw_;
  double roll_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_VcuInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VcuInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Calmcar.drivers.VCUINFO.VcuInfo) */ {
 public:
  VcuInfo();
  virtual ~VcuInfo();

  VcuInfo(const VcuInfo& from);

  inline VcuInfo& operator=(const VcuInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VcuInfo(VcuInfo&& from) noexcept
    : VcuInfo() {
    *this = ::std::move(from);
  }

  inline VcuInfo& operator=(VcuInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const VcuInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VcuInfo* internal_default_instance() {
    return reinterpret_cast<const VcuInfo*>(
               &_VcuInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(VcuInfo* other);
  friend void swap(VcuInfo& a, VcuInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VcuInfo* New() const final {
    return CreateMaybeMessage<VcuInfo>(NULL);
  }

  VcuInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VcuInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const VcuInfo& from);
  void MergeFrom(const VcuInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VcuInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Calmcar.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::Calmcar::common::Header& _internal_header() const;
  public:
  const ::Calmcar::common::Header& header() const;
  ::Calmcar::common::Header* release_header();
  ::Calmcar::common::Header* mutable_header();
  void set_allocated_header(::Calmcar::common::Header* header);

  // .Calmcar.drivers.VCUINFO.Steering_report_65 steering_report_65 = 10;
  bool has_steering_report_65() const;
  void clear_steering_report_65();
  static const int kSteeringReport65FieldNumber = 10;
  private:
  const ::Calmcar::drivers::VCUINFO::Steering_report_65& _internal_steering_report_65() const;
  public:
  const ::Calmcar::drivers::VCUINFO::Steering_report_65& steering_report_65() const;
  ::Calmcar::drivers::VCUINFO::Steering_report_65* release_steering_report_65();
  ::Calmcar::drivers::VCUINFO::Steering_report_65* mutable_steering_report_65();
  void set_allocated_steering_report_65(::Calmcar::drivers::VCUINFO::Steering_report_65* steering_report_65);

  // .Calmcar.drivers.VCUINFO.Gear_report_67 gear_report_67 = 12;
  bool has_gear_report_67() const;
  void clear_gear_report_67();
  static const int kGearReport67FieldNumber = 12;
  private:
  const ::Calmcar::drivers::VCUINFO::Gear_report_67& _internal_gear_report_67() const;
  public:
  const ::Calmcar::drivers::VCUINFO::Gear_report_67& gear_report_67() const;
  ::Calmcar::drivers::VCUINFO::Gear_report_67* release_gear_report_67();
  ::Calmcar::drivers::VCUINFO::Gear_report_67* mutable_gear_report_67();
  void set_allocated_gear_report_67(::Calmcar::drivers::VCUINFO::Gear_report_67* gear_report_67);

  // .Calmcar.drivers.VCUINFO.Wheelspeed_report_6a wheelspeed_report_6a = 20;
  bool has_wheelspeed_report_6a() const;
  void clear_wheelspeed_report_6a();
  static const int kWheelspeedReport6AFieldNumber = 20;
  private:
  const ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a& _internal_wheelspeed_report_6a() const;
  public:
  const ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a& wheelspeed_report_6a() const;
  ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a* release_wheelspeed_report_6a();
  ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a* mutable_wheelspeed_report_6a();
  void set_allocated_wheelspeed_report_6a(::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a* wheelspeed_report_6a);

  // .Calmcar.drivers.VCUINFO.Accel_report_6b accel_report_6b = 21;
  bool has_accel_report_6b() const;
  void clear_accel_report_6b();
  static const int kAccelReport6BFieldNumber = 21;
  private:
  const ::Calmcar::drivers::VCUINFO::Accel_report_6b& _internal_accel_report_6b() const;
  public:
  const ::Calmcar::drivers::VCUINFO::Accel_report_6b& accel_report_6b() const;
  ::Calmcar::drivers::VCUINFO::Accel_report_6b* release_accel_report_6b();
  ::Calmcar::drivers::VCUINFO::Accel_report_6b* mutable_accel_report_6b();
  void set_allocated_accel_report_6b(::Calmcar::drivers::VCUINFO::Accel_report_6b* accel_report_6b);

  // .Calmcar.drivers.VCUINFO.Gyro_report_6c gyro_report_6c = 22;
  bool has_gyro_report_6c() const;
  void clear_gyro_report_6c();
  static const int kGyroReport6CFieldNumber = 22;
  private:
  const ::Calmcar::drivers::VCUINFO::Gyro_report_6c& _internal_gyro_report_6c() const;
  public:
  const ::Calmcar::drivers::VCUINFO::Gyro_report_6c& gyro_report_6c() const;
  ::Calmcar::drivers::VCUINFO::Gyro_report_6c* release_gyro_report_6c();
  ::Calmcar::drivers::VCUINFO::Gyro_report_6c* mutable_gyro_report_6c();
  void set_allocated_gyro_report_6c(::Calmcar::drivers::VCUINFO::Gyro_report_6c* gyro_report_6c);

  // @@protoc_insertion_point(class_scope:Calmcar.drivers.VCUINFO.VcuInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::Calmcar::common::Header* header_;
  ::Calmcar::drivers::VCUINFO::Steering_report_65* steering_report_65_;
  ::Calmcar::drivers::VCUINFO::Gear_report_67* gear_report_67_;
  ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a* wheelspeed_report_6a_;
  ::Calmcar::drivers::VCUINFO::Accel_report_6b* accel_report_6b_;
  ::Calmcar::drivers::VCUINFO::Gyro_report_6c* gyro_report_6c_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_VcuInfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Steering_report_65

// .Calmcar.drivers.VCUINFO.Steering_report_65.FltwdcType fltwdc = 1;
inline void Steering_report_65::clear_fltwdc() {
  fltwdc_ = 0;
}
inline ::Calmcar::drivers::VCUINFO::Steering_report_65_FltwdcType Steering_report_65::fltwdc() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Steering_report_65.fltwdc)
  return static_cast< ::Calmcar::drivers::VCUINFO::Steering_report_65_FltwdcType >(fltwdc_);
}
inline void Steering_report_65::set_fltwdc(::Calmcar::drivers::VCUINFO::Steering_report_65_FltwdcType value) {
  
  fltwdc_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Steering_report_65.fltwdc)
}

// .Calmcar.drivers.VCUINFO.Steering_report_65.FltcalType fltcal = 2;
inline void Steering_report_65::clear_fltcal() {
  fltcal_ = 0;
}
inline ::Calmcar::drivers::VCUINFO::Steering_report_65_FltcalType Steering_report_65::fltcal() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Steering_report_65.fltcal)
  return static_cast< ::Calmcar::drivers::VCUINFO::Steering_report_65_FltcalType >(fltcal_);
}
inline void Steering_report_65::set_fltcal(::Calmcar::drivers::VCUINFO::Steering_report_65_FltcalType value) {
  
  fltcal_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Steering_report_65.fltcal)
}

// .Calmcar.drivers.VCUINFO.Steering_report_65.TmoutType tmout = 3;
inline void Steering_report_65::clear_tmout() {
  tmout_ = 0;
}
inline ::Calmcar::drivers::VCUINFO::Steering_report_65_TmoutType Steering_report_65::tmout() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Steering_report_65.tmout)
  return static_cast< ::Calmcar::drivers::VCUINFO::Steering_report_65_TmoutType >(tmout_);
}
inline void Steering_report_65::set_tmout(::Calmcar::drivers::VCUINFO::Steering_report_65_TmoutType value) {
  
  tmout_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Steering_report_65.tmout)
}

// double torque = 4;
inline void Steering_report_65::clear_torque() {
  torque_ = 0;
}
inline double Steering_report_65::torque() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Steering_report_65.torque)
  return torque_;
}
inline void Steering_report_65::set_torque(double value) {
  
  torque_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Steering_report_65.torque)
}

// double speed = 5;
inline void Steering_report_65::clear_speed() {
  speed_ = 0;
}
inline double Steering_report_65::speed() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Steering_report_65.speed)
  return speed_;
}
inline void Steering_report_65::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Steering_report_65.speed)
}

// .Calmcar.drivers.VCUINFO.Steering_report_65.Flt2Type flt2 = 6;
inline void Steering_report_65::clear_flt2() {
  flt2_ = 0;
}
inline ::Calmcar::drivers::VCUINFO::Steering_report_65_Flt2Type Steering_report_65::flt2() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Steering_report_65.flt2)
  return static_cast< ::Calmcar::drivers::VCUINFO::Steering_report_65_Flt2Type >(flt2_);
}
inline void Steering_report_65::set_flt2(::Calmcar::drivers::VCUINFO::Steering_report_65_Flt2Type value) {
  
  flt2_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Steering_report_65.flt2)
}

// .Calmcar.drivers.VCUINFO.Steering_report_65.Flt1Type flt1 = 7;
inline void Steering_report_65::clear_flt1() {
  flt1_ = 0;
}
inline ::Calmcar::drivers::VCUINFO::Steering_report_65_Flt1Type Steering_report_65::flt1() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Steering_report_65.flt1)
  return static_cast< ::Calmcar::drivers::VCUINFO::Steering_report_65_Flt1Type >(flt1_);
}
inline void Steering_report_65::set_flt1(::Calmcar::drivers::VCUINFO::Steering_report_65_Flt1Type value) {
  
  flt1_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Steering_report_65.flt1)
}

// .Calmcar.drivers.VCUINFO.Steering_report_65.EnType en = 8;
inline void Steering_report_65::clear_en() {
  en_ = 0;
}
inline ::Calmcar::drivers::VCUINFO::Steering_report_65_EnType Steering_report_65::en() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Steering_report_65.en)
  return static_cast< ::Calmcar::drivers::VCUINFO::Steering_report_65_EnType >(en_);
}
inline void Steering_report_65::set_en(::Calmcar::drivers::VCUINFO::Steering_report_65_EnType value) {
  
  en_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Steering_report_65.en)
}

// .Calmcar.drivers.VCUINFO.Steering_report_65.OverrideType override = 9;
inline void Steering_report_65::clear_override() {
  override_ = 0;
}
inline ::Calmcar::drivers::VCUINFO::Steering_report_65_OverrideType Steering_report_65::override() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Steering_report_65.override)
  return static_cast< ::Calmcar::drivers::VCUINFO::Steering_report_65_OverrideType >(override_);
}
inline void Steering_report_65::set_override(::Calmcar::drivers::VCUINFO::Steering_report_65_OverrideType value) {
  
  override_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Steering_report_65.override)
}

// double cmd = 10;
inline void Steering_report_65::clear_cmd() {
  cmd_ = 0;
}
inline double Steering_report_65::cmd() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Steering_report_65.cmd)
  return cmd_;
}
inline void Steering_report_65::set_cmd(double value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Steering_report_65.cmd)
}

// double angle = 11;
inline void Steering_report_65::clear_angle() {
  angle_ = 0;
}
inline double Steering_report_65::angle() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Steering_report_65.angle)
  return angle_;
}
inline void Steering_report_65::set_angle(double value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Steering_report_65.angle)
}

// -------------------------------------------------------------------

// Gear_report_67

// int32 acc_state = 1;
inline void Gear_report_67::clear_acc_state() {
  acc_state_ = 0;
}
inline ::google::protobuf::int32 Gear_report_67::acc_state() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Gear_report_67.acc_state)
  return acc_state_;
}
inline void Gear_report_67::set_acc_state(::google::protobuf::int32 value) {
  
  acc_state_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Gear_report_67.acc_state)
}

// .Calmcar.drivers.VCUINFO.Gear_report_67.RejectType reject = 2;
inline void Gear_report_67::clear_reject() {
  reject_ = 0;
}
inline ::Calmcar::drivers::VCUINFO::Gear_report_67_RejectType Gear_report_67::reject() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Gear_report_67.reject)
  return static_cast< ::Calmcar::drivers::VCUINFO::Gear_report_67_RejectType >(reject_);
}
inline void Gear_report_67::set_reject(::Calmcar::drivers::VCUINFO::Gear_report_67_RejectType value) {
  
  reject_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Gear_report_67.reject)
}

// .Calmcar.drivers.VCUINFO.Gear_report_67.StateType state = 3;
inline void Gear_report_67::clear_state() {
  state_ = 0;
}
inline ::Calmcar::drivers::VCUINFO::Gear_report_67_StateType Gear_report_67::state() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Gear_report_67.state)
  return static_cast< ::Calmcar::drivers::VCUINFO::Gear_report_67_StateType >(state_);
}
inline void Gear_report_67::set_state(::Calmcar::drivers::VCUINFO::Gear_report_67_StateType value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Gear_report_67.state)
}

// .Calmcar.drivers.VCUINFO.Gear_report_67.FltbusType fltbus = 4;
inline void Gear_report_67::clear_fltbus() {
  fltbus_ = 0;
}
inline ::Calmcar::drivers::VCUINFO::Gear_report_67_FltbusType Gear_report_67::fltbus() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Gear_report_67.fltbus)
  return static_cast< ::Calmcar::drivers::VCUINFO::Gear_report_67_FltbusType >(fltbus_);
}
inline void Gear_report_67::set_fltbus(::Calmcar::drivers::VCUINFO::Gear_report_67_FltbusType value) {
  
  fltbus_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Gear_report_67.fltbus)
}

// .Calmcar.drivers.VCUINFO.Gear_report_67.DriverType driver = 5;
inline void Gear_report_67::clear_driver() {
  driver_ = 0;
}
inline ::Calmcar::drivers::VCUINFO::Gear_report_67_DriverType Gear_report_67::driver() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Gear_report_67.driver)
  return static_cast< ::Calmcar::drivers::VCUINFO::Gear_report_67_DriverType >(driver_);
}
inline void Gear_report_67::set_driver(::Calmcar::drivers::VCUINFO::Gear_report_67_DriverType value) {
  
  driver_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Gear_report_67.driver)
}

// .Calmcar.drivers.VCUINFO.Gear_report_67.CmdType cmd = 6;
inline void Gear_report_67::clear_cmd() {
  cmd_ = 0;
}
inline ::Calmcar::drivers::VCUINFO::Gear_report_67_CmdType Gear_report_67::cmd() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Gear_report_67.cmd)
  return static_cast< ::Calmcar::drivers::VCUINFO::Gear_report_67_CmdType >(cmd_);
}
inline void Gear_report_67::set_cmd(::Calmcar::drivers::VCUINFO::Gear_report_67_CmdType value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Gear_report_67.cmd)
}

// -------------------------------------------------------------------

// Wheelspeed_report_6a

// double rr = 1;
inline void Wheelspeed_report_6a::clear_rr() {
  rr_ = 0;
}
inline double Wheelspeed_report_6a::rr() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a.rr)
  return rr_;
}
inline void Wheelspeed_report_6a::set_rr(double value) {
  
  rr_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a.rr)
}

// double rl = 2;
inline void Wheelspeed_report_6a::clear_rl() {
  rl_ = 0;
}
inline double Wheelspeed_report_6a::rl() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a.rl)
  return rl_;
}
inline void Wheelspeed_report_6a::set_rl(double value) {
  
  rl_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a.rl)
}

// double fr = 3;
inline void Wheelspeed_report_6a::clear_fr() {
  fr_ = 0;
}
inline double Wheelspeed_report_6a::fr() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a.fr)
  return fr_;
}
inline void Wheelspeed_report_6a::set_fr(double value) {
  
  fr_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a.fr)
}

// double fl = 4;
inline void Wheelspeed_report_6a::clear_fl() {
  fl_ = 0;
}
inline double Wheelspeed_report_6a::fl() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a.fl)
  return fl_;
}
inline void Wheelspeed_report_6a::set_fl(double value) {
  
  fl_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Wheelspeed_report_6a.fl)
}

// -------------------------------------------------------------------

// Accel_report_6b

// double vert = 1;
inline void Accel_report_6b::clear_vert() {
  vert_ = 0;
}
inline double Accel_report_6b::vert() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Accel_report_6b.vert)
  return vert_;
}
inline void Accel_report_6b::set_vert(double value) {
  
  vert_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Accel_report_6b.vert)
}

// double my_long = 2;
inline void Accel_report_6b::clear_my_long() {
  my_long_ = 0;
}
inline double Accel_report_6b::my_long() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Accel_report_6b.my_long)
  return my_long_;
}
inline void Accel_report_6b::set_my_long(double value) {
  
  my_long_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Accel_report_6b.my_long)
}

// double lat = 3;
inline void Accel_report_6b::clear_lat() {
  lat_ = 0;
}
inline double Accel_report_6b::lat() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Accel_report_6b.lat)
  return lat_;
}
inline void Accel_report_6b::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Accel_report_6b.lat)
}

// -------------------------------------------------------------------

// Gyro_report_6c

// double yaw = 1;
inline void Gyro_report_6c::clear_yaw() {
  yaw_ = 0;
}
inline double Gyro_report_6c::yaw() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Gyro_report_6c.yaw)
  return yaw_;
}
inline void Gyro_report_6c::set_yaw(double value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Gyro_report_6c.yaw)
}

// double roll = 2;
inline void Gyro_report_6c::clear_roll() {
  roll_ = 0;
}
inline double Gyro_report_6c::roll() const {
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.Gyro_report_6c.roll)
  return roll_;
}
inline void Gyro_report_6c::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:Calmcar.drivers.VCUINFO.Gyro_report_6c.roll)
}

// -------------------------------------------------------------------

// VcuInfo

// .Calmcar.common.Header header = 1;
inline bool VcuInfo::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::Calmcar::common::Header& VcuInfo::_internal_header() const {
  return *header_;
}
inline const ::Calmcar::common::Header& VcuInfo::header() const {
  const ::Calmcar::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.VcuInfo.header)
  return p != NULL ? *p : *reinterpret_cast<const ::Calmcar::common::Header*>(
      &::Calmcar::common::_Header_default_instance_);
}
inline ::Calmcar::common::Header* VcuInfo::release_header() {
  // @@protoc_insertion_point(field_release:Calmcar.drivers.VCUINFO.VcuInfo.header)
  
  ::Calmcar::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::Calmcar::common::Header* VcuInfo::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::Calmcar::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Calmcar.drivers.VCUINFO.VcuInfo.header)
  return header_;
}
inline void VcuInfo::set_allocated_header(::Calmcar::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Calmcar.drivers.VCUINFO.VcuInfo.header)
}

// .Calmcar.drivers.VCUINFO.Steering_report_65 steering_report_65 = 10;
inline bool VcuInfo::has_steering_report_65() const {
  return this != internal_default_instance() && steering_report_65_ != NULL;
}
inline void VcuInfo::clear_steering_report_65() {
  if (GetArenaNoVirtual() == NULL && steering_report_65_ != NULL) {
    delete steering_report_65_;
  }
  steering_report_65_ = NULL;
}
inline const ::Calmcar::drivers::VCUINFO::Steering_report_65& VcuInfo::_internal_steering_report_65() const {
  return *steering_report_65_;
}
inline const ::Calmcar::drivers::VCUINFO::Steering_report_65& VcuInfo::steering_report_65() const {
  const ::Calmcar::drivers::VCUINFO::Steering_report_65* p = steering_report_65_;
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.VcuInfo.steering_report_65)
  return p != NULL ? *p : *reinterpret_cast<const ::Calmcar::drivers::VCUINFO::Steering_report_65*>(
      &::Calmcar::drivers::VCUINFO::_Steering_report_65_default_instance_);
}
inline ::Calmcar::drivers::VCUINFO::Steering_report_65* VcuInfo::release_steering_report_65() {
  // @@protoc_insertion_point(field_release:Calmcar.drivers.VCUINFO.VcuInfo.steering_report_65)
  
  ::Calmcar::drivers::VCUINFO::Steering_report_65* temp = steering_report_65_;
  steering_report_65_ = NULL;
  return temp;
}
inline ::Calmcar::drivers::VCUINFO::Steering_report_65* VcuInfo::mutable_steering_report_65() {
  
  if (steering_report_65_ == NULL) {
    auto* p = CreateMaybeMessage<::Calmcar::drivers::VCUINFO::Steering_report_65>(GetArenaNoVirtual());
    steering_report_65_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Calmcar.drivers.VCUINFO.VcuInfo.steering_report_65)
  return steering_report_65_;
}
inline void VcuInfo::set_allocated_steering_report_65(::Calmcar::drivers::VCUINFO::Steering_report_65* steering_report_65) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete steering_report_65_;
  }
  if (steering_report_65) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      steering_report_65 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, steering_report_65, submessage_arena);
    }
    
  } else {
    
  }
  steering_report_65_ = steering_report_65;
  // @@protoc_insertion_point(field_set_allocated:Calmcar.drivers.VCUINFO.VcuInfo.steering_report_65)
}

// .Calmcar.drivers.VCUINFO.Gear_report_67 gear_report_67 = 12;
inline bool VcuInfo::has_gear_report_67() const {
  return this != internal_default_instance() && gear_report_67_ != NULL;
}
inline void VcuInfo::clear_gear_report_67() {
  if (GetArenaNoVirtual() == NULL && gear_report_67_ != NULL) {
    delete gear_report_67_;
  }
  gear_report_67_ = NULL;
}
inline const ::Calmcar::drivers::VCUINFO::Gear_report_67& VcuInfo::_internal_gear_report_67() const {
  return *gear_report_67_;
}
inline const ::Calmcar::drivers::VCUINFO::Gear_report_67& VcuInfo::gear_report_67() const {
  const ::Calmcar::drivers::VCUINFO::Gear_report_67* p = gear_report_67_;
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.VcuInfo.gear_report_67)
  return p != NULL ? *p : *reinterpret_cast<const ::Calmcar::drivers::VCUINFO::Gear_report_67*>(
      &::Calmcar::drivers::VCUINFO::_Gear_report_67_default_instance_);
}
inline ::Calmcar::drivers::VCUINFO::Gear_report_67* VcuInfo::release_gear_report_67() {
  // @@protoc_insertion_point(field_release:Calmcar.drivers.VCUINFO.VcuInfo.gear_report_67)
  
  ::Calmcar::drivers::VCUINFO::Gear_report_67* temp = gear_report_67_;
  gear_report_67_ = NULL;
  return temp;
}
inline ::Calmcar::drivers::VCUINFO::Gear_report_67* VcuInfo::mutable_gear_report_67() {
  
  if (gear_report_67_ == NULL) {
    auto* p = CreateMaybeMessage<::Calmcar::drivers::VCUINFO::Gear_report_67>(GetArenaNoVirtual());
    gear_report_67_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Calmcar.drivers.VCUINFO.VcuInfo.gear_report_67)
  return gear_report_67_;
}
inline void VcuInfo::set_allocated_gear_report_67(::Calmcar::drivers::VCUINFO::Gear_report_67* gear_report_67) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gear_report_67_;
  }
  if (gear_report_67) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gear_report_67 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gear_report_67, submessage_arena);
    }
    
  } else {
    
  }
  gear_report_67_ = gear_report_67;
  // @@protoc_insertion_point(field_set_allocated:Calmcar.drivers.VCUINFO.VcuInfo.gear_report_67)
}

// .Calmcar.drivers.VCUINFO.Wheelspeed_report_6a wheelspeed_report_6a = 20;
inline bool VcuInfo::has_wheelspeed_report_6a() const {
  return this != internal_default_instance() && wheelspeed_report_6a_ != NULL;
}
inline void VcuInfo::clear_wheelspeed_report_6a() {
  if (GetArenaNoVirtual() == NULL && wheelspeed_report_6a_ != NULL) {
    delete wheelspeed_report_6a_;
  }
  wheelspeed_report_6a_ = NULL;
}
inline const ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a& VcuInfo::_internal_wheelspeed_report_6a() const {
  return *wheelspeed_report_6a_;
}
inline const ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a& VcuInfo::wheelspeed_report_6a() const {
  const ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a* p = wheelspeed_report_6a_;
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.VcuInfo.wheelspeed_report_6a)
  return p != NULL ? *p : *reinterpret_cast<const ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a*>(
      &::Calmcar::drivers::VCUINFO::_Wheelspeed_report_6a_default_instance_);
}
inline ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a* VcuInfo::release_wheelspeed_report_6a() {
  // @@protoc_insertion_point(field_release:Calmcar.drivers.VCUINFO.VcuInfo.wheelspeed_report_6a)
  
  ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a* temp = wheelspeed_report_6a_;
  wheelspeed_report_6a_ = NULL;
  return temp;
}
inline ::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a* VcuInfo::mutable_wheelspeed_report_6a() {
  
  if (wheelspeed_report_6a_ == NULL) {
    auto* p = CreateMaybeMessage<::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a>(GetArenaNoVirtual());
    wheelspeed_report_6a_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Calmcar.drivers.VCUINFO.VcuInfo.wheelspeed_report_6a)
  return wheelspeed_report_6a_;
}
inline void VcuInfo::set_allocated_wheelspeed_report_6a(::Calmcar::drivers::VCUINFO::Wheelspeed_report_6a* wheelspeed_report_6a) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete wheelspeed_report_6a_;
  }
  if (wheelspeed_report_6a) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      wheelspeed_report_6a = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, wheelspeed_report_6a, submessage_arena);
    }
    
  } else {
    
  }
  wheelspeed_report_6a_ = wheelspeed_report_6a;
  // @@protoc_insertion_point(field_set_allocated:Calmcar.drivers.VCUINFO.VcuInfo.wheelspeed_report_6a)
}

// .Calmcar.drivers.VCUINFO.Accel_report_6b accel_report_6b = 21;
inline bool VcuInfo::has_accel_report_6b() const {
  return this != internal_default_instance() && accel_report_6b_ != NULL;
}
inline void VcuInfo::clear_accel_report_6b() {
  if (GetArenaNoVirtual() == NULL && accel_report_6b_ != NULL) {
    delete accel_report_6b_;
  }
  accel_report_6b_ = NULL;
}
inline const ::Calmcar::drivers::VCUINFO::Accel_report_6b& VcuInfo::_internal_accel_report_6b() const {
  return *accel_report_6b_;
}
inline const ::Calmcar::drivers::VCUINFO::Accel_report_6b& VcuInfo::accel_report_6b() const {
  const ::Calmcar::drivers::VCUINFO::Accel_report_6b* p = accel_report_6b_;
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.VcuInfo.accel_report_6b)
  return p != NULL ? *p : *reinterpret_cast<const ::Calmcar::drivers::VCUINFO::Accel_report_6b*>(
      &::Calmcar::drivers::VCUINFO::_Accel_report_6b_default_instance_);
}
inline ::Calmcar::drivers::VCUINFO::Accel_report_6b* VcuInfo::release_accel_report_6b() {
  // @@protoc_insertion_point(field_release:Calmcar.drivers.VCUINFO.VcuInfo.accel_report_6b)
  
  ::Calmcar::drivers::VCUINFO::Accel_report_6b* temp = accel_report_6b_;
  accel_report_6b_ = NULL;
  return temp;
}
inline ::Calmcar::drivers::VCUINFO::Accel_report_6b* VcuInfo::mutable_accel_report_6b() {
  
  if (accel_report_6b_ == NULL) {
    auto* p = CreateMaybeMessage<::Calmcar::drivers::VCUINFO::Accel_report_6b>(GetArenaNoVirtual());
    accel_report_6b_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Calmcar.drivers.VCUINFO.VcuInfo.accel_report_6b)
  return accel_report_6b_;
}
inline void VcuInfo::set_allocated_accel_report_6b(::Calmcar::drivers::VCUINFO::Accel_report_6b* accel_report_6b) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete accel_report_6b_;
  }
  if (accel_report_6b) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accel_report_6b = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accel_report_6b, submessage_arena);
    }
    
  } else {
    
  }
  accel_report_6b_ = accel_report_6b;
  // @@protoc_insertion_point(field_set_allocated:Calmcar.drivers.VCUINFO.VcuInfo.accel_report_6b)
}

// .Calmcar.drivers.VCUINFO.Gyro_report_6c gyro_report_6c = 22;
inline bool VcuInfo::has_gyro_report_6c() const {
  return this != internal_default_instance() && gyro_report_6c_ != NULL;
}
inline void VcuInfo::clear_gyro_report_6c() {
  if (GetArenaNoVirtual() == NULL && gyro_report_6c_ != NULL) {
    delete gyro_report_6c_;
  }
  gyro_report_6c_ = NULL;
}
inline const ::Calmcar::drivers::VCUINFO::Gyro_report_6c& VcuInfo::_internal_gyro_report_6c() const {
  return *gyro_report_6c_;
}
inline const ::Calmcar::drivers::VCUINFO::Gyro_report_6c& VcuInfo::gyro_report_6c() const {
  const ::Calmcar::drivers::VCUINFO::Gyro_report_6c* p = gyro_report_6c_;
  // @@protoc_insertion_point(field_get:Calmcar.drivers.VCUINFO.VcuInfo.gyro_report_6c)
  return p != NULL ? *p : *reinterpret_cast<const ::Calmcar::drivers::VCUINFO::Gyro_report_6c*>(
      &::Calmcar::drivers::VCUINFO::_Gyro_report_6c_default_instance_);
}
inline ::Calmcar::drivers::VCUINFO::Gyro_report_6c* VcuInfo::release_gyro_report_6c() {
  // @@protoc_insertion_point(field_release:Calmcar.drivers.VCUINFO.VcuInfo.gyro_report_6c)
  
  ::Calmcar::drivers::VCUINFO::Gyro_report_6c* temp = gyro_report_6c_;
  gyro_report_6c_ = NULL;
  return temp;
}
inline ::Calmcar::drivers::VCUINFO::Gyro_report_6c* VcuInfo::mutable_gyro_report_6c() {
  
  if (gyro_report_6c_ == NULL) {
    auto* p = CreateMaybeMessage<::Calmcar::drivers::VCUINFO::Gyro_report_6c>(GetArenaNoVirtual());
    gyro_report_6c_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Calmcar.drivers.VCUINFO.VcuInfo.gyro_report_6c)
  return gyro_report_6c_;
}
inline void VcuInfo::set_allocated_gyro_report_6c(::Calmcar::drivers::VCUINFO::Gyro_report_6c* gyro_report_6c) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gyro_report_6c_;
  }
  if (gyro_report_6c) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gyro_report_6c = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gyro_report_6c, submessage_arena);
    }
    
  } else {
    
  }
  gyro_report_6c_ = gyro_report_6c;
  // @@protoc_insertion_point(field_set_allocated:Calmcar.drivers.VCUINFO.VcuInfo.gyro_report_6c)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace VCUINFO
}  // namespace drivers
}  // namespace Calmcar

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Calmcar::drivers::VCUINFO::Steering_report_65_FltwdcType> : ::std::true_type {};
template <> struct is_proto_enum< ::Calmcar::drivers::VCUINFO::Steering_report_65_FltcalType> : ::std::true_type {};
template <> struct is_proto_enum< ::Calmcar::drivers::VCUINFO::Steering_report_65_TmoutType> : ::std::true_type {};
template <> struct is_proto_enum< ::Calmcar::drivers::VCUINFO::Steering_report_65_Flt2Type> : ::std::true_type {};
template <> struct is_proto_enum< ::Calmcar::drivers::VCUINFO::Steering_report_65_Flt1Type> : ::std::true_type {};
template <> struct is_proto_enum< ::Calmcar::drivers::VCUINFO::Steering_report_65_EnType> : ::std::true_type {};
template <> struct is_proto_enum< ::Calmcar::drivers::VCUINFO::Steering_report_65_OverrideType> : ::std::true_type {};
template <> struct is_proto_enum< ::Calmcar::drivers::VCUINFO::Gear_report_67_RejectType> : ::std::true_type {};
template <> struct is_proto_enum< ::Calmcar::drivers::VCUINFO::Gear_report_67_StateType> : ::std::true_type {};
template <> struct is_proto_enum< ::Calmcar::drivers::VCUINFO::Gear_report_67_FltbusType> : ::std::true_type {};
template <> struct is_proto_enum< ::Calmcar::drivers::VCUINFO::Gear_report_67_DriverType> : ::std::true_type {};
template <> struct is_proto_enum< ::Calmcar::drivers::VCUINFO::Gear_report_67_CmdType> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_VcuInfo_2eproto
