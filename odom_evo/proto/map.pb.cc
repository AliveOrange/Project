// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#include "map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_geometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_geometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Polygon;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_geometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Polyline;
}  // namespace protobuf_geometry_2eproto
namespace protobuf_map_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LandMark;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Lane;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LaneLine;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapFrame_LandMarkEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapFrame_LaneLinesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_map_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapFrame_LanesEntry_DoNotUse;
}  // namespace protobuf_map_2eproto
namespace calmcar_map {
namespace proto {
namespace map {
class LaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lane>
      _instance;
} _Lane_default_instance_;
class LaneLineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneLine>
      _instance;
} _LaneLine_default_instance_;
class LandMarkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LandMark>
      _instance;
} _LandMark_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class MapFrame_LanesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapFrame_LanesEntry_DoNotUse>
      _instance;
} _MapFrame_LanesEntry_DoNotUse_default_instance_;
class MapFrame_LaneLinesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapFrame_LaneLinesEntry_DoNotUse>
      _instance;
} _MapFrame_LaneLinesEntry_DoNotUse_default_instance_;
class MapFrame_LandMarkEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapFrame_LandMarkEntry_DoNotUse>
      _instance;
} _MapFrame_LandMarkEntry_DoNotUse_default_instance_;
class MapFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapFrame>
      _instance;
} _MapFrame_default_instance_;
}  // namespace map
}  // namespace proto
}  // namespace calmcar_map
namespace protobuf_map_2eproto {
static void InitDefaultsLane() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmcar_map::proto::map::_Lane_default_instance_;
    new (ptr) ::calmcar_map::proto::map::Lane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar_map::proto::map::Lane::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Lane =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLane}, {
      &protobuf_geometry_2eproto::scc_info_Polyline.base,}};

static void InitDefaultsLaneLine() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmcar_map::proto::map::_LaneLine_default_instance_;
    new (ptr) ::calmcar_map::proto::map::LaneLine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar_map::proto::map::LaneLine::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaneLine =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaneLine}, {
      &protobuf_geometry_2eproto::scc_info_Polyline.base,}};

static void InitDefaultsLandMark() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmcar_map::proto::map::_LandMark_default_instance_;
    new (ptr) ::calmcar_map::proto::map::LandMark();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar_map::proto::map::LandMark::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LandMark =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLandMark}, {
      &protobuf_geometry_2eproto::scc_info_Polygon.base,}};

static void InitDefaultsHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmcar_map::proto::map::_Header_default_instance_;
    new (ptr) ::calmcar_map::proto::map::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar_map::proto::map::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeader}, {}};

static void InitDefaultsMapFrame_LanesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmcar_map::proto::map::_MapFrame_LanesEntry_DoNotUse_default_instance_;
    new (ptr) ::calmcar_map::proto::map::MapFrame_LanesEntry_DoNotUse();
  }
  ::calmcar_map::proto::map::MapFrame_LanesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapFrame_LanesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapFrame_LanesEntry_DoNotUse}, {
      &protobuf_map_2eproto::scc_info_Lane.base,}};

static void InitDefaultsMapFrame_LaneLinesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmcar_map::proto::map::_MapFrame_LaneLinesEntry_DoNotUse_default_instance_;
    new (ptr) ::calmcar_map::proto::map::MapFrame_LaneLinesEntry_DoNotUse();
  }
  ::calmcar_map::proto::map::MapFrame_LaneLinesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapFrame_LaneLinesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapFrame_LaneLinesEntry_DoNotUse}, {
      &protobuf_map_2eproto::scc_info_LaneLine.base,}};

static void InitDefaultsMapFrame_LandMarkEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmcar_map::proto::map::_MapFrame_LandMarkEntry_DoNotUse_default_instance_;
    new (ptr) ::calmcar_map::proto::map::MapFrame_LandMarkEntry_DoNotUse();
  }
  ::calmcar_map::proto::map::MapFrame_LandMarkEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapFrame_LandMarkEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapFrame_LandMarkEntry_DoNotUse}, {
      &protobuf_map_2eproto::scc_info_LandMark.base,}};

static void InitDefaultsMapFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::calmcar_map::proto::map::_MapFrame_default_instance_;
    new (ptr) ::calmcar_map::proto::map::MapFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar_map::proto::map::MapFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_MapFrame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsMapFrame}, {
      &protobuf_map_2eproto::scc_info_Header.base,
      &protobuf_map_2eproto::scc_info_MapFrame_LanesEntry_DoNotUse.base,
      &protobuf_map_2eproto::scc_info_MapFrame_LaneLinesEntry_DoNotUse.base,
      &protobuf_map_2eproto::scc_info_MapFrame_LandMarkEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Lane.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneLine.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LandMark.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Header.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapFrame_LanesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapFrame_LaneLinesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapFrame_LandMarkEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapFrame.base);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::Lane, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::Lane, lane_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::Lane, waypoints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::Lane, left_lane_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::Lane, right_lane_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::Lane, left_lane_line_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::Lane, right_lane_line_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::Lane, lane_turn_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::LaneLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::LaneLine, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::LaneLine, lane_line_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::LaneLine, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::LaneLine, lane_line_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::LandMark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::LandMark, landmark_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::LandMark, landmark_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::LandMark, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::LandMark, boundingbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::LandMark, lane_keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::Header, timestamp_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::Header, timestamp_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::Header, timestamp_last_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::Header, rolling_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::Header, angle_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::MapFrame_LanesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::MapFrame_LanesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::MapFrame_LanesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::MapFrame_LanesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::MapFrame_LaneLinesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::MapFrame_LaneLinesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::MapFrame_LaneLinesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::MapFrame_LaneLinesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::MapFrame_LandMarkEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::MapFrame_LandMarkEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::MapFrame_LandMarkEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::MapFrame_LandMarkEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::MapFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::MapFrame, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::MapFrame, lanes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::MapFrame, lane_lines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar_map::proto::map::MapFrame, land_mark_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::calmcar_map::proto::map::Lane)},
  { 13, -1, sizeof(::calmcar_map::proto::map::LaneLine)},
  { 22, -1, sizeof(::calmcar_map::proto::map::LandMark)},
  { 32, -1, sizeof(::calmcar_map::proto::map::Header)},
  { 42, 49, sizeof(::calmcar_map::proto::map::MapFrame_LanesEntry_DoNotUse)},
  { 51, 58, sizeof(::calmcar_map::proto::map::MapFrame_LaneLinesEntry_DoNotUse)},
  { 60, 67, sizeof(::calmcar_map::proto::map::MapFrame_LandMarkEntry_DoNotUse)},
  { 69, -1, sizeof(::calmcar_map::proto::map::MapFrame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar_map::proto::map::_Lane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar_map::proto::map::_LaneLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar_map::proto::map::_LandMark_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar_map::proto::map::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar_map::proto::map::_MapFrame_LanesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar_map::proto::map::_MapFrame_LaneLinesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar_map::proto::map::_MapFrame_LandMarkEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar_map::proto::map::_MapFrame_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "map.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tmap.proto\022\025calmcar_map.proto.map\032\016geom"
      "etry.proto\"\335\002\n\004Lane\022\013\n\003key\030\001 \001(\004\022\022\n\nlane"
      "_index\030\002 \001(\004\0227\n\twaypoints\030\003 \001(\0132$.calmca"
      "r_map.proto.geometry.Polyline\022\025\n\rleft_la"
      "ne_key\030\004 \001(\004\022\026\n\016right_lane_key\030\005 \001(\004\022\032\n\022"
      "left_lane_line_key\030\006 \001(\004\022\033\n\023right_lane_l"
      "ine_key\030\007 \001(\004\0227\n\tlane_turn\030\010 \001(\0162$.calmc"
      "ar_map.proto.map.Lane.LaneTurn\"Z\n\010LaneTu"
      "rn\022\020\n\014TURN_UNKNOWN\020\000\022\014\n\010STRAIGHT\020\001\022\010\n\004LE"
      "FT\020\002\022\t\n\005RIGHT\020\003\022\t\n\005UTURN\020\004\022\016\n\nFORBIDTURN"
      "\020\005\"\223\005\n\010LaneLine\022\013\n\003key\030\001 \001(\004\022\027\n\017lane_lin"
      "e_index\030\002 \001(\004\0224\n\006points\030\003 \001(\0132$.calmcar_"
      "map.proto.geometry.Polyline\022D\n\016lane_line"
      "_type\030\004 \001(\0162,.calmcar_map.proto.map.Lane"
      "Line.LaneLineType\"\344\003\n\014LaneLineType\022\016\n\nNO"
      "_MARKING\020\000\022\024\n\020LONG_DASHED_LINE\020\001\022\025\n\021DOUB"
      "LE_SOLID_LINE\020\002\022\025\n\021SINGLE_SOLID_LINE\020\003\022\032"
      "\n\026SOLID_LINE_DASHED_LINE\020\004\022\032\n\026DASHED_LIN"
      "E_SOLID_LINE\020\005\022\025\n\021SHORT_DASHED_LINE\020\006\022\027\n"
      "\023SHADED_AREA_MARKING\020\007\022\021\n\rDASHED_BLOCKS\020"
      "\010\022\026\n\022DOUBLE_DASHED_LINE\020\t\022\022\n\016CROSSING_AL"
      "ERT\020\n\022\010\n\004CURB\020\013\022\r\n\tWALL_FLAT\020\014\022\017\n\013WALL_T"
      "UNNEL\020\r\022\022\n\016BARRIER_JERSEY\020\016\022\021\n\rBARRIER_S"
      "OUND\020\017\022\021\n\rBARRIER_CABLE\020\020\022\r\n\tGUARDRAIL\020\021"
      "\022\t\n\005FENCE\020\022\022\024\n\020CURB_TRAVERSABLE\020\023\022\017\n\013END"
      "_OF_ROAD\020\024\022\t\n\005CLIFF\020\025\022\t\n\005DITCH\020\026\022\021\n\rOTHE"
      "R_BARRIER\020\036\022\013\n\007UNKNOWN\020\037\"\334\002\n\010LandMark\022\024\n"
      "\014landmark_key\030\001 \001(\004\022C\n\rlandmark_type\030\002 \001"
      "(\0162,.calmcar_map.proto.map.LandMark.Land"
      "MarkType\0223\n\006points\030\003 \001(\0132#.calmcar_map.p"
      "roto.geometry.Polygon\0228\n\013boundingBox\030\004 \001"
      "(\0132#.calmcar_map.proto.geometry.Polygon\022"
      "\021\n\tlane_keys\030\005 \003(\004\"s\n\014LandMarkType\022\010\n\004SI"
      "GN\020\000\022\010\n\004POLE\020\001\022\013\n\007MARKING\020\002\022\020\n\014TRAFFICLI"
      "GHT\020\003\022\010\n\004WALL\020\004\022\016\n\nPROTRUSION\020\005\022\t\n\005CHAIN"
      "\020\006\022\013\n\007INVALID\020\007\"}\n\006Header\022\024\n\014timestamp_i"
      "n\030\001 \001(\004\022\025\n\rtimestamp_age\030\002 \001(\004\022\026\n\016timest"
      "amp_last\030\003 \001(\004\022\027\n\017rolling_counter\030\004 \001(\r\022"
      "\025\n\rangle_heading\030\005 \001(\005\"\352\003\n\010MapFrame\022-\n\006h"
      "eader\030\001 \001(\0132\035.calmcar_map.proto.map.Head"
      "er\0229\n\005lanes\030\002 \003(\0132*.calmcar_map.proto.ma"
      "p.MapFrame.LanesEntry\022B\n\nlane_lines\030\003 \003("
      "\0132..calmcar_map.proto.map.MapFrame.LaneL"
      "inesEntry\022@\n\tland_mark\030\004 \003(\0132-.calmcar_m"
      "ap.proto.map.MapFrame.LandMarkEntry\032I\n\nL"
      "anesEntry\022\013\n\003key\030\001 \001(\004\022*\n\005value\030\002 \001(\0132\033."
      "calmcar_map.proto.map.Lane:\0028\001\032Q\n\016LaneLi"
      "nesEntry\022\013\n\003key\030\001 \001(\004\022.\n\005value\030\002 \001(\0132\037.c"
      "almcar_map.proto.map.LaneLine:\0028\001\032P\n\rLan"
      "dMarkEntry\022\013\n\003key\030\001 \001(\004\022.\n\005value\030\002 \001(\0132\037"
      ".calmcar_map.proto.map.LandMark:\0028\001B\027Z\025c"
      "almcar_map/proto/mapb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2068);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map.proto", &protobuf_RegisterTypes);
  ::protobuf_geometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_map_2eproto
namespace calmcar_map {
namespace proto {
namespace map {
const ::google::protobuf::EnumDescriptor* Lane_LaneTurn_descriptor() {
  protobuf_map_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_2eproto::file_level_enum_descriptors[0];
}
bool Lane_LaneTurn_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LaneTurn Lane::TURN_UNKNOWN;
const Lane_LaneTurn Lane::STRAIGHT;
const Lane_LaneTurn Lane::LEFT;
const Lane_LaneTurn Lane::RIGHT;
const Lane_LaneTurn Lane::UTURN;
const Lane_LaneTurn Lane::FORBIDTURN;
const Lane_LaneTurn Lane::LaneTurn_MIN;
const Lane_LaneTurn Lane::LaneTurn_MAX;
const int Lane::LaneTurn_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LaneLine_LaneLineType_descriptor() {
  protobuf_map_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_2eproto::file_level_enum_descriptors[1];
}
bool LaneLine_LaneLineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneLine_LaneLineType LaneLine::NO_MARKING;
const LaneLine_LaneLineType LaneLine::LONG_DASHED_LINE;
const LaneLine_LaneLineType LaneLine::DOUBLE_SOLID_LINE;
const LaneLine_LaneLineType LaneLine::SINGLE_SOLID_LINE;
const LaneLine_LaneLineType LaneLine::SOLID_LINE_DASHED_LINE;
const LaneLine_LaneLineType LaneLine::DASHED_LINE_SOLID_LINE;
const LaneLine_LaneLineType LaneLine::SHORT_DASHED_LINE;
const LaneLine_LaneLineType LaneLine::SHADED_AREA_MARKING;
const LaneLine_LaneLineType LaneLine::DASHED_BLOCKS;
const LaneLine_LaneLineType LaneLine::DOUBLE_DASHED_LINE;
const LaneLine_LaneLineType LaneLine::CROSSING_ALERT;
const LaneLine_LaneLineType LaneLine::CURB;
const LaneLine_LaneLineType LaneLine::WALL_FLAT;
const LaneLine_LaneLineType LaneLine::WALL_TUNNEL;
const LaneLine_LaneLineType LaneLine::BARRIER_JERSEY;
const LaneLine_LaneLineType LaneLine::BARRIER_SOUND;
const LaneLine_LaneLineType LaneLine::BARRIER_CABLE;
const LaneLine_LaneLineType LaneLine::GUARDRAIL;
const LaneLine_LaneLineType LaneLine::FENCE;
const LaneLine_LaneLineType LaneLine::CURB_TRAVERSABLE;
const LaneLine_LaneLineType LaneLine::END_OF_ROAD;
const LaneLine_LaneLineType LaneLine::CLIFF;
const LaneLine_LaneLineType LaneLine::DITCH;
const LaneLine_LaneLineType LaneLine::OTHER_BARRIER;
const LaneLine_LaneLineType LaneLine::UNKNOWN;
const LaneLine_LaneLineType LaneLine::LaneLineType_MIN;
const LaneLine_LaneLineType LaneLine::LaneLineType_MAX;
const int LaneLine::LaneLineType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LandMark_LandMarkType_descriptor() {
  protobuf_map_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_2eproto::file_level_enum_descriptors[2];
}
bool LandMark_LandMarkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LandMark_LandMarkType LandMark::SIGN;
const LandMark_LandMarkType LandMark::POLE;
const LandMark_LandMarkType LandMark::MARKING;
const LandMark_LandMarkType LandMark::TRAFFICLIGHT;
const LandMark_LandMarkType LandMark::WALL;
const LandMark_LandMarkType LandMark::PROTRUSION;
const LandMark_LandMarkType LandMark::CHAIN;
const LandMark_LandMarkType LandMark::INVALID;
const LandMark_LandMarkType LandMark::LandMarkType_MIN;
const LandMark_LandMarkType LandMark::LandMarkType_MAX;
const int LandMark::LandMarkType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Lane::InitAsDefaultInstance() {
  ::calmcar_map::proto::map::_Lane_default_instance_._instance.get_mutable()->waypoints_ = const_cast< ::calmcar_map::proto::geometry::Polyline*>(
      ::calmcar_map::proto::geometry::Polyline::internal_default_instance());
}
void Lane::clear_waypoints() {
  if (GetArenaNoVirtual() == NULL && waypoints_ != NULL) {
    delete waypoints_;
  }
  waypoints_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane::kKeyFieldNumber;
const int Lane::kLaneIndexFieldNumber;
const int Lane::kWaypointsFieldNumber;
const int Lane::kLeftLaneKeyFieldNumber;
const int Lane::kRightLaneKeyFieldNumber;
const int Lane::kLeftLaneLineKeyFieldNumber;
const int Lane::kRightLaneLineKeyFieldNumber;
const int Lane::kLaneTurnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane::Lane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_2eproto::scc_info_Lane.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar_map.proto.map.Lane)
}
Lane::Lane(const Lane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_waypoints()) {
    waypoints_ = new ::calmcar_map::proto::geometry::Polyline(*from.waypoints_);
  } else {
    waypoints_ = NULL;
  }
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_turn_) -
    reinterpret_cast<char*>(&key_)) + sizeof(lane_turn_));
  // @@protoc_insertion_point(copy_constructor:calmcar_map.proto.map.Lane)
}

void Lane::SharedCtor() {
  ::memset(&waypoints_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_turn_) -
      reinterpret_cast<char*>(&waypoints_)) + sizeof(lane_turn_));
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:calmcar_map.proto.map.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
  if (this != internal_default_instance()) delete waypoints_;
}

void Lane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Lane::descriptor() {
  ::protobuf_map_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane& Lane::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_2eproto::scc_info_Lane.base);
  return *internal_default_instance();
}


void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar_map.proto.map.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && waypoints_ != NULL) {
    delete waypoints_;
  }
  waypoints_ = NULL;
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_turn_) -
      reinterpret_cast<char*>(&key_)) + sizeof(lane_turn_));
  _internal_metadata_.Clear();
}

bool Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar_map.proto.map.Lane)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lane_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lane_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar_map.proto.geometry.Polyline waypoints = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_waypoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 left_lane_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &left_lane_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 right_lane_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &right_lane_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 left_lane_line_key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &left_lane_line_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 right_lane_line_key = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &right_lane_line_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar_map.proto.map.Lane.LaneTurn lane_turn = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lane_turn(static_cast< ::calmcar_map::proto::map::Lane_LaneTurn >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar_map.proto.map.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar_map.proto.map.Lane)
  return false;
#undef DO_
}

void Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar_map.proto.map.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }

  // uint64 lane_index = 2;
  if (this->lane_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lane_index(), output);
  }

  // .calmcar_map.proto.geometry.Polyline waypoints = 3;
  if (this->has_waypoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_waypoints(), output);
  }

  // uint64 left_lane_key = 4;
  if (this->left_lane_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->left_lane_key(), output);
  }

  // uint64 right_lane_key = 5;
  if (this->right_lane_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->right_lane_key(), output);
  }

  // uint64 left_lane_line_key = 6;
  if (this->left_lane_line_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->left_lane_line_key(), output);
  }

  // uint64 right_lane_line_key = 7;
  if (this->right_lane_line_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->right_lane_line_key(), output);
  }

  // .calmcar_map.proto.map.Lane.LaneTurn lane_turn = 8;
  if (this->lane_turn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->lane_turn(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar_map.proto.map.Lane)
}

::google::protobuf::uint8* Lane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar_map.proto.map.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->key(), target);
  }

  // uint64 lane_index = 2;
  if (this->lane_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lane_index(), target);
  }

  // .calmcar_map.proto.geometry.Polyline waypoints = 3;
  if (this->has_waypoints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_waypoints(), deterministic, target);
  }

  // uint64 left_lane_key = 4;
  if (this->left_lane_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->left_lane_key(), target);
  }

  // uint64 right_lane_key = 5;
  if (this->right_lane_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->right_lane_key(), target);
  }

  // uint64 left_lane_line_key = 6;
  if (this->left_lane_line_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->left_lane_line_key(), target);
  }

  // uint64 right_lane_line_key = 7;
  if (this->right_lane_line_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->right_lane_line_key(), target);
  }

  // .calmcar_map.proto.map.Lane.LaneTurn lane_turn = 8;
  if (this->lane_turn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->lane_turn(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar_map.proto.map.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar_map.proto.map.Lane)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .calmcar_map.proto.geometry.Polyline waypoints = 3;
  if (this->has_waypoints()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *waypoints_);
  }

  // uint64 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->key());
  }

  // uint64 lane_index = 2;
  if (this->lane_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lane_index());
  }

  // uint64 left_lane_key = 4;
  if (this->left_lane_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->left_lane_key());
  }

  // uint64 right_lane_key = 5;
  if (this->right_lane_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->right_lane_key());
  }

  // uint64 left_lane_line_key = 6;
  if (this->left_lane_line_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->left_lane_line_key());
  }

  // uint64 right_lane_line_key = 7;
  if (this->right_lane_line_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->right_lane_line_key());
  }

  // .calmcar_map.proto.map.Lane.LaneTurn lane_turn = 8;
  if (this->lane_turn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_turn());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar_map.proto.map.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar_map.proto.map.Lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar_map.proto.map.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar_map.proto.map.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_waypoints()) {
    mutable_waypoints()->::calmcar_map::proto::geometry::Polyline::MergeFrom(from.waypoints());
  }
  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.lane_index() != 0) {
    set_lane_index(from.lane_index());
  }
  if (from.left_lane_key() != 0) {
    set_left_lane_key(from.left_lane_key());
  }
  if (from.right_lane_key() != 0) {
    set_right_lane_key(from.right_lane_key());
  }
  if (from.left_lane_line_key() != 0) {
    set_left_lane_line_key(from.left_lane_line_key());
  }
  if (from.right_lane_line_key() != 0) {
    set_right_lane_line_key(from.right_lane_line_key());
  }
  if (from.lane_turn() != 0) {
    set_lane_turn(from.lane_turn());
  }
}

void Lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar_map.proto.map.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar_map.proto.map.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::Swap(Lane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane::InternalSwap(Lane* other) {
  using std::swap;
  swap(waypoints_, other->waypoints_);
  swap(key_, other->key_);
  swap(lane_index_, other->lane_index_);
  swap(left_lane_key_, other->left_lane_key_);
  swap(right_lane_key_, other->right_lane_key_);
  swap(left_lane_line_key_, other->left_lane_line_key_);
  swap(right_lane_line_key_, other->right_lane_line_key_);
  swap(lane_turn_, other->lane_turn_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  protobuf_map_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneLine::InitAsDefaultInstance() {
  ::calmcar_map::proto::map::_LaneLine_default_instance_._instance.get_mutable()->points_ = const_cast< ::calmcar_map::proto::geometry::Polyline*>(
      ::calmcar_map::proto::geometry::Polyline::internal_default_instance());
}
void LaneLine::clear_points() {
  if (GetArenaNoVirtual() == NULL && points_ != NULL) {
    delete points_;
  }
  points_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneLine::kKeyFieldNumber;
const int LaneLine::kLaneLineIndexFieldNumber;
const int LaneLine::kPointsFieldNumber;
const int LaneLine::kLaneLineTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneLine::LaneLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_2eproto::scc_info_LaneLine.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar_map.proto.map.LaneLine)
}
LaneLine::LaneLine(const LaneLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_points()) {
    points_ = new ::calmcar_map::proto::geometry::Polyline(*from.points_);
  } else {
    points_ = NULL;
  }
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_line_type_) -
    reinterpret_cast<char*>(&key_)) + sizeof(lane_line_type_));
  // @@protoc_insertion_point(copy_constructor:calmcar_map.proto.map.LaneLine)
}

void LaneLine::SharedCtor() {
  ::memset(&points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_line_type_) -
      reinterpret_cast<char*>(&points_)) + sizeof(lane_line_type_));
}

LaneLine::~LaneLine() {
  // @@protoc_insertion_point(destructor:calmcar_map.proto.map.LaneLine)
  SharedDtor();
}

void LaneLine::SharedDtor() {
  if (this != internal_default_instance()) delete points_;
}

void LaneLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneLine::descriptor() {
  ::protobuf_map_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneLine& LaneLine::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_2eproto::scc_info_LaneLine.base);
  return *internal_default_instance();
}


void LaneLine::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar_map.proto.map.LaneLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && points_ != NULL) {
    delete points_;
  }
  points_ = NULL;
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_line_type_) -
      reinterpret_cast<char*>(&key_)) + sizeof(lane_line_type_));
  _internal_metadata_.Clear();
}

bool LaneLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar_map.proto.map.LaneLine)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lane_line_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lane_line_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar_map.proto.geometry.Polyline points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar_map.proto.map.LaneLine.LaneLineType lane_line_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lane_line_type(static_cast< ::calmcar_map::proto::map::LaneLine_LaneLineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar_map.proto.map.LaneLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar_map.proto.map.LaneLine)
  return false;
#undef DO_
}

void LaneLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar_map.proto.map.LaneLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }

  // uint64 lane_line_index = 2;
  if (this->lane_line_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lane_line_index(), output);
  }

  // .calmcar_map.proto.geometry.Polyline points = 3;
  if (this->has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_points(), output);
  }

  // .calmcar_map.proto.map.LaneLine.LaneLineType lane_line_type = 4;
  if (this->lane_line_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->lane_line_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar_map.proto.map.LaneLine)
}

::google::protobuf::uint8* LaneLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar_map.proto.map.LaneLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->key(), target);
  }

  // uint64 lane_line_index = 2;
  if (this->lane_line_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lane_line_index(), target);
  }

  // .calmcar_map.proto.geometry.Polyline points = 3;
  if (this->has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_points(), deterministic, target);
  }

  // .calmcar_map.proto.map.LaneLine.LaneLineType lane_line_type = 4;
  if (this->lane_line_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->lane_line_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar_map.proto.map.LaneLine)
  return target;
}

size_t LaneLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar_map.proto.map.LaneLine)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .calmcar_map.proto.geometry.Polyline points = 3;
  if (this->has_points()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *points_);
  }

  // uint64 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->key());
  }

  // uint64 lane_line_index = 2;
  if (this->lane_line_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lane_line_index());
  }

  // .calmcar_map.proto.map.LaneLine.LaneLineType lane_line_type = 4;
  if (this->lane_line_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_line_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar_map.proto.map.LaneLine)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar_map.proto.map.LaneLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar_map.proto.map.LaneLine)
    MergeFrom(*source);
  }
}

void LaneLine::MergeFrom(const LaneLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar_map.proto.map.LaneLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_points()) {
    mutable_points()->::calmcar_map::proto::geometry::Polyline::MergeFrom(from.points());
  }
  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.lane_line_index() != 0) {
    set_lane_line_index(from.lane_line_index());
  }
  if (from.lane_line_type() != 0) {
    set_lane_line_type(from.lane_line_type());
  }
}

void LaneLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar_map.proto.map.LaneLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneLine::CopyFrom(const LaneLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar_map.proto.map.LaneLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneLine::IsInitialized() const {
  return true;
}

void LaneLine::Swap(LaneLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneLine::InternalSwap(LaneLine* other) {
  using std::swap;
  swap(points_, other->points_);
  swap(key_, other->key_);
  swap(lane_line_index_, other->lane_line_index_);
  swap(lane_line_type_, other->lane_line_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneLine::GetMetadata() const {
  protobuf_map_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LandMark::InitAsDefaultInstance() {
  ::calmcar_map::proto::map::_LandMark_default_instance_._instance.get_mutable()->points_ = const_cast< ::calmcar_map::proto::geometry::Polygon*>(
      ::calmcar_map::proto::geometry::Polygon::internal_default_instance());
  ::calmcar_map::proto::map::_LandMark_default_instance_._instance.get_mutable()->boundingbox_ = const_cast< ::calmcar_map::proto::geometry::Polygon*>(
      ::calmcar_map::proto::geometry::Polygon::internal_default_instance());
}
void LandMark::clear_points() {
  if (GetArenaNoVirtual() == NULL && points_ != NULL) {
    delete points_;
  }
  points_ = NULL;
}
void LandMark::clear_boundingbox() {
  if (GetArenaNoVirtual() == NULL && boundingbox_ != NULL) {
    delete boundingbox_;
  }
  boundingbox_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandMark::kLandmarkKeyFieldNumber;
const int LandMark::kLandmarkTypeFieldNumber;
const int LandMark::kPointsFieldNumber;
const int LandMark::kBoundingBoxFieldNumber;
const int LandMark::kLaneKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandMark::LandMark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_2eproto::scc_info_LandMark.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar_map.proto.map.LandMark)
}
LandMark::LandMark(const LandMark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lane_keys_(from.lane_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_points()) {
    points_ = new ::calmcar_map::proto::geometry::Polygon(*from.points_);
  } else {
    points_ = NULL;
  }
  if (from.has_boundingbox()) {
    boundingbox_ = new ::calmcar_map::proto::geometry::Polygon(*from.boundingbox_);
  } else {
    boundingbox_ = NULL;
  }
  ::memcpy(&landmark_key_, &from.landmark_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&landmark_type_) -
    reinterpret_cast<char*>(&landmark_key_)) + sizeof(landmark_type_));
  // @@protoc_insertion_point(copy_constructor:calmcar_map.proto.map.LandMark)
}

void LandMark::SharedCtor() {
  ::memset(&points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&landmark_type_) -
      reinterpret_cast<char*>(&points_)) + sizeof(landmark_type_));
}

LandMark::~LandMark() {
  // @@protoc_insertion_point(destructor:calmcar_map.proto.map.LandMark)
  SharedDtor();
}

void LandMark::SharedDtor() {
  if (this != internal_default_instance()) delete points_;
  if (this != internal_default_instance()) delete boundingbox_;
}

void LandMark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LandMark::descriptor() {
  ::protobuf_map_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LandMark& LandMark::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_2eproto::scc_info_LandMark.base);
  return *internal_default_instance();
}


void LandMark::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar_map.proto.map.LandMark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_keys_.Clear();
  if (GetArenaNoVirtual() == NULL && points_ != NULL) {
    delete points_;
  }
  points_ = NULL;
  if (GetArenaNoVirtual() == NULL && boundingbox_ != NULL) {
    delete boundingbox_;
  }
  boundingbox_ = NULL;
  ::memset(&landmark_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&landmark_type_) -
      reinterpret_cast<char*>(&landmark_key_)) + sizeof(landmark_type_));
  _internal_metadata_.Clear();
}

bool LandMark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar_map.proto.map.LandMark)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 landmark_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &landmark_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar_map.proto.map.LandMark.LandMarkType landmark_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_landmark_type(static_cast< ::calmcar_map::proto::map::LandMark_LandMarkType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar_map.proto.geometry.Polygon points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar_map.proto.geometry.Polygon boundingBox = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_boundingbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 lane_keys = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_lane_keys())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 42u, input, this->mutable_lane_keys())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar_map.proto.map.LandMark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar_map.proto.map.LandMark)
  return false;
#undef DO_
}

void LandMark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar_map.proto.map.LandMark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 landmark_key = 1;
  if (this->landmark_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->landmark_key(), output);
  }

  // .calmcar_map.proto.map.LandMark.LandMarkType landmark_type = 2;
  if (this->landmark_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->landmark_type(), output);
  }

  // .calmcar_map.proto.geometry.Polygon points = 3;
  if (this->has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_points(), output);
  }

  // .calmcar_map.proto.geometry.Polygon boundingBox = 4;
  if (this->has_boundingbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_boundingbox(), output);
  }

  // repeated uint64 lane_keys = 5;
  if (this->lane_keys_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _lane_keys_cached_byte_size_));
  }
  for (int i = 0, n = this->lane_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->lane_keys(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar_map.proto.map.LandMark)
}

::google::protobuf::uint8* LandMark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar_map.proto.map.LandMark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 landmark_key = 1;
  if (this->landmark_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->landmark_key(), target);
  }

  // .calmcar_map.proto.map.LandMark.LandMarkType landmark_type = 2;
  if (this->landmark_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->landmark_type(), target);
  }

  // .calmcar_map.proto.geometry.Polygon points = 3;
  if (this->has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_points(), deterministic, target);
  }

  // .calmcar_map.proto.geometry.Polygon boundingBox = 4;
  if (this->has_boundingbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_boundingbox(), deterministic, target);
  }

  // repeated uint64 lane_keys = 5;
  if (this->lane_keys_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _lane_keys_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->lane_keys_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar_map.proto.map.LandMark)
  return target;
}

size_t LandMark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar_map.proto.map.LandMark)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 lane_keys = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->lane_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _lane_keys_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .calmcar_map.proto.geometry.Polygon points = 3;
  if (this->has_points()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *points_);
  }

  // .calmcar_map.proto.geometry.Polygon boundingBox = 4;
  if (this->has_boundingbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *boundingbox_);
  }

  // uint64 landmark_key = 1;
  if (this->landmark_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->landmark_key());
  }

  // .calmcar_map.proto.map.LandMark.LandMarkType landmark_type = 2;
  if (this->landmark_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->landmark_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandMark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar_map.proto.map.LandMark)
  GOOGLE_DCHECK_NE(&from, this);
  const LandMark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LandMark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar_map.proto.map.LandMark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar_map.proto.map.LandMark)
    MergeFrom(*source);
  }
}

void LandMark::MergeFrom(const LandMark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar_map.proto.map.LandMark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_keys_.MergeFrom(from.lane_keys_);
  if (from.has_points()) {
    mutable_points()->::calmcar_map::proto::geometry::Polygon::MergeFrom(from.points());
  }
  if (from.has_boundingbox()) {
    mutable_boundingbox()->::calmcar_map::proto::geometry::Polygon::MergeFrom(from.boundingbox());
  }
  if (from.landmark_key() != 0) {
    set_landmark_key(from.landmark_key());
  }
  if (from.landmark_type() != 0) {
    set_landmark_type(from.landmark_type());
  }
}

void LandMark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar_map.proto.map.LandMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandMark::CopyFrom(const LandMark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar_map.proto.map.LandMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandMark::IsInitialized() const {
  return true;
}

void LandMark::Swap(LandMark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandMark::InternalSwap(LandMark* other) {
  using std::swap;
  lane_keys_.InternalSwap(&other->lane_keys_);
  swap(points_, other->points_);
  swap(boundingbox_, other->boundingbox_);
  swap(landmark_key_, other->landmark_key_);
  swap(landmark_type_, other->landmark_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LandMark::GetMetadata() const {
  protobuf_map_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kTimestampInFieldNumber;
const int Header::kTimestampAgeFieldNumber;
const int Header::kTimestampLastFieldNumber;
const int Header::kRollingCounterFieldNumber;
const int Header::kAngleHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_2eproto::scc_info_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar_map.proto.map.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_in_, &from.timestamp_in_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_heading_) -
    reinterpret_cast<char*>(&timestamp_in_)) + sizeof(angle_heading_));
  // @@protoc_insertion_point(copy_constructor:calmcar_map.proto.map.Header)
}

void Header::SharedCtor() {
  ::memset(&timestamp_in_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_heading_) -
      reinterpret_cast<char*>(&timestamp_in_)) + sizeof(angle_heading_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:calmcar_map.proto.map.Header)
  SharedDtor();
}

void Header::SharedDtor() {
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_map_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_2eproto::scc_info_Header.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar_map.proto.map.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_in_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_heading_) -
      reinterpret_cast<char*>(&timestamp_in_)) + sizeof(angle_heading_));
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar_map.proto.map.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp_in = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp_age = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp_last = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rolling_counter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolling_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 angle_heading = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar_map.proto.map.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar_map.proto.map.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar_map.proto.map.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp_in = 1;
  if (this->timestamp_in() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_in(), output);
  }

  // uint64 timestamp_age = 2;
  if (this->timestamp_age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp_age(), output);
  }

  // uint64 timestamp_last = 3;
  if (this->timestamp_last() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp_last(), output);
  }

  // uint32 rolling_counter = 4;
  if (this->rolling_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rolling_counter(), output);
  }

  // int32 angle_heading = 5;
  if (this->angle_heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->angle_heading(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar_map.proto.map.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar_map.proto.map.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp_in = 1;
  if (this->timestamp_in() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_in(), target);
  }

  // uint64 timestamp_age = 2;
  if (this->timestamp_age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp_age(), target);
  }

  // uint64 timestamp_last = 3;
  if (this->timestamp_last() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp_last(), target);
  }

  // uint32 rolling_counter = 4;
  if (this->rolling_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rolling_counter(), target);
  }

  // int32 angle_heading = 5;
  if (this->angle_heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->angle_heading(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar_map.proto.map.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar_map.proto.map.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp_in = 1;
  if (this->timestamp_in() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_in());
  }

  // uint64 timestamp_age = 2;
  if (this->timestamp_age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_age());
  }

  // uint64 timestamp_last = 3;
  if (this->timestamp_last() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_last());
  }

  // uint32 rolling_counter = 4;
  if (this->rolling_counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rolling_counter());
  }

  // int32 angle_heading = 5;
  if (this->angle_heading() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->angle_heading());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar_map.proto.map.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar_map.proto.map.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar_map.proto.map.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar_map.proto.map.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp_in() != 0) {
    set_timestamp_in(from.timestamp_in());
  }
  if (from.timestamp_age() != 0) {
    set_timestamp_age(from.timestamp_age());
  }
  if (from.timestamp_last() != 0) {
    set_timestamp_last(from.timestamp_last());
  }
  if (from.rolling_counter() != 0) {
    set_rolling_counter(from.rolling_counter());
  }
  if (from.angle_heading() != 0) {
    set_angle_heading(from.angle_heading());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar_map.proto.map.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar_map.proto.map.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  swap(timestamp_in_, other->timestamp_in_);
  swap(timestamp_age_, other->timestamp_age_);
  swap(timestamp_last_, other->timestamp_last_);
  swap(rolling_counter_, other->rolling_counter_);
  swap(angle_heading_, other->angle_heading_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_map_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

MapFrame_LanesEntry_DoNotUse::MapFrame_LanesEntry_DoNotUse() {}
MapFrame_LanesEntry_DoNotUse::MapFrame_LanesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapFrame_LanesEntry_DoNotUse::MergeFrom(const MapFrame_LanesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapFrame_LanesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_map_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_2eproto::file_level_metadata[4];
}
void MapFrame_LanesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapFrame_LaneLinesEntry_DoNotUse::MapFrame_LaneLinesEntry_DoNotUse() {}
MapFrame_LaneLinesEntry_DoNotUse::MapFrame_LaneLinesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapFrame_LaneLinesEntry_DoNotUse::MergeFrom(const MapFrame_LaneLinesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapFrame_LaneLinesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_map_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_2eproto::file_level_metadata[5];
}
void MapFrame_LaneLinesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapFrame_LandMarkEntry_DoNotUse::MapFrame_LandMarkEntry_DoNotUse() {}
MapFrame_LandMarkEntry_DoNotUse::MapFrame_LandMarkEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapFrame_LandMarkEntry_DoNotUse::MergeFrom(const MapFrame_LandMarkEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapFrame_LandMarkEntry_DoNotUse::GetMetadata() const {
  ::protobuf_map_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_2eproto::file_level_metadata[6];
}
void MapFrame_LandMarkEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void MapFrame::InitAsDefaultInstance() {
  ::calmcar_map::proto::map::_MapFrame_default_instance_._instance.get_mutable()->header_ = const_cast< ::calmcar_map::proto::map::Header*>(
      ::calmcar_map::proto::map::Header::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapFrame::kHeaderFieldNumber;
const int MapFrame::kLanesFieldNumber;
const int MapFrame::kLaneLinesFieldNumber;
const int MapFrame::kLandMarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapFrame::MapFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_map_2eproto::scc_info_MapFrame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar_map.proto.map.MapFrame)
}
MapFrame::MapFrame(const MapFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lanes_.MergeFrom(from.lanes_);
  lane_lines_.MergeFrom(from.lane_lines_);
  land_mark_.MergeFrom(from.land_mark_);
  if (from.has_header()) {
    header_ = new ::calmcar_map::proto::map::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:calmcar_map.proto.map.MapFrame)
}

void MapFrame::SharedCtor() {
  header_ = NULL;
}

MapFrame::~MapFrame() {
  // @@protoc_insertion_point(destructor:calmcar_map.proto.map.MapFrame)
  SharedDtor();
}

void MapFrame::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void MapFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapFrame::descriptor() {
  ::protobuf_map_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapFrame& MapFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_map_2eproto::scc_info_MapFrame.base);
  return *internal_default_instance();
}


void MapFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar_map.proto.map.MapFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lanes_.Clear();
  lane_lines_.Clear();
  land_mark_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool MapFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar_map.proto.map.MapFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar_map.proto.map.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, .calmcar_map.proto.map.Lane> lanes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          MapFrame_LanesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapFrame_LanesEntry_DoNotUse,
              ::google::protobuf::uint64, ::calmcar_map::proto::map::Lane,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::Lane > > parser(&lanes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, .calmcar_map.proto.map.LaneLine> lane_lines = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          MapFrame_LaneLinesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapFrame_LaneLinesEntry_DoNotUse,
              ::google::protobuf::uint64, ::calmcar_map::proto::map::LaneLine,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LaneLine > > parser(&lane_lines_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, .calmcar_map.proto.map.LandMark> land_mark = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          MapFrame_LandMarkEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapFrame_LandMarkEntry_DoNotUse,
              ::google::protobuf::uint64, ::calmcar_map::proto::map::LandMark,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LandMark > > parser(&land_mark_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar_map.proto.map.MapFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar_map.proto.map.MapFrame)
  return false;
#undef DO_
}

void MapFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar_map.proto.map.MapFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar_map.proto.map.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // map<uint64, .calmcar_map.proto.map.Lane> lanes = 2;
  if (!this->lanes().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::Lane >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->lanes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->lanes().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::Lane >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::Lane >::const_iterator
          it = this->lanes().begin();
          it != this->lanes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MapFrame_LanesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(lanes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::std::unique_ptr<MapFrame_LanesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::Lane >::const_iterator
          it = this->lanes().begin();
          it != this->lanes().end(); ++it) {
        entry.reset(lanes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  // map<uint64, .calmcar_map.proto.map.LaneLine> lane_lines = 3;
  if (!this->lane_lines().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LaneLine >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->lane_lines().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->lane_lines().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LaneLine >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LaneLine >::const_iterator
          it = this->lane_lines().begin();
          it != this->lane_lines().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MapFrame_LaneLinesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(lane_lines_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::std::unique_ptr<MapFrame_LaneLinesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LaneLine >::const_iterator
          it = this->lane_lines().begin();
          it != this->lane_lines().end(); ++it) {
        entry.reset(lane_lines_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // map<uint64, .calmcar_map.proto.map.LandMark> land_mark = 4;
  if (!this->land_mark().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LandMark >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->land_mark().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->land_mark().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LandMark >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LandMark >::const_iterator
          it = this->land_mark().begin();
          it != this->land_mark().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MapFrame_LandMarkEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(land_mark_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    } else {
      ::std::unique_ptr<MapFrame_LandMarkEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LandMark >::const_iterator
          it = this->land_mark().begin();
          it != this->land_mark().end(); ++it) {
        entry.reset(land_mark_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar_map.proto.map.MapFrame)
}

::google::protobuf::uint8* MapFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar_map.proto.map.MapFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar_map.proto.map.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // map<uint64, .calmcar_map.proto.map.Lane> lanes = 2;
  if (!this->lanes().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::Lane >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->lanes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->lanes().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::Lane >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::Lane >::const_iterator
          it = this->lanes().begin();
          it != this->lanes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MapFrame_LanesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(lanes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<MapFrame_LanesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::Lane >::const_iterator
          it = this->lanes().begin();
          it != this->lanes().end(); ++it) {
        entry.reset(lanes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  // map<uint64, .calmcar_map.proto.map.LaneLine> lane_lines = 3;
  if (!this->lane_lines().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LaneLine >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->lane_lines().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->lane_lines().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LaneLine >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LaneLine >::const_iterator
          it = this->lane_lines().begin();
          it != this->lane_lines().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MapFrame_LaneLinesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(lane_lines_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<MapFrame_LaneLinesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LaneLine >::const_iterator
          it = this->lane_lines().begin();
          it != this->lane_lines().end(); ++it) {
        entry.reset(lane_lines_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // map<uint64, .calmcar_map.proto.map.LandMark> land_mark = 4;
  if (!this->land_mark().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LandMark >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->land_mark().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->land_mark().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LandMark >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LandMark >::const_iterator
          it = this->land_mark().begin();
          it != this->land_mark().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MapFrame_LandMarkEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(land_mark_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<MapFrame_LandMarkEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LandMark >::const_iterator
          it = this->land_mark().begin();
          it != this->land_mark().end(); ++it) {
        entry.reset(land_mark_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar_map.proto.map.MapFrame)
  return target;
}

size_t MapFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar_map.proto.map.MapFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint64, .calmcar_map.proto.map.Lane> lanes = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->lanes_size());
  {
    ::std::unique_ptr<MapFrame_LanesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::Lane >::const_iterator
        it = this->lanes().begin();
        it != this->lanes().end(); ++it) {
      entry.reset(lanes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint64, .calmcar_map.proto.map.LaneLine> lane_lines = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->lane_lines_size());
  {
    ::std::unique_ptr<MapFrame_LaneLinesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LaneLine >::const_iterator
        it = this->lane_lines().begin();
        it != this->lane_lines().end(); ++it) {
      entry.reset(lane_lines_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint64, .calmcar_map.proto.map.LandMark> land_mark = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->land_mark_size());
  {
    ::std::unique_ptr<MapFrame_LandMarkEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::calmcar_map::proto::map::LandMark >::const_iterator
        it = this->land_mark().begin();
        it != this->land_mark().end(); ++it) {
      entry.reset(land_mark_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .calmcar_map.proto.map.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar_map.proto.map.MapFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const MapFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar_map.proto.map.MapFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar_map.proto.map.MapFrame)
    MergeFrom(*source);
  }
}

void MapFrame::MergeFrom(const MapFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar_map.proto.map.MapFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lanes_.MergeFrom(from.lanes_);
  lane_lines_.MergeFrom(from.lane_lines_);
  land_mark_.MergeFrom(from.land_mark_);
  if (from.has_header()) {
    mutable_header()->::calmcar_map::proto::map::Header::MergeFrom(from.header());
  }
}

void MapFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar_map.proto.map.MapFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapFrame::CopyFrom(const MapFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar_map.proto.map.MapFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapFrame::IsInitialized() const {
  return true;
}

void MapFrame::Swap(MapFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapFrame::InternalSwap(MapFrame* other) {
  using std::swap;
  lanes_.Swap(&other->lanes_);
  lane_lines_.Swap(&other->lane_lines_);
  land_mark_.Swap(&other->land_mark_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapFrame::GetMetadata() const {
  protobuf_map_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace map
}  // namespace proto
}  // namespace calmcar_map
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmcar_map::proto::map::Lane* Arena::CreateMaybeMessage< ::calmcar_map::proto::map::Lane >(Arena* arena) {
  return Arena::CreateInternal< ::calmcar_map::proto::map::Lane >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmcar_map::proto::map::LaneLine* Arena::CreateMaybeMessage< ::calmcar_map::proto::map::LaneLine >(Arena* arena) {
  return Arena::CreateInternal< ::calmcar_map::proto::map::LaneLine >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmcar_map::proto::map::LandMark* Arena::CreateMaybeMessage< ::calmcar_map::proto::map::LandMark >(Arena* arena) {
  return Arena::CreateInternal< ::calmcar_map::proto::map::LandMark >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmcar_map::proto::map::Header* Arena::CreateMaybeMessage< ::calmcar_map::proto::map::Header >(Arena* arena) {
  return Arena::CreateInternal< ::calmcar_map::proto::map::Header >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmcar_map::proto::map::MapFrame_LanesEntry_DoNotUse* Arena::CreateMaybeMessage< ::calmcar_map::proto::map::MapFrame_LanesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::calmcar_map::proto::map::MapFrame_LanesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmcar_map::proto::map::MapFrame_LaneLinesEntry_DoNotUse* Arena::CreateMaybeMessage< ::calmcar_map::proto::map::MapFrame_LaneLinesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::calmcar_map::proto::map::MapFrame_LaneLinesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmcar_map::proto::map::MapFrame_LandMarkEntry_DoNotUse* Arena::CreateMaybeMessage< ::calmcar_map::proto::map::MapFrame_LandMarkEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::calmcar_map::proto::map::MapFrame_LandMarkEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::calmcar_map::proto::map::MapFrame* Arena::CreateMaybeMessage< ::calmcar_map::proto::map::MapFrame >(Arena* arena) {
  return Arena::CreateInternal< ::calmcar_map::proto::map::MapFrame >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
