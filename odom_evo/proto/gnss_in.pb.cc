// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gnss_in.proto

#include "gnss_in.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_gnss_5fin_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gnss_5fin_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Frame_Utc;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gnss_5fin_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Gnss_Dop;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gnss_5fin_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Gnss_HeadingAndPitch;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gnss_5fin_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Gnss_HeightAndWeek;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gnss_5fin_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Gnss_LatitudeLongitude;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gnss_5fin_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Frame_Header;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gnss_5fin_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Gnss;
}  // namespace protobuf_gnss_5fin_2eproto
namespace gnss_in {
namespace proto {
class Gnss_LatitudeLongitudeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gnss_LatitudeLongitude>
      _instance;
} _Gnss_LatitudeLongitude_default_instance_;
class Gnss_HeightAndWeekDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gnss_HeightAndWeek>
      _instance;
} _Gnss_HeightAndWeek_default_instance_;
class Gnss_DopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gnss_Dop>
      _instance;
} _Gnss_Dop_default_instance_;
class Gnss_HeadingAndPitchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gnss_HeadingAndPitch>
      _instance;
} _Gnss_HeadingAndPitch_default_instance_;
class GnssDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gnss>
      _instance;
} _Gnss_default_instance_;
class Frame_UtcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Frame_Utc>
      _instance;
} _Frame_Utc_default_instance_;
class Frame_HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Frame_Header>
      _instance;
} _Frame_Header_default_instance_;
class FrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Frame>
      _instance;
} _Frame_default_instance_;
}  // namespace proto
}  // namespace gnss_in
namespace protobuf_gnss_5fin_2eproto {
static void InitDefaultsGnss_LatitudeLongitude() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnss_in::proto::_Gnss_LatitudeLongitude_default_instance_;
    new (ptr) ::gnss_in::proto::Gnss_LatitudeLongitude();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnss_in::proto::Gnss_LatitudeLongitude::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Gnss_LatitudeLongitude =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGnss_LatitudeLongitude}, {}};

static void InitDefaultsGnss_HeightAndWeek() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnss_in::proto::_Gnss_HeightAndWeek_default_instance_;
    new (ptr) ::gnss_in::proto::Gnss_HeightAndWeek();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnss_in::proto::Gnss_HeightAndWeek::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Gnss_HeightAndWeek =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGnss_HeightAndWeek}, {}};

static void InitDefaultsGnss_Dop() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnss_in::proto::_Gnss_Dop_default_instance_;
    new (ptr) ::gnss_in::proto::Gnss_Dop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnss_in::proto::Gnss_Dop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Gnss_Dop =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGnss_Dop}, {}};

static void InitDefaultsGnss_HeadingAndPitch() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnss_in::proto::_Gnss_HeadingAndPitch_default_instance_;
    new (ptr) ::gnss_in::proto::Gnss_HeadingAndPitch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnss_in::proto::Gnss_HeadingAndPitch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Gnss_HeadingAndPitch =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGnss_HeadingAndPitch}, {}};

static void InitDefaultsGnss() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnss_in::proto::_Gnss_default_instance_;
    new (ptr) ::gnss_in::proto::Gnss();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnss_in::proto::Gnss::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Gnss =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsGnss}, {
      &protobuf_gnss_5fin_2eproto::scc_info_Gnss_LatitudeLongitude.base,
      &protobuf_gnss_5fin_2eproto::scc_info_Gnss_HeightAndWeek.base,
      &protobuf_gnss_5fin_2eproto::scc_info_Gnss_Dop.base,
      &protobuf_gnss_5fin_2eproto::scc_info_Gnss_HeadingAndPitch.base,}};

static void InitDefaultsFrame_Utc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnss_in::proto::_Frame_Utc_default_instance_;
    new (ptr) ::gnss_in::proto::Frame_Utc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnss_in::proto::Frame_Utc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Frame_Utc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFrame_Utc}, {}};

static void InitDefaultsFrame_Header() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnss_in::proto::_Frame_Header_default_instance_;
    new (ptr) ::gnss_in::proto::Frame_Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnss_in::proto::Frame_Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Frame_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFrame_Header}, {
      &protobuf_gnss_5fin_2eproto::scc_info_Frame_Utc.base,}};

static void InitDefaultsFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnss_in::proto::_Frame_default_instance_;
    new (ptr) ::gnss_in::proto::Frame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnss_in::proto::Frame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Frame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFrame}, {
      &protobuf_gnss_5fin_2eproto::scc_info_Frame_Header.base,
      &protobuf_gnss_5fin_2eproto::scc_info_Gnss.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Gnss_LatitudeLongitude.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Gnss_HeightAndWeek.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Gnss_Dop.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Gnss_HeadingAndPitch.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Gnss.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Frame_Utc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Frame_Header.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Frame.base);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss_LatitudeLongitude, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss_LatitudeLongitude, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss_LatitudeLongitude, latitude_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss_HeightAndWeek, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss_HeightAndWeek, week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss_HeightAndWeek, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss_Dop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss_Dop, htdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss_Dop, pdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss_Dop, hdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss_Dop, gdop_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss_HeadingAndPitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss_HeadingAndPitch, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss_HeadingAndPitch, heading_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss, latitude_longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss, height_and_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss, dop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Gnss, heading_and_pitch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Frame_Utc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Frame_Utc, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Frame_Utc, sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Frame_Utc, msec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Frame_Utc, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Frame_Utc, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Frame_Utc, hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Frame_Utc, day_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Frame_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Frame_Header, gnss_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Frame_Header, utc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Frame_Header, rolling_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Frame_Header, frame_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Frame, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Frame, sys_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_in::proto::Frame, gnss_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gnss_in::proto::Gnss_LatitudeLongitude)},
  { 7, -1, sizeof(::gnss_in::proto::Gnss_HeightAndWeek)},
  { 14, -1, sizeof(::gnss_in::proto::Gnss_Dop)},
  { 23, -1, sizeof(::gnss_in::proto::Gnss_HeadingAndPitch)},
  { 30, -1, sizeof(::gnss_in::proto::Gnss)},
  { 39, -1, sizeof(::gnss_in::proto::Frame_Utc)},
  { 51, -1, sizeof(::gnss_in::proto::Frame_Header)},
  { 60, -1, sizeof(::gnss_in::proto::Frame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gnss_in::proto::_Gnss_LatitudeLongitude_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gnss_in::proto::_Gnss_HeightAndWeek_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gnss_in::proto::_Gnss_Dop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gnss_in::proto::_Gnss_HeadingAndPitch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gnss_in::proto::_Gnss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gnss_in::proto::_Frame_Utc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gnss_in::proto::_Frame_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gnss_in::proto::_Frame_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gnss_in.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rgnss_in.proto\022\rgnss_in.proto\"\307\003\n\004Gnss\022"
      "A\n\022latitude_longitude\030\001 \001(\0132%.gnss_in.pr"
      "oto.Gnss.LatitudeLongitude\022:\n\017height_and"
      "_week\030\002 \001(\0132!.gnss_in.proto.Gnss.HeightA"
      "ndWeek\022$\n\003dop\030\003 \001(\0132\027.gnss_in.proto.Gnss"
      ".Dop\022>\n\021heading_and_pitch\030\004 \001(\0132#.gnss_i"
      "n.proto.Gnss.HeadingAndPitch\0328\n\021Latitude"
      "Longitude\022\021\n\tlongitude\030\001 \001(\001\022\020\n\010latitude"
      "\030\002 \001(\001\032-\n\rHeightAndWeek\022\014\n\004week\030\001 \001(\r\022\016\n"
      "\006height\030\002 \001(\001\032>\n\003Dop\022\r\n\005htdop\030\001 \001(\001\022\014\n\004p"
      "dop\030\002 \001(\001\022\014\n\004hdop\030\003 \001(\001\022\014\n\004gdop\030\004 \001(\001\0321\n"
      "\017HeadingAndPitch\022\r\n\005pitch\030\001 \001(\001\022\017\n\007headi"
      "ng\030\002 \001(\001\"\302\002\n\005Frame\022+\n\006header\030\001 \001(\0132\033.gns"
      "s_in.proto.Frame.Header\022\025\n\rsys_timestamp"
      "\030\002 \001(\004\022!\n\004gnss\030\003 \001(\0132\023.gnss_in.proto.Gns"
      "s\032e\n\003Utc\022\014\n\004year\030\001 \001(\r\022\013\n\003sec\030\002 \001(\r\022\014\n\004m"
      "sec\030\003 \001(\r\022\r\n\005month\030\004 \001(\r\022\013\n\003min\030\005 \001(\r\022\014\n"
      "\004hour\030\006 \001(\r\022\013\n\003day\030\007 \001(\r\032k\n\006Header\022\017\n\007gn"
      "ss_id\030\001 \001(\r\022%\n\003utc\030\002 \001(\0132\030.gnss_in.proto"
      ".Frame.Utc\022\027\n\017rolling_counter\030\003 \001(\004\022\020\n\010f"
      "rame_id\030\004 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 821);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gnss_in.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gnss_5fin_2eproto
namespace gnss_in {
namespace proto {

// ===================================================================

void Gnss_LatitudeLongitude::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gnss_LatitudeLongitude::kLongitudeFieldNumber;
const int Gnss_LatitudeLongitude::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gnss_LatitudeLongitude::Gnss_LatitudeLongitude()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gnss_5fin_2eproto::scc_info_Gnss_LatitudeLongitude.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gnss_in.proto.Gnss.LatitudeLongitude)
}
Gnss_LatitudeLongitude::Gnss_LatitudeLongitude(const Gnss_LatitudeLongitude& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:gnss_in.proto.Gnss.LatitudeLongitude)
}

void Gnss_LatitudeLongitude::SharedCtor() {
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
}

Gnss_LatitudeLongitude::~Gnss_LatitudeLongitude() {
  // @@protoc_insertion_point(destructor:gnss_in.proto.Gnss.LatitudeLongitude)
  SharedDtor();
}

void Gnss_LatitudeLongitude::SharedDtor() {
}

void Gnss_LatitudeLongitude::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Gnss_LatitudeLongitude::descriptor() {
  ::protobuf_gnss_5fin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gnss_LatitudeLongitude& Gnss_LatitudeLongitude::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gnss_5fin_2eproto::scc_info_Gnss_LatitudeLongitude.base);
  return *internal_default_instance();
}


void Gnss_LatitudeLongitude::Clear() {
// @@protoc_insertion_point(message_clear_start:gnss_in.proto.Gnss.LatitudeLongitude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  _internal_metadata_.Clear();
}

bool Gnss_LatitudeLongitude::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gnss_in.proto.Gnss.LatitudeLongitude)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double longitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gnss_in.proto.Gnss.LatitudeLongitude)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gnss_in.proto.Gnss.LatitudeLongitude)
  return false;
#undef DO_
}

void Gnss_LatitudeLongitude::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gnss_in.proto.Gnss.LatitudeLongitude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gnss_in.proto.Gnss.LatitudeLongitude)
}

::google::protobuf::uint8* Gnss_LatitudeLongitude::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gnss_in.proto.Gnss.LatitudeLongitude)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longitude(), target);
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnss_in.proto.Gnss.LatitudeLongitude)
  return target;
}

size_t Gnss_LatitudeLongitude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnss_in.proto.Gnss.LatitudeLongitude)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double longitude = 1;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gnss_LatitudeLongitude::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnss_in.proto.Gnss.LatitudeLongitude)
  GOOGLE_DCHECK_NE(&from, this);
  const Gnss_LatitudeLongitude* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gnss_LatitudeLongitude>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnss_in.proto.Gnss.LatitudeLongitude)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnss_in.proto.Gnss.LatitudeLongitude)
    MergeFrom(*source);
  }
}

void Gnss_LatitudeLongitude::MergeFrom(const Gnss_LatitudeLongitude& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnss_in.proto.Gnss.LatitudeLongitude)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
}

void Gnss_LatitudeLongitude::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnss_in.proto.Gnss.LatitudeLongitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gnss_LatitudeLongitude::CopyFrom(const Gnss_LatitudeLongitude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnss_in.proto.Gnss.LatitudeLongitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gnss_LatitudeLongitude::IsInitialized() const {
  return true;
}

void Gnss_LatitudeLongitude::Swap(Gnss_LatitudeLongitude* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gnss_LatitudeLongitude::InternalSwap(Gnss_LatitudeLongitude* other) {
  using std::swap;
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Gnss_LatitudeLongitude::GetMetadata() const {
  protobuf_gnss_5fin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Gnss_HeightAndWeek::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gnss_HeightAndWeek::kWeekFieldNumber;
const int Gnss_HeightAndWeek::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gnss_HeightAndWeek::Gnss_HeightAndWeek()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gnss_5fin_2eproto::scc_info_Gnss_HeightAndWeek.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gnss_in.proto.Gnss.HeightAndWeek)
}
Gnss_HeightAndWeek::Gnss_HeightAndWeek(const Gnss_HeightAndWeek& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&week_) -
    reinterpret_cast<char*>(&height_)) + sizeof(week_));
  // @@protoc_insertion_point(copy_constructor:gnss_in.proto.Gnss.HeightAndWeek)
}

void Gnss_HeightAndWeek::SharedCtor() {
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_) -
      reinterpret_cast<char*>(&height_)) + sizeof(week_));
}

Gnss_HeightAndWeek::~Gnss_HeightAndWeek() {
  // @@protoc_insertion_point(destructor:gnss_in.proto.Gnss.HeightAndWeek)
  SharedDtor();
}

void Gnss_HeightAndWeek::SharedDtor() {
}

void Gnss_HeightAndWeek::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Gnss_HeightAndWeek::descriptor() {
  ::protobuf_gnss_5fin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gnss_HeightAndWeek& Gnss_HeightAndWeek::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gnss_5fin_2eproto::scc_info_Gnss_HeightAndWeek.base);
  return *internal_default_instance();
}


void Gnss_HeightAndWeek::Clear() {
// @@protoc_insertion_point(message_clear_start:gnss_in.proto.Gnss.HeightAndWeek)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_) -
      reinterpret_cast<char*>(&height_)) + sizeof(week_));
  _internal_metadata_.Clear();
}

bool Gnss_HeightAndWeek::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gnss_in.proto.Gnss.HeightAndWeek)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 week = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gnss_in.proto.Gnss.HeightAndWeek)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gnss_in.proto.Gnss.HeightAndWeek)
  return false;
#undef DO_
}

void Gnss_HeightAndWeek::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gnss_in.proto.Gnss.HeightAndWeek)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 week = 1;
  if (this->week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->week(), output);
  }

  // double height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gnss_in.proto.Gnss.HeightAndWeek)
}

::google::protobuf::uint8* Gnss_HeightAndWeek::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gnss_in.proto.Gnss.HeightAndWeek)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 week = 1;
  if (this->week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->week(), target);
  }

  // double height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnss_in.proto.Gnss.HeightAndWeek)
  return target;
}

size_t Gnss_HeightAndWeek::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnss_in.proto.Gnss.HeightAndWeek)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double height = 2;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // uint32 week = 1;
  if (this->week() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->week());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gnss_HeightAndWeek::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnss_in.proto.Gnss.HeightAndWeek)
  GOOGLE_DCHECK_NE(&from, this);
  const Gnss_HeightAndWeek* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gnss_HeightAndWeek>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnss_in.proto.Gnss.HeightAndWeek)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnss_in.proto.Gnss.HeightAndWeek)
    MergeFrom(*source);
  }
}

void Gnss_HeightAndWeek::MergeFrom(const Gnss_HeightAndWeek& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnss_in.proto.Gnss.HeightAndWeek)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.week() != 0) {
    set_week(from.week());
  }
}

void Gnss_HeightAndWeek::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnss_in.proto.Gnss.HeightAndWeek)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gnss_HeightAndWeek::CopyFrom(const Gnss_HeightAndWeek& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnss_in.proto.Gnss.HeightAndWeek)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gnss_HeightAndWeek::IsInitialized() const {
  return true;
}

void Gnss_HeightAndWeek::Swap(Gnss_HeightAndWeek* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gnss_HeightAndWeek::InternalSwap(Gnss_HeightAndWeek* other) {
  using std::swap;
  swap(height_, other->height_);
  swap(week_, other->week_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Gnss_HeightAndWeek::GetMetadata() const {
  protobuf_gnss_5fin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Gnss_Dop::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gnss_Dop::kHtdopFieldNumber;
const int Gnss_Dop::kPdopFieldNumber;
const int Gnss_Dop::kHdopFieldNumber;
const int Gnss_Dop::kGdopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gnss_Dop::Gnss_Dop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gnss_5fin_2eproto::scc_info_Gnss_Dop.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gnss_in.proto.Gnss.Dop)
}
Gnss_Dop::Gnss_Dop(const Gnss_Dop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&htdop_, &from.htdop_,
    static_cast<size_t>(reinterpret_cast<char*>(&gdop_) -
    reinterpret_cast<char*>(&htdop_)) + sizeof(gdop_));
  // @@protoc_insertion_point(copy_constructor:gnss_in.proto.Gnss.Dop)
}

void Gnss_Dop::SharedCtor() {
  ::memset(&htdop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gdop_) -
      reinterpret_cast<char*>(&htdop_)) + sizeof(gdop_));
}

Gnss_Dop::~Gnss_Dop() {
  // @@protoc_insertion_point(destructor:gnss_in.proto.Gnss.Dop)
  SharedDtor();
}

void Gnss_Dop::SharedDtor() {
}

void Gnss_Dop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Gnss_Dop::descriptor() {
  ::protobuf_gnss_5fin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gnss_Dop& Gnss_Dop::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gnss_5fin_2eproto::scc_info_Gnss_Dop.base);
  return *internal_default_instance();
}


void Gnss_Dop::Clear() {
// @@protoc_insertion_point(message_clear_start:gnss_in.proto.Gnss.Dop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&htdop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gdop_) -
      reinterpret_cast<char*>(&htdop_)) + sizeof(gdop_));
  _internal_metadata_.Clear();
}

bool Gnss_Dop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gnss_in.proto.Gnss.Dop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double htdop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &htdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pdop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double hdop = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gdop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gnss_in.proto.Gnss.Dop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gnss_in.proto.Gnss.Dop)
  return false;
#undef DO_
}

void Gnss_Dop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gnss_in.proto.Gnss.Dop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double htdop = 1;
  if (this->htdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->htdop(), output);
  }

  // double pdop = 2;
  if (this->pdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pdop(), output);
  }

  // double hdop = 3;
  if (this->hdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->hdop(), output);
  }

  // double gdop = 4;
  if (this->gdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gdop(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gnss_in.proto.Gnss.Dop)
}

::google::protobuf::uint8* Gnss_Dop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gnss_in.proto.Gnss.Dop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double htdop = 1;
  if (this->htdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->htdop(), target);
  }

  // double pdop = 2;
  if (this->pdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pdop(), target);
  }

  // double hdop = 3;
  if (this->hdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->hdop(), target);
  }

  // double gdop = 4;
  if (this->gdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gdop(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnss_in.proto.Gnss.Dop)
  return target;
}

size_t Gnss_Dop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnss_in.proto.Gnss.Dop)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double htdop = 1;
  if (this->htdop() != 0) {
    total_size += 1 + 8;
  }

  // double pdop = 2;
  if (this->pdop() != 0) {
    total_size += 1 + 8;
  }

  // double hdop = 3;
  if (this->hdop() != 0) {
    total_size += 1 + 8;
  }

  // double gdop = 4;
  if (this->gdop() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gnss_Dop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnss_in.proto.Gnss.Dop)
  GOOGLE_DCHECK_NE(&from, this);
  const Gnss_Dop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gnss_Dop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnss_in.proto.Gnss.Dop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnss_in.proto.Gnss.Dop)
    MergeFrom(*source);
  }
}

void Gnss_Dop::MergeFrom(const Gnss_Dop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnss_in.proto.Gnss.Dop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.htdop() != 0) {
    set_htdop(from.htdop());
  }
  if (from.pdop() != 0) {
    set_pdop(from.pdop());
  }
  if (from.hdop() != 0) {
    set_hdop(from.hdop());
  }
  if (from.gdop() != 0) {
    set_gdop(from.gdop());
  }
}

void Gnss_Dop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnss_in.proto.Gnss.Dop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gnss_Dop::CopyFrom(const Gnss_Dop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnss_in.proto.Gnss.Dop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gnss_Dop::IsInitialized() const {
  return true;
}

void Gnss_Dop::Swap(Gnss_Dop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gnss_Dop::InternalSwap(Gnss_Dop* other) {
  using std::swap;
  swap(htdop_, other->htdop_);
  swap(pdop_, other->pdop_);
  swap(hdop_, other->hdop_);
  swap(gdop_, other->gdop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Gnss_Dop::GetMetadata() const {
  protobuf_gnss_5fin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Gnss_HeadingAndPitch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gnss_HeadingAndPitch::kPitchFieldNumber;
const int Gnss_HeadingAndPitch::kHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gnss_HeadingAndPitch::Gnss_HeadingAndPitch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gnss_5fin_2eproto::scc_info_Gnss_HeadingAndPitch.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gnss_in.proto.Gnss.HeadingAndPitch)
}
Gnss_HeadingAndPitch::Gnss_HeadingAndPitch(const Gnss_HeadingAndPitch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pitch_, &from.pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&pitch_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:gnss_in.proto.Gnss.HeadingAndPitch)
}

void Gnss_HeadingAndPitch::SharedCtor() {
  ::memset(&pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&pitch_)) + sizeof(heading_));
}

Gnss_HeadingAndPitch::~Gnss_HeadingAndPitch() {
  // @@protoc_insertion_point(destructor:gnss_in.proto.Gnss.HeadingAndPitch)
  SharedDtor();
}

void Gnss_HeadingAndPitch::SharedDtor() {
}

void Gnss_HeadingAndPitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Gnss_HeadingAndPitch::descriptor() {
  ::protobuf_gnss_5fin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gnss_HeadingAndPitch& Gnss_HeadingAndPitch::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gnss_5fin_2eproto::scc_info_Gnss_HeadingAndPitch.base);
  return *internal_default_instance();
}


void Gnss_HeadingAndPitch::Clear() {
// @@protoc_insertion_point(message_clear_start:gnss_in.proto.Gnss.HeadingAndPitch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&pitch_)) + sizeof(heading_));
  _internal_metadata_.Clear();
}

bool Gnss_HeadingAndPitch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gnss_in.proto.Gnss.HeadingAndPitch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double pitch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gnss_in.proto.Gnss.HeadingAndPitch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gnss_in.proto.Gnss.HeadingAndPitch)
  return false;
#undef DO_
}

void Gnss_HeadingAndPitch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gnss_in.proto.Gnss.HeadingAndPitch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pitch = 1;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pitch(), output);
  }

  // double heading = 2;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->heading(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gnss_in.proto.Gnss.HeadingAndPitch)
}

::google::protobuf::uint8* Gnss_HeadingAndPitch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gnss_in.proto.Gnss.HeadingAndPitch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pitch = 1;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->pitch(), target);
  }

  // double heading = 2;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->heading(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnss_in.proto.Gnss.HeadingAndPitch)
  return target;
}

size_t Gnss_HeadingAndPitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnss_in.proto.Gnss.HeadingAndPitch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double pitch = 1;
  if (this->pitch() != 0) {
    total_size += 1 + 8;
  }

  // double heading = 2;
  if (this->heading() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gnss_HeadingAndPitch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnss_in.proto.Gnss.HeadingAndPitch)
  GOOGLE_DCHECK_NE(&from, this);
  const Gnss_HeadingAndPitch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gnss_HeadingAndPitch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnss_in.proto.Gnss.HeadingAndPitch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnss_in.proto.Gnss.HeadingAndPitch)
    MergeFrom(*source);
  }
}

void Gnss_HeadingAndPitch::MergeFrom(const Gnss_HeadingAndPitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnss_in.proto.Gnss.HeadingAndPitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
}

void Gnss_HeadingAndPitch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnss_in.proto.Gnss.HeadingAndPitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gnss_HeadingAndPitch::CopyFrom(const Gnss_HeadingAndPitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnss_in.proto.Gnss.HeadingAndPitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gnss_HeadingAndPitch::IsInitialized() const {
  return true;
}

void Gnss_HeadingAndPitch::Swap(Gnss_HeadingAndPitch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gnss_HeadingAndPitch::InternalSwap(Gnss_HeadingAndPitch* other) {
  using std::swap;
  swap(pitch_, other->pitch_);
  swap(heading_, other->heading_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Gnss_HeadingAndPitch::GetMetadata() const {
  protobuf_gnss_5fin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Gnss::InitAsDefaultInstance() {
  ::gnss_in::proto::_Gnss_default_instance_._instance.get_mutable()->latitude_longitude_ = const_cast< ::gnss_in::proto::Gnss_LatitudeLongitude*>(
      ::gnss_in::proto::Gnss_LatitudeLongitude::internal_default_instance());
  ::gnss_in::proto::_Gnss_default_instance_._instance.get_mutable()->height_and_week_ = const_cast< ::gnss_in::proto::Gnss_HeightAndWeek*>(
      ::gnss_in::proto::Gnss_HeightAndWeek::internal_default_instance());
  ::gnss_in::proto::_Gnss_default_instance_._instance.get_mutable()->dop_ = const_cast< ::gnss_in::proto::Gnss_Dop*>(
      ::gnss_in::proto::Gnss_Dop::internal_default_instance());
  ::gnss_in::proto::_Gnss_default_instance_._instance.get_mutable()->heading_and_pitch_ = const_cast< ::gnss_in::proto::Gnss_HeadingAndPitch*>(
      ::gnss_in::proto::Gnss_HeadingAndPitch::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gnss::kLatitudeLongitudeFieldNumber;
const int Gnss::kHeightAndWeekFieldNumber;
const int Gnss::kDopFieldNumber;
const int Gnss::kHeadingAndPitchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gnss::Gnss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gnss_5fin_2eproto::scc_info_Gnss.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gnss_in.proto.Gnss)
}
Gnss::Gnss(const Gnss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_latitude_longitude()) {
    latitude_longitude_ = new ::gnss_in::proto::Gnss_LatitudeLongitude(*from.latitude_longitude_);
  } else {
    latitude_longitude_ = NULL;
  }
  if (from.has_height_and_week()) {
    height_and_week_ = new ::gnss_in::proto::Gnss_HeightAndWeek(*from.height_and_week_);
  } else {
    height_and_week_ = NULL;
  }
  if (from.has_dop()) {
    dop_ = new ::gnss_in::proto::Gnss_Dop(*from.dop_);
  } else {
    dop_ = NULL;
  }
  if (from.has_heading_and_pitch()) {
    heading_and_pitch_ = new ::gnss_in::proto::Gnss_HeadingAndPitch(*from.heading_and_pitch_);
  } else {
    heading_and_pitch_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gnss_in.proto.Gnss)
}

void Gnss::SharedCtor() {
  ::memset(&latitude_longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_and_pitch_) -
      reinterpret_cast<char*>(&latitude_longitude_)) + sizeof(heading_and_pitch_));
}

Gnss::~Gnss() {
  // @@protoc_insertion_point(destructor:gnss_in.proto.Gnss)
  SharedDtor();
}

void Gnss::SharedDtor() {
  if (this != internal_default_instance()) delete latitude_longitude_;
  if (this != internal_default_instance()) delete height_and_week_;
  if (this != internal_default_instance()) delete dop_;
  if (this != internal_default_instance()) delete heading_and_pitch_;
}

void Gnss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Gnss::descriptor() {
  ::protobuf_gnss_5fin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gnss& Gnss::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gnss_5fin_2eproto::scc_info_Gnss.base);
  return *internal_default_instance();
}


void Gnss::Clear() {
// @@protoc_insertion_point(message_clear_start:gnss_in.proto.Gnss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && latitude_longitude_ != NULL) {
    delete latitude_longitude_;
  }
  latitude_longitude_ = NULL;
  if (GetArenaNoVirtual() == NULL && height_and_week_ != NULL) {
    delete height_and_week_;
  }
  height_and_week_ = NULL;
  if (GetArenaNoVirtual() == NULL && dop_ != NULL) {
    delete dop_;
  }
  dop_ = NULL;
  if (GetArenaNoVirtual() == NULL && heading_and_pitch_ != NULL) {
    delete heading_and_pitch_;
  }
  heading_and_pitch_ = NULL;
  _internal_metadata_.Clear();
}

bool Gnss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gnss_in.proto.Gnss)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gnss_in.proto.Gnss.LatitudeLongitude latitude_longitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_latitude_longitude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gnss_in.proto.Gnss.HeightAndWeek height_and_week = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_height_and_week()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gnss_in.proto.Gnss.Dop dop = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gnss_in.proto.Gnss.HeadingAndPitch heading_and_pitch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heading_and_pitch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gnss_in.proto.Gnss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gnss_in.proto.Gnss)
  return false;
#undef DO_
}

void Gnss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gnss_in.proto.Gnss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnss_in.proto.Gnss.LatitudeLongitude latitude_longitude = 1;
  if (this->has_latitude_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_latitude_longitude(), output);
  }

  // .gnss_in.proto.Gnss.HeightAndWeek height_and_week = 2;
  if (this->has_height_and_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_height_and_week(), output);
  }

  // .gnss_in.proto.Gnss.Dop dop = 3;
  if (this->has_dop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_dop(), output);
  }

  // .gnss_in.proto.Gnss.HeadingAndPitch heading_and_pitch = 4;
  if (this->has_heading_and_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_heading_and_pitch(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gnss_in.proto.Gnss)
}

::google::protobuf::uint8* Gnss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gnss_in.proto.Gnss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnss_in.proto.Gnss.LatitudeLongitude latitude_longitude = 1;
  if (this->has_latitude_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_latitude_longitude(), deterministic, target);
  }

  // .gnss_in.proto.Gnss.HeightAndWeek height_and_week = 2;
  if (this->has_height_and_week()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_height_and_week(), deterministic, target);
  }

  // .gnss_in.proto.Gnss.Dop dop = 3;
  if (this->has_dop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_dop(), deterministic, target);
  }

  // .gnss_in.proto.Gnss.HeadingAndPitch heading_and_pitch = 4;
  if (this->has_heading_and_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_heading_and_pitch(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnss_in.proto.Gnss)
  return target;
}

size_t Gnss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnss_in.proto.Gnss)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gnss_in.proto.Gnss.LatitudeLongitude latitude_longitude = 1;
  if (this->has_latitude_longitude()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *latitude_longitude_);
  }

  // .gnss_in.proto.Gnss.HeightAndWeek height_and_week = 2;
  if (this->has_height_and_week()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *height_and_week_);
  }

  // .gnss_in.proto.Gnss.Dop dop = 3;
  if (this->has_dop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dop_);
  }

  // .gnss_in.proto.Gnss.HeadingAndPitch heading_and_pitch = 4;
  if (this->has_heading_and_pitch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *heading_and_pitch_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gnss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnss_in.proto.Gnss)
  GOOGLE_DCHECK_NE(&from, this);
  const Gnss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gnss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnss_in.proto.Gnss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnss_in.proto.Gnss)
    MergeFrom(*source);
  }
}

void Gnss::MergeFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnss_in.proto.Gnss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_latitude_longitude()) {
    mutable_latitude_longitude()->::gnss_in::proto::Gnss_LatitudeLongitude::MergeFrom(from.latitude_longitude());
  }
  if (from.has_height_and_week()) {
    mutable_height_and_week()->::gnss_in::proto::Gnss_HeightAndWeek::MergeFrom(from.height_and_week());
  }
  if (from.has_dop()) {
    mutable_dop()->::gnss_in::proto::Gnss_Dop::MergeFrom(from.dop());
  }
  if (from.has_heading_and_pitch()) {
    mutable_heading_and_pitch()->::gnss_in::proto::Gnss_HeadingAndPitch::MergeFrom(from.heading_and_pitch());
  }
}

void Gnss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnss_in.proto.Gnss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gnss::CopyFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnss_in.proto.Gnss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gnss::IsInitialized() const {
  return true;
}

void Gnss::Swap(Gnss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gnss::InternalSwap(Gnss* other) {
  using std::swap;
  swap(latitude_longitude_, other->latitude_longitude_);
  swap(height_and_week_, other->height_and_week_);
  swap(dop_, other->dop_);
  swap(heading_and_pitch_, other->heading_and_pitch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Gnss::GetMetadata() const {
  protobuf_gnss_5fin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Frame_Utc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame_Utc::kYearFieldNumber;
const int Frame_Utc::kSecFieldNumber;
const int Frame_Utc::kMsecFieldNumber;
const int Frame_Utc::kMonthFieldNumber;
const int Frame_Utc::kMinFieldNumber;
const int Frame_Utc::kHourFieldNumber;
const int Frame_Utc::kDayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame_Utc::Frame_Utc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gnss_5fin_2eproto::scc_info_Frame_Utc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gnss_in.proto.Frame.Utc)
}
Frame_Utc::Frame_Utc(const Frame_Utc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&day_) -
    reinterpret_cast<char*>(&year_)) + sizeof(day_));
  // @@protoc_insertion_point(copy_constructor:gnss_in.proto.Frame.Utc)
}

void Frame_Utc::SharedCtor() {
  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&year_)) + sizeof(day_));
}

Frame_Utc::~Frame_Utc() {
  // @@protoc_insertion_point(destructor:gnss_in.proto.Frame.Utc)
  SharedDtor();
}

void Frame_Utc::SharedDtor() {
}

void Frame_Utc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Frame_Utc::descriptor() {
  ::protobuf_gnss_5fin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Frame_Utc& Frame_Utc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gnss_5fin_2eproto::scc_info_Frame_Utc.base);
  return *internal_default_instance();
}


void Frame_Utc::Clear() {
// @@protoc_insertion_point(message_clear_start:gnss_in.proto.Frame.Utc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&year_)) + sizeof(day_));
  _internal_metadata_.Clear();
}

bool Frame_Utc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gnss_in.proto.Frame.Utc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 year = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 month = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 min = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hour = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 day = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gnss_in.proto.Frame.Utc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gnss_in.proto.Frame.Utc)
  return false;
#undef DO_
}

void Frame_Utc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gnss_in.proto.Frame.Utc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 year = 1;
  if (this->year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->year(), output);
  }

  // uint32 sec = 2;
  if (this->sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sec(), output);
  }

  // uint32 msec = 3;
  if (this->msec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msec(), output);
  }

  // uint32 month = 4;
  if (this->month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->month(), output);
  }

  // uint32 min = 5;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->min(), output);
  }

  // uint32 hour = 6;
  if (this->hour() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hour(), output);
  }

  // uint32 day = 7;
  if (this->day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->day(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gnss_in.proto.Frame.Utc)
}

::google::protobuf::uint8* Frame_Utc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gnss_in.proto.Frame.Utc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 year = 1;
  if (this->year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->year(), target);
  }

  // uint32 sec = 2;
  if (this->sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sec(), target);
  }

  // uint32 msec = 3;
  if (this->msec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->msec(), target);
  }

  // uint32 month = 4;
  if (this->month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->month(), target);
  }

  // uint32 min = 5;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->min(), target);
  }

  // uint32 hour = 6;
  if (this->hour() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hour(), target);
  }

  // uint32 day = 7;
  if (this->day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->day(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnss_in.proto.Frame.Utc)
  return target;
}

size_t Frame_Utc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnss_in.proto.Frame.Utc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->year());
  }

  // uint32 sec = 2;
  if (this->sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sec());
  }

  // uint32 msec = 3;
  if (this->msec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msec());
  }

  // uint32 month = 4;
  if (this->month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->month());
  }

  // uint32 min = 5;
  if (this->min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min());
  }

  // uint32 hour = 6;
  if (this->hour() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hour());
  }

  // uint32 day = 7;
  if (this->day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->day());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame_Utc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnss_in.proto.Frame.Utc)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame_Utc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame_Utc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnss_in.proto.Frame.Utc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnss_in.proto.Frame.Utc)
    MergeFrom(*source);
  }
}

void Frame_Utc::MergeFrom(const Frame_Utc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnss_in.proto.Frame.Utc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.year() != 0) {
    set_year(from.year());
  }
  if (from.sec() != 0) {
    set_sec(from.sec());
  }
  if (from.msec() != 0) {
    set_msec(from.msec());
  }
  if (from.month() != 0) {
    set_month(from.month());
  }
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.hour() != 0) {
    set_hour(from.hour());
  }
  if (from.day() != 0) {
    set_day(from.day());
  }
}

void Frame_Utc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnss_in.proto.Frame.Utc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame_Utc::CopyFrom(const Frame_Utc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnss_in.proto.Frame.Utc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame_Utc::IsInitialized() const {
  return true;
}

void Frame_Utc::Swap(Frame_Utc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame_Utc::InternalSwap(Frame_Utc* other) {
  using std::swap;
  swap(year_, other->year_);
  swap(sec_, other->sec_);
  swap(msec_, other->msec_);
  swap(month_, other->month_);
  swap(min_, other->min_);
  swap(hour_, other->hour_);
  swap(day_, other->day_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Frame_Utc::GetMetadata() const {
  protobuf_gnss_5fin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Frame_Header::InitAsDefaultInstance() {
  ::gnss_in::proto::_Frame_Header_default_instance_._instance.get_mutable()->utc_ = const_cast< ::gnss_in::proto::Frame_Utc*>(
      ::gnss_in::proto::Frame_Utc::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame_Header::kGnssIdFieldNumber;
const int Frame_Header::kUtcFieldNumber;
const int Frame_Header::kRollingCounterFieldNumber;
const int Frame_Header::kFrameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame_Header::Frame_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gnss_5fin_2eproto::scc_info_Frame_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gnss_in.proto.Frame.Header)
}
Frame_Header::Frame_Header(const Frame_Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.frame_id().size() > 0) {
    frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  if (from.has_utc()) {
    utc_ = new ::gnss_in::proto::Frame_Utc(*from.utc_);
  } else {
    utc_ = NULL;
  }
  ::memcpy(&rolling_counter_, &from.rolling_counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&gnss_id_) -
    reinterpret_cast<char*>(&rolling_counter_)) + sizeof(gnss_id_));
  // @@protoc_insertion_point(copy_constructor:gnss_in.proto.Frame.Header)
}

void Frame_Header::SharedCtor() {
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&utc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gnss_id_) -
      reinterpret_cast<char*>(&utc_)) + sizeof(gnss_id_));
}

Frame_Header::~Frame_Header() {
  // @@protoc_insertion_point(destructor:gnss_in.proto.Frame.Header)
  SharedDtor();
}

void Frame_Header::SharedDtor() {
  frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete utc_;
}

void Frame_Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Frame_Header::descriptor() {
  ::protobuf_gnss_5fin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Frame_Header& Frame_Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gnss_5fin_2eproto::scc_info_Frame_Header.base);
  return *internal_default_instance();
}


void Frame_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:gnss_in.proto.Frame.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && utc_ != NULL) {
    delete utc_;
  }
  utc_ = NULL;
  ::memset(&rolling_counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gnss_id_) -
      reinterpret_cast<char*>(&rolling_counter_)) + sizeof(gnss_id_));
  _internal_metadata_.Clear();
}

bool Frame_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gnss_in.proto.Frame.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gnss_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gnss_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gnss_in.proto.Frame.Utc utc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_utc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 rolling_counter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rolling_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string frame_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frame_id().data(), static_cast<int>(this->frame_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gnss_in.proto.Frame.Header.frame_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gnss_in.proto.Frame.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gnss_in.proto.Frame.Header)
  return false;
#undef DO_
}

void Frame_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gnss_in.proto.Frame.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gnss_id = 1;
  if (this->gnss_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gnss_id(), output);
  }

  // .gnss_in.proto.Frame.Utc utc = 2;
  if (this->has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_utc(), output);
  }

  // uint64 rolling_counter = 3;
  if (this->rolling_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rolling_counter(), output);
  }

  // string frame_id = 4;
  if (this->frame_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gnss_in.proto.Frame.Header.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->frame_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gnss_in.proto.Frame.Header)
}

::google::protobuf::uint8* Frame_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gnss_in.proto.Frame.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gnss_id = 1;
  if (this->gnss_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gnss_id(), target);
  }

  // .gnss_in.proto.Frame.Utc utc = 2;
  if (this->has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_utc(), deterministic, target);
  }

  // uint64 rolling_counter = 3;
  if (this->rolling_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rolling_counter(), target);
  }

  // string frame_id = 4;
  if (this->frame_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gnss_in.proto.Frame.Header.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->frame_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnss_in.proto.Frame.Header)
  return target;
}

size_t Frame_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnss_in.proto.Frame.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string frame_id = 4;
  if (this->frame_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame_id());
  }

  // .gnss_in.proto.Frame.Utc utc = 2;
  if (this->has_utc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *utc_);
  }

  // uint64 rolling_counter = 3;
  if (this->rolling_counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rolling_counter());
  }

  // uint32 gnss_id = 1;
  if (this->gnss_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gnss_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnss_in.proto.Frame.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame_Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnss_in.proto.Frame.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnss_in.proto.Frame.Header)
    MergeFrom(*source);
  }
}

void Frame_Header::MergeFrom(const Frame_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnss_in.proto.Frame.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_id().size() > 0) {

    frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  if (from.has_utc()) {
    mutable_utc()->::gnss_in::proto::Frame_Utc::MergeFrom(from.utc());
  }
  if (from.rolling_counter() != 0) {
    set_rolling_counter(from.rolling_counter());
  }
  if (from.gnss_id() != 0) {
    set_gnss_id(from.gnss_id());
  }
}

void Frame_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnss_in.proto.Frame.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame_Header::CopyFrom(const Frame_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnss_in.proto.Frame.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame_Header::IsInitialized() const {
  return true;
}

void Frame_Header::Swap(Frame_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame_Header::InternalSwap(Frame_Header* other) {
  using std::swap;
  frame_id_.Swap(&other->frame_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(utc_, other->utc_);
  swap(rolling_counter_, other->rolling_counter_);
  swap(gnss_id_, other->gnss_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Frame_Header::GetMetadata() const {
  protobuf_gnss_5fin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Frame::InitAsDefaultInstance() {
  ::gnss_in::proto::_Frame_default_instance_._instance.get_mutable()->header_ = const_cast< ::gnss_in::proto::Frame_Header*>(
      ::gnss_in::proto::Frame_Header::internal_default_instance());
  ::gnss_in::proto::_Frame_default_instance_._instance.get_mutable()->gnss_ = const_cast< ::gnss_in::proto::Gnss*>(
      ::gnss_in::proto::Gnss::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kHeaderFieldNumber;
const int Frame::kSysTimestampFieldNumber;
const int Frame::kGnssFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gnss_5fin_2eproto::scc_info_Frame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gnss_in.proto.Frame)
}
Frame::Frame(const Frame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::gnss_in::proto::Frame_Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_gnss()) {
    gnss_ = new ::gnss_in::proto::Gnss(*from.gnss_);
  } else {
    gnss_ = NULL;
  }
  sys_timestamp_ = from.sys_timestamp_;
  // @@protoc_insertion_point(copy_constructor:gnss_in.proto.Frame)
}

void Frame::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sys_timestamp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(sys_timestamp_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:gnss_in.proto.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete gnss_;
}

void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  ::protobuf_gnss_5fin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Frame& Frame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gnss_5fin_2eproto::scc_info_Frame.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:gnss_in.proto.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && gnss_ != NULL) {
    delete gnss_;
  }
  gnss_ = NULL;
  sys_timestamp_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gnss_in.proto.Frame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gnss_in.proto.Frame.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sys_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sys_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gnss_in.proto.Gnss gnss = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gnss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gnss_in.proto.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gnss_in.proto.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gnss_in.proto.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnss_in.proto.Frame.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // uint64 sys_timestamp = 2;
  if (this->sys_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sys_timestamp(), output);
  }

  // .gnss_in.proto.Gnss gnss = 3;
  if (this->has_gnss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_gnss(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gnss_in.proto.Frame)
}

::google::protobuf::uint8* Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gnss_in.proto.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnss_in.proto.Frame.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // uint64 sys_timestamp = 2;
  if (this->sys_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sys_timestamp(), target);
  }

  // .gnss_in.proto.Gnss gnss = 3;
  if (this->has_gnss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_gnss(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnss_in.proto.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnss_in.proto.Frame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .gnss_in.proto.Frame.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .gnss_in.proto.Gnss gnss = 3;
  if (this->has_gnss()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gnss_);
  }

  // uint64 sys_timestamp = 2;
  if (this->sys_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sys_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnss_in.proto.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnss_in.proto.Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnss_in.proto.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnss_in.proto.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::gnss_in::proto::Frame_Header::MergeFrom(from.header());
  }
  if (from.has_gnss()) {
    mutable_gnss()->::gnss_in::proto::Gnss::MergeFrom(from.gnss());
  }
  if (from.sys_timestamp() != 0) {
    set_sys_timestamp(from.sys_timestamp());
  }
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnss_in.proto.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnss_in.proto.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::Swap(Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame::InternalSwap(Frame* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(gnss_, other->gnss_);
  swap(sys_timestamp_, other->sys_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_gnss_5fin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace gnss_in
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gnss_in::proto::Gnss_LatitudeLongitude* Arena::CreateMaybeMessage< ::gnss_in::proto::Gnss_LatitudeLongitude >(Arena* arena) {
  return Arena::CreateInternal< ::gnss_in::proto::Gnss_LatitudeLongitude >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gnss_in::proto::Gnss_HeightAndWeek* Arena::CreateMaybeMessage< ::gnss_in::proto::Gnss_HeightAndWeek >(Arena* arena) {
  return Arena::CreateInternal< ::gnss_in::proto::Gnss_HeightAndWeek >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gnss_in::proto::Gnss_Dop* Arena::CreateMaybeMessage< ::gnss_in::proto::Gnss_Dop >(Arena* arena) {
  return Arena::CreateInternal< ::gnss_in::proto::Gnss_Dop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gnss_in::proto::Gnss_HeadingAndPitch* Arena::CreateMaybeMessage< ::gnss_in::proto::Gnss_HeadingAndPitch >(Arena* arena) {
  return Arena::CreateInternal< ::gnss_in::proto::Gnss_HeadingAndPitch >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gnss_in::proto::Gnss* Arena::CreateMaybeMessage< ::gnss_in::proto::Gnss >(Arena* arena) {
  return Arena::CreateInternal< ::gnss_in::proto::Gnss >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gnss_in::proto::Frame_Utc* Arena::CreateMaybeMessage< ::gnss_in::proto::Frame_Utc >(Arena* arena) {
  return Arena::CreateInternal< ::gnss_in::proto::Frame_Utc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gnss_in::proto::Frame_Header* Arena::CreateMaybeMessage< ::gnss_in::proto::Frame_Header >(Arena* arena) {
  return Arena::CreateInternal< ::gnss_in::proto::Frame_Header >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gnss_in::proto::Frame* Arena::CreateMaybeMessage< ::gnss_in::proto::Frame >(Arena* arena) {
  return Arena::CreateInternal< ::gnss_in::proto::Frame >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
