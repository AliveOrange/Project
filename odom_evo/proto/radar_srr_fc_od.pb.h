// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: radar_srr_fc_od.proto

#ifndef PROTOBUF_INCLUDED_radar_5fsrr_5ffc_5fod_2eproto
#define PROTOBUF_INCLUDED_radar_5fsrr_5ffc_5fod_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_radar_5fsrr_5ffc_5fod_2eproto 

namespace protobuf_radar_5fsrr_5ffc_5fod_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_radar_5fsrr_5ffc_5fod_2eproto
namespace radar_srr_fc_od {
namespace proto {
class SrrHeader;
class SrrHeaderDefaultTypeInternal;
extern SrrHeaderDefaultTypeInternal _SrrHeader_default_instance_;
class SrrObjectInfo;
class SrrObjectInfoDefaultTypeInternal;
extern SrrObjectInfoDefaultTypeInternal _SrrObjectInfo_default_instance_;
class srr_fc_frame_od;
class srr_fc_frame_odDefaultTypeInternal;
extern srr_fc_frame_odDefaultTypeInternal _srr_fc_frame_od_default_instance_;
}  // namespace proto
}  // namespace radar_srr_fc_od
namespace google {
namespace protobuf {
template<> ::radar_srr_fc_od::proto::SrrHeader* Arena::CreateMaybeMessage<::radar_srr_fc_od::proto::SrrHeader>(Arena*);
template<> ::radar_srr_fc_od::proto::SrrObjectInfo* Arena::CreateMaybeMessage<::radar_srr_fc_od::proto::SrrObjectInfo>(Arena*);
template<> ::radar_srr_fc_od::proto::srr_fc_frame_od* Arena::CreateMaybeMessage<::radar_srr_fc_od::proto::srr_fc_frame_od>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace radar_srr_fc_od {
namespace proto {

// ===================================================================

class SrrHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:radar_srr_fc_od.proto.SrrHeader) */ {
 public:
  SrrHeader();
  virtual ~SrrHeader();

  SrrHeader(const SrrHeader& from);

  inline SrrHeader& operator=(const SrrHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SrrHeader(SrrHeader&& from) noexcept
    : SrrHeader() {
    *this = ::std::move(from);
  }

  inline SrrHeader& operator=(SrrHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SrrHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SrrHeader* internal_default_instance() {
    return reinterpret_cast<const SrrHeader*>(
               &_SrrHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SrrHeader* other);
  friend void swap(SrrHeader& a, SrrHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SrrHeader* New() const final {
    return CreateMaybeMessage<SrrHeader>(NULL);
  }

  SrrHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SrrHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SrrHeader& from);
  void MergeFrom(const SrrHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SrrHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // uint32 rolling_counter = 2;
  void clear_rolling_counter();
  static const int kRollingCounterFieldNumber = 2;
  ::google::protobuf::uint32 rolling_counter() const;
  void set_rolling_counter(::google::protobuf::uint32 value);

  // uint32 sensor_id = 3;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 3;
  ::google::protobuf::uint32 sensor_id() const;
  void set_sensor_id(::google::protobuf::uint32 value);

  // uint32 obj_num = 4;
  void clear_obj_num();
  static const int kObjNumFieldNumber = 4;
  ::google::protobuf::uint32 obj_num() const;
  void set_obj_num(::google::protobuf::uint32 value);

  // uint32 line_num = 5;
  void clear_line_num();
  static const int kLineNumFieldNumber = 5;
  ::google::protobuf::uint32 line_num() const;
  void set_line_num(::google::protobuf::uint32 value);

  // uint32 fs_num = 6;
  void clear_fs_num();
  static const int kFsNumFieldNumber = 6;
  ::google::protobuf::uint32 fs_num() const;
  void set_fs_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:radar_srr_fc_od.proto.SrrHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 rolling_counter_;
  ::google::protobuf::uint32 sensor_id_;
  ::google::protobuf::uint32 obj_num_;
  ::google::protobuf::uint32 line_num_;
  ::google::protobuf::uint32 fs_num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_radar_5fsrr_5ffc_5fod_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SrrObjectInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:radar_srr_fc_od.proto.SrrObjectInfo) */ {
 public:
  SrrObjectInfo();
  virtual ~SrrObjectInfo();

  SrrObjectInfo(const SrrObjectInfo& from);

  inline SrrObjectInfo& operator=(const SrrObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SrrObjectInfo(SrrObjectInfo&& from) noexcept
    : SrrObjectInfo() {
    *this = ::std::move(from);
  }

  inline SrrObjectInfo& operator=(SrrObjectInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SrrObjectInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SrrObjectInfo* internal_default_instance() {
    return reinterpret_cast<const SrrObjectInfo*>(
               &_SrrObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SrrObjectInfo* other);
  friend void swap(SrrObjectInfo& a, SrrObjectInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SrrObjectInfo* New() const final {
    return CreateMaybeMessage<SrrObjectInfo>(NULL);
  }

  SrrObjectInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SrrObjectInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SrrObjectInfo& from);
  void MergeFrom(const SrrObjectInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SrrObjectInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 obj_id = 1;
  void clear_obj_id();
  static const int kObjIdFieldNumber = 1;
  ::google::protobuf::uint32 obj_id() const;
  void set_obj_id(::google::protobuf::uint32 value);

  // uint32 class_type = 2;
  void clear_class_type();
  static const int kClassTypeFieldNumber = 2;
  ::google::protobuf::uint32 class_type() const;
  void set_class_type(::google::protobuf::uint32 value);

  // double confidence = 3;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 3;
  double confidence() const;
  void set_confidence(double value);

  // double obstacle_prob = 5;
  void clear_obstacle_prob();
  static const int kObstacleProbFieldNumber = 5;
  double obstacle_prob() const;
  void set_obstacle_prob(double value);

  // double height = 6;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  double height() const;
  void set_height(double value);

  // double width = 7;
  void clear_width();
  static const int kWidthFieldNumber = 7;
  double width() const;
  void set_width(double value);

  // double length = 8;
  void clear_length();
  static const int kLengthFieldNumber = 8;
  double length() const;
  void set_length(double value);

  // double dist_long = 9;
  void clear_dist_long();
  static const int kDistLongFieldNumber = 9;
  double dist_long() const;
  void set_dist_long(double value);

  // uint32 life_time = 4;
  void clear_life_time();
  static const int kLifeTimeFieldNumber = 4;
  ::google::protobuf::uint32 life_time() const;
  void set_life_time(::google::protobuf::uint32 value);

  // uint32 location = 15;
  void clear_location();
  static const int kLocationFieldNumber = 15;
  ::google::protobuf::uint32 location() const;
  void set_location(::google::protobuf::uint32 value);

  // double dist_lat = 10;
  void clear_dist_lat();
  static const int kDistLatFieldNumber = 10;
  double dist_lat() const;
  void set_dist_lat(double value);

  // double vrel_long = 11;
  void clear_vrel_long();
  static const int kVrelLongFieldNumber = 11;
  double vrel_long() const;
  void set_vrel_long(double value);

  // double vrel_lat = 12;
  void clear_vrel_lat();
  static const int kVrelLatFieldNumber = 12;
  double vrel_lat() const;
  void set_vrel_lat(double value);

  // double arel_long = 13;
  void clear_arel_long();
  static const int kArelLongFieldNumber = 13;
  double arel_long() const;
  void set_arel_long(double value);

  // double arel_lat = 14;
  void clear_arel_lat();
  static const int kArelLatFieldNumber = 14;
  double arel_lat() const;
  void set_arel_lat(double value);

  // double orientation_angle = 16;
  void clear_orientation_angle();
  static const int kOrientationAngleFieldNumber = 16;
  double orientation_angle() const;
  void set_orientation_angle(double value);

  // uint32 meas_state = 17;
  void clear_meas_state();
  static const int kMeasStateFieldNumber = 17;
  ::google::protobuf::uint32 meas_state() const;
  void set_meas_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:radar_srr_fc_od.proto.SrrObjectInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 obj_id_;
  ::google::protobuf::uint32 class_type_;
  double confidence_;
  double obstacle_prob_;
  double height_;
  double width_;
  double length_;
  double dist_long_;
  ::google::protobuf::uint32 life_time_;
  ::google::protobuf::uint32 location_;
  double dist_lat_;
  double vrel_long_;
  double vrel_lat_;
  double arel_long_;
  double arel_lat_;
  double orientation_angle_;
  ::google::protobuf::uint32 meas_state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_radar_5fsrr_5ffc_5fod_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class srr_fc_frame_od : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:radar_srr_fc_od.proto.srr_fc_frame_od) */ {
 public:
  srr_fc_frame_od();
  virtual ~srr_fc_frame_od();

  srr_fc_frame_od(const srr_fc_frame_od& from);

  inline srr_fc_frame_od& operator=(const srr_fc_frame_od& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  srr_fc_frame_od(srr_fc_frame_od&& from) noexcept
    : srr_fc_frame_od() {
    *this = ::std::move(from);
  }

  inline srr_fc_frame_od& operator=(srr_fc_frame_od&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const srr_fc_frame_od& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const srr_fc_frame_od* internal_default_instance() {
    return reinterpret_cast<const srr_fc_frame_od*>(
               &_srr_fc_frame_od_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(srr_fc_frame_od* other);
  friend void swap(srr_fc_frame_od& a, srr_fc_frame_od& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline srr_fc_frame_od* New() const final {
    return CreateMaybeMessage<srr_fc_frame_od>(NULL);
  }

  srr_fc_frame_od* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<srr_fc_frame_od>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const srr_fc_frame_od& from);
  void MergeFrom(const srr_fc_frame_od& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(srr_fc_frame_od* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .radar_srr_fc_od.proto.SrrObjectInfo objects = 3;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 3;
  ::radar_srr_fc_od::proto::SrrObjectInfo* mutable_objects(int index);
  ::google::protobuf::RepeatedPtrField< ::radar_srr_fc_od::proto::SrrObjectInfo >*
      mutable_objects();
  const ::radar_srr_fc_od::proto::SrrObjectInfo& objects(int index) const;
  ::radar_srr_fc_od::proto::SrrObjectInfo* add_objects();
  const ::google::protobuf::RepeatedPtrField< ::radar_srr_fc_od::proto::SrrObjectInfo >&
      objects() const;

  // .radar_srr_fc_od.proto.SrrHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::radar_srr_fc_od::proto::SrrHeader& _internal_header() const;
  public:
  const ::radar_srr_fc_od::proto::SrrHeader& header() const;
  ::radar_srr_fc_od::proto::SrrHeader* release_header();
  ::radar_srr_fc_od::proto::SrrHeader* mutable_header();
  void set_allocated_header(::radar_srr_fc_od::proto::SrrHeader* header);

  // uint64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:radar_srr_fc_od.proto.srr_fc_frame_od)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::radar_srr_fc_od::proto::SrrObjectInfo > objects_;
  ::radar_srr_fc_od::proto::SrrHeader* header_;
  ::google::protobuf::uint64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_radar_5fsrr_5ffc_5fod_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SrrHeader

// uint64 timestamp = 1;
inline void SrrHeader::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SrrHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrHeader.timestamp)
  return timestamp_;
}
inline void SrrHeader::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrHeader.timestamp)
}

// uint32 rolling_counter = 2;
inline void SrrHeader::clear_rolling_counter() {
  rolling_counter_ = 0u;
}
inline ::google::protobuf::uint32 SrrHeader::rolling_counter() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrHeader.rolling_counter)
  return rolling_counter_;
}
inline void SrrHeader::set_rolling_counter(::google::protobuf::uint32 value) {
  
  rolling_counter_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrHeader.rolling_counter)
}

// uint32 sensor_id = 3;
inline void SrrHeader::clear_sensor_id() {
  sensor_id_ = 0u;
}
inline ::google::protobuf::uint32 SrrHeader::sensor_id() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrHeader.sensor_id)
  return sensor_id_;
}
inline void SrrHeader::set_sensor_id(::google::protobuf::uint32 value) {
  
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrHeader.sensor_id)
}

// uint32 obj_num = 4;
inline void SrrHeader::clear_obj_num() {
  obj_num_ = 0u;
}
inline ::google::protobuf::uint32 SrrHeader::obj_num() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrHeader.obj_num)
  return obj_num_;
}
inline void SrrHeader::set_obj_num(::google::protobuf::uint32 value) {
  
  obj_num_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrHeader.obj_num)
}

// uint32 line_num = 5;
inline void SrrHeader::clear_line_num() {
  line_num_ = 0u;
}
inline ::google::protobuf::uint32 SrrHeader::line_num() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrHeader.line_num)
  return line_num_;
}
inline void SrrHeader::set_line_num(::google::protobuf::uint32 value) {
  
  line_num_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrHeader.line_num)
}

// uint32 fs_num = 6;
inline void SrrHeader::clear_fs_num() {
  fs_num_ = 0u;
}
inline ::google::protobuf::uint32 SrrHeader::fs_num() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrHeader.fs_num)
  return fs_num_;
}
inline void SrrHeader::set_fs_num(::google::protobuf::uint32 value) {
  
  fs_num_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrHeader.fs_num)
}

// -------------------------------------------------------------------

// SrrObjectInfo

// uint32 obj_id = 1;
inline void SrrObjectInfo::clear_obj_id() {
  obj_id_ = 0u;
}
inline ::google::protobuf::uint32 SrrObjectInfo::obj_id() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrObjectInfo.obj_id)
  return obj_id_;
}
inline void SrrObjectInfo::set_obj_id(::google::protobuf::uint32 value) {
  
  obj_id_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrObjectInfo.obj_id)
}

// uint32 class_type = 2;
inline void SrrObjectInfo::clear_class_type() {
  class_type_ = 0u;
}
inline ::google::protobuf::uint32 SrrObjectInfo::class_type() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrObjectInfo.class_type)
  return class_type_;
}
inline void SrrObjectInfo::set_class_type(::google::protobuf::uint32 value) {
  
  class_type_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrObjectInfo.class_type)
}

// double confidence = 3;
inline void SrrObjectInfo::clear_confidence() {
  confidence_ = 0;
}
inline double SrrObjectInfo::confidence() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrObjectInfo.confidence)
  return confidence_;
}
inline void SrrObjectInfo::set_confidence(double value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrObjectInfo.confidence)
}

// uint32 life_time = 4;
inline void SrrObjectInfo::clear_life_time() {
  life_time_ = 0u;
}
inline ::google::protobuf::uint32 SrrObjectInfo::life_time() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrObjectInfo.life_time)
  return life_time_;
}
inline void SrrObjectInfo::set_life_time(::google::protobuf::uint32 value) {
  
  life_time_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrObjectInfo.life_time)
}

// double obstacle_prob = 5;
inline void SrrObjectInfo::clear_obstacle_prob() {
  obstacle_prob_ = 0;
}
inline double SrrObjectInfo::obstacle_prob() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrObjectInfo.obstacle_prob)
  return obstacle_prob_;
}
inline void SrrObjectInfo::set_obstacle_prob(double value) {
  
  obstacle_prob_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrObjectInfo.obstacle_prob)
}

// double height = 6;
inline void SrrObjectInfo::clear_height() {
  height_ = 0;
}
inline double SrrObjectInfo::height() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrObjectInfo.height)
  return height_;
}
inline void SrrObjectInfo::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrObjectInfo.height)
}

// double width = 7;
inline void SrrObjectInfo::clear_width() {
  width_ = 0;
}
inline double SrrObjectInfo::width() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrObjectInfo.width)
  return width_;
}
inline void SrrObjectInfo::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrObjectInfo.width)
}

// double length = 8;
inline void SrrObjectInfo::clear_length() {
  length_ = 0;
}
inline double SrrObjectInfo::length() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrObjectInfo.length)
  return length_;
}
inline void SrrObjectInfo::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrObjectInfo.length)
}

// double dist_long = 9;
inline void SrrObjectInfo::clear_dist_long() {
  dist_long_ = 0;
}
inline double SrrObjectInfo::dist_long() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrObjectInfo.dist_long)
  return dist_long_;
}
inline void SrrObjectInfo::set_dist_long(double value) {
  
  dist_long_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrObjectInfo.dist_long)
}

// double dist_lat = 10;
inline void SrrObjectInfo::clear_dist_lat() {
  dist_lat_ = 0;
}
inline double SrrObjectInfo::dist_lat() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrObjectInfo.dist_lat)
  return dist_lat_;
}
inline void SrrObjectInfo::set_dist_lat(double value) {
  
  dist_lat_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrObjectInfo.dist_lat)
}

// double vrel_long = 11;
inline void SrrObjectInfo::clear_vrel_long() {
  vrel_long_ = 0;
}
inline double SrrObjectInfo::vrel_long() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrObjectInfo.vrel_long)
  return vrel_long_;
}
inline void SrrObjectInfo::set_vrel_long(double value) {
  
  vrel_long_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrObjectInfo.vrel_long)
}

// double vrel_lat = 12;
inline void SrrObjectInfo::clear_vrel_lat() {
  vrel_lat_ = 0;
}
inline double SrrObjectInfo::vrel_lat() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrObjectInfo.vrel_lat)
  return vrel_lat_;
}
inline void SrrObjectInfo::set_vrel_lat(double value) {
  
  vrel_lat_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrObjectInfo.vrel_lat)
}

// double arel_long = 13;
inline void SrrObjectInfo::clear_arel_long() {
  arel_long_ = 0;
}
inline double SrrObjectInfo::arel_long() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrObjectInfo.arel_long)
  return arel_long_;
}
inline void SrrObjectInfo::set_arel_long(double value) {
  
  arel_long_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrObjectInfo.arel_long)
}

// double arel_lat = 14;
inline void SrrObjectInfo::clear_arel_lat() {
  arel_lat_ = 0;
}
inline double SrrObjectInfo::arel_lat() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrObjectInfo.arel_lat)
  return arel_lat_;
}
inline void SrrObjectInfo::set_arel_lat(double value) {
  
  arel_lat_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrObjectInfo.arel_lat)
}

// uint32 location = 15;
inline void SrrObjectInfo::clear_location() {
  location_ = 0u;
}
inline ::google::protobuf::uint32 SrrObjectInfo::location() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrObjectInfo.location)
  return location_;
}
inline void SrrObjectInfo::set_location(::google::protobuf::uint32 value) {
  
  location_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrObjectInfo.location)
}

// double orientation_angle = 16;
inline void SrrObjectInfo::clear_orientation_angle() {
  orientation_angle_ = 0;
}
inline double SrrObjectInfo::orientation_angle() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrObjectInfo.orientation_angle)
  return orientation_angle_;
}
inline void SrrObjectInfo::set_orientation_angle(double value) {
  
  orientation_angle_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrObjectInfo.orientation_angle)
}

// uint32 meas_state = 17;
inline void SrrObjectInfo::clear_meas_state() {
  meas_state_ = 0u;
}
inline ::google::protobuf::uint32 SrrObjectInfo::meas_state() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.SrrObjectInfo.meas_state)
  return meas_state_;
}
inline void SrrObjectInfo::set_meas_state(::google::protobuf::uint32 value) {
  
  meas_state_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.SrrObjectInfo.meas_state)
}

// -------------------------------------------------------------------

// srr_fc_frame_od

// .radar_srr_fc_od.proto.SrrHeader header = 1;
inline bool srr_fc_frame_od::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void srr_fc_frame_od::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::radar_srr_fc_od::proto::SrrHeader& srr_fc_frame_od::_internal_header() const {
  return *header_;
}
inline const ::radar_srr_fc_od::proto::SrrHeader& srr_fc_frame_od::header() const {
  const ::radar_srr_fc_od::proto::SrrHeader* p = header_;
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.srr_fc_frame_od.header)
  return p != NULL ? *p : *reinterpret_cast<const ::radar_srr_fc_od::proto::SrrHeader*>(
      &::radar_srr_fc_od::proto::_SrrHeader_default_instance_);
}
inline ::radar_srr_fc_od::proto::SrrHeader* srr_fc_frame_od::release_header() {
  // @@protoc_insertion_point(field_release:radar_srr_fc_od.proto.srr_fc_frame_od.header)
  
  ::radar_srr_fc_od::proto::SrrHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::radar_srr_fc_od::proto::SrrHeader* srr_fc_frame_od::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::radar_srr_fc_od::proto::SrrHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:radar_srr_fc_od.proto.srr_fc_frame_od.header)
  return header_;
}
inline void srr_fc_frame_od::set_allocated_header(::radar_srr_fc_od::proto::SrrHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:radar_srr_fc_od.proto.srr_fc_frame_od.header)
}

// uint64 timestamp = 2;
inline void srr_fc_frame_od::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 srr_fc_frame_od::timestamp() const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.srr_fc_frame_od.timestamp)
  return timestamp_;
}
inline void srr_fc_frame_od::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:radar_srr_fc_od.proto.srr_fc_frame_od.timestamp)
}

// repeated .radar_srr_fc_od.proto.SrrObjectInfo objects = 3;
inline int srr_fc_frame_od::objects_size() const {
  return objects_.size();
}
inline void srr_fc_frame_od::clear_objects() {
  objects_.Clear();
}
inline ::radar_srr_fc_od::proto::SrrObjectInfo* srr_fc_frame_od::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:radar_srr_fc_od.proto.srr_fc_frame_od.objects)
  return objects_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::radar_srr_fc_od::proto::SrrObjectInfo >*
srr_fc_frame_od::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:radar_srr_fc_od.proto.srr_fc_frame_od.objects)
  return &objects_;
}
inline const ::radar_srr_fc_od::proto::SrrObjectInfo& srr_fc_frame_od::objects(int index) const {
  // @@protoc_insertion_point(field_get:radar_srr_fc_od.proto.srr_fc_frame_od.objects)
  return objects_.Get(index);
}
inline ::radar_srr_fc_od::proto::SrrObjectInfo* srr_fc_frame_od::add_objects() {
  // @@protoc_insertion_point(field_add:radar_srr_fc_od.proto.srr_fc_frame_od.objects)
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::radar_srr_fc_od::proto::SrrObjectInfo >&
srr_fc_frame_od::objects() const {
  // @@protoc_insertion_point(field_list:radar_srr_fc_od.proto.srr_fc_frame_od.objects)
  return objects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace radar_srr_fc_od

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_radar_5fsrr_5ffc_5fod_2eproto
