// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file pointcloud.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "pointcloud.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

lidar::msg::PointXYZI::PointXYZI()
{
    // m_x com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6ddf90b0
    m_x = 0.0;
    // m_y com.eprosima.idl.parser.typecode.PrimitiveTypeCode@57536d79
    m_y = 0.0;
    // m_z com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3b0143d3
    m_z = 0.0;
    // m_intensity com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5a8e6209
    m_intensity = 0.0;
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4b4523f8
    m_timestamp = 0.0;
    // m_ring com.eprosima.idl.parser.typecode.PrimitiveTypeCode@731a74c
    m_ring = 0;

}

lidar::msg::PointXYZI::~PointXYZI()
{






}

lidar::msg::PointXYZI::PointXYZI(
        const PointXYZI& x)
{
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_intensity = x.m_intensity;
    m_timestamp = x.m_timestamp;
    m_ring = x.m_ring;
}

lidar::msg::PointXYZI::PointXYZI(
        PointXYZI&& x)
{
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_intensity = x.m_intensity;
    m_timestamp = x.m_timestamp;
    m_ring = x.m_ring;
}

lidar::msg::PointXYZI& lidar::msg::PointXYZI::operator =(
        const PointXYZI& x)
{

    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_intensity = x.m_intensity;
    m_timestamp = x.m_timestamp;
    m_ring = x.m_ring;

    return *this;
}

lidar::msg::PointXYZI& lidar::msg::PointXYZI::operator =(
        PointXYZI&& x)
{

    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
    m_intensity = x.m_intensity;
    m_timestamp = x.m_timestamp;
    m_ring = x.m_ring;

    return *this;
}

size_t lidar::msg::PointXYZI::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    return current_alignment - initial_alignment;
}

size_t lidar::msg::PointXYZI::getCdrSerializedSize(
        const lidar::msg::PointXYZI& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    return current_alignment - initial_alignment;
}

void lidar::msg::PointXYZI::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_x;
    scdr << m_y;
    scdr << m_z;
    scdr << m_intensity;
    scdr << m_timestamp;
    scdr << m_ring;

}

void lidar::msg::PointXYZI::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_x;
    dcdr >> m_y;
    dcdr >> m_z;
    dcdr >> m_intensity;
    dcdr >> m_timestamp;
    dcdr >> m_ring;
}

/*!
 * @brief This function sets a value in member x
 * @param _x New value for member x
 */
void lidar::msg::PointXYZI::x(
        float _x)
{
    m_x = _x;
}

/*!
 * @brief This function returns the value of member x
 * @return Value of member x
 */
float lidar::msg::PointXYZI::x() const
{
    return m_x;
}

/*!
 * @brief This function returns a reference to member x
 * @return Reference to member x
 */
float& lidar::msg::PointXYZI::x()
{
    return m_x;
}

/*!
 * @brief This function sets a value in member y
 * @param _y New value for member y
 */
void lidar::msg::PointXYZI::y(
        float _y)
{
    m_y = _y;
}

/*!
 * @brief This function returns the value of member y
 * @return Value of member y
 */
float lidar::msg::PointXYZI::y() const
{
    return m_y;
}

/*!
 * @brief This function returns a reference to member y
 * @return Reference to member y
 */
float& lidar::msg::PointXYZI::y()
{
    return m_y;
}

/*!
 * @brief This function sets a value in member z
 * @param _z New value for member z
 */
void lidar::msg::PointXYZI::z(
        float _z)
{
    m_z = _z;
}

/*!
 * @brief This function returns the value of member z
 * @return Value of member z
 */
float lidar::msg::PointXYZI::z() const
{
    return m_z;
}

/*!
 * @brief This function returns a reference to member z
 * @return Reference to member z
 */
float& lidar::msg::PointXYZI::z()
{
    return m_z;
}

/*!
 * @brief This function sets a value in member intensity
 * @param _intensity New value for member intensity
 */
void lidar::msg::PointXYZI::intensity(
        float _intensity)
{
    m_intensity = _intensity;
}

/*!
 * @brief This function returns the value of member intensity
 * @return Value of member intensity
 */
float lidar::msg::PointXYZI::intensity() const
{
    return m_intensity;
}

/*!
 * @brief This function returns a reference to member intensity
 * @return Reference to member intensity
 */
float& lidar::msg::PointXYZI::intensity()
{
    return m_intensity;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void lidar::msg::PointXYZI::timestamp(
        double _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
double lidar::msg::PointXYZI::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
double& lidar::msg::PointXYZI::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function sets a value in member ring
 * @param _ring New value for member ring
 */
void lidar::msg::PointXYZI::ring(
        uint16_t _ring)
{
    m_ring = _ring;
}

/*!
 * @brief This function returns the value of member ring
 * @return Value of member ring
 */
uint16_t lidar::msg::PointXYZI::ring() const
{
    return m_ring;
}

/*!
 * @brief This function returns a reference to member ring
 * @return Reference to member ring
 */
uint16_t& lidar::msg::PointXYZI::ring()
{
    return m_ring;
}


size_t lidar::msg::PointXYZI::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;









    return current_align;
}

bool lidar::msg::PointXYZI::isKeyDefined()
{
    return false;
}

void lidar::msg::PointXYZI::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
          
}

lidar::msg::PointCloudMsg::PointCloudMsg()
{
    // m_PointCloud com.eprosima.idl.parser.typecode.SequenceTypeCode@1b26f7b2

    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@491cc5c9
    m_timestamp = 0.0;
    // m_frame_id com.eprosima.idl.parser.typecode.StringTypeCode@74ad1f1f
    m_frame_id ="";
    // m_seq com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6a1aab78
    m_seq = 0;
    // m_height com.eprosima.idl.parser.typecode.PrimitiveTypeCode@462d5aee
    m_height = 0;
    // m_width com.eprosima.idl.parser.typecode.PrimitiveTypeCode@69b0fd6f
    m_width = 0;
    // m_is_dense com.eprosima.idl.parser.typecode.PrimitiveTypeCode@757942a1
    m_is_dense = 0;

}

lidar::msg::PointCloudMsg::~PointCloudMsg()
{







}

lidar::msg::PointCloudMsg::PointCloudMsg(
        const PointCloudMsg& x)
{
    m_PointCloud = x.m_PointCloud;
    m_timestamp = x.m_timestamp;
    m_frame_id = x.m_frame_id;
    m_seq = x.m_seq;
    m_height = x.m_height;
    m_width = x.m_width;
    m_is_dense = x.m_is_dense;
}

lidar::msg::PointCloudMsg::PointCloudMsg(
        PointCloudMsg&& x)
{
    m_PointCloud = std::move(x.m_PointCloud);
    m_timestamp = x.m_timestamp;
    m_frame_id = std::move(x.m_frame_id);
    m_seq = x.m_seq;
    m_height = x.m_height;
    m_width = x.m_width;
    m_is_dense = x.m_is_dense;
}

lidar::msg::PointCloudMsg& lidar::msg::PointCloudMsg::operator =(
        const PointCloudMsg& x)
{

    m_PointCloud = x.m_PointCloud;
    m_timestamp = x.m_timestamp;
    m_frame_id = x.m_frame_id;
    m_seq = x.m_seq;
    m_height = x.m_height;
    m_width = x.m_width;
    m_is_dense = x.m_is_dense;

    return *this;
}

lidar::msg::PointCloudMsg& lidar::msg::PointCloudMsg::operator =(
        PointCloudMsg&& x)
{

    m_PointCloud = std::move(x.m_PointCloud);
    m_timestamp = x.m_timestamp;
    m_frame_id = std::move(x.m_frame_id);
    m_seq = x.m_seq;
    m_height = x.m_height;
    m_width = x.m_width;
    m_is_dense = x.m_is_dense;

    return *this;
}

size_t lidar::msg::PointCloudMsg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += lidar::msg::PointXYZI::getMaxCdrSerializedSize(current_alignment);}

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t lidar::msg::PointCloudMsg::getCdrSerializedSize(
        const lidar::msg::PointCloudMsg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.PointCloud().size(); ++a)
    {
        current_alignment += lidar::msg::PointXYZI::getCdrSerializedSize(data.PointCloud().at(a), current_alignment);}

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void lidar::msg::PointCloudMsg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_PointCloud;
    scdr << m_timestamp;
    scdr << m_frame_id;
    scdr << m_seq;
    scdr << m_height;
    scdr << m_width;
    scdr << m_is_dense;

}

void lidar::msg::PointCloudMsg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_PointCloud;
    dcdr >> m_timestamp;
    dcdr >> m_frame_id;
    dcdr >> m_seq;
    dcdr >> m_height;
    dcdr >> m_width;
    dcdr >> m_is_dense;
}

/*!
 * @brief This function copies the value in member PointCloud
 * @param _PointCloud New value to be copied in member PointCloud
 */
void lidar::msg::PointCloudMsg::PointCloud(
        const std::vector<lidar::msg::PointXYZI>& _PointCloud)
{
    m_PointCloud = _PointCloud;
}

/*!
 * @brief This function moves the value in member PointCloud
 * @param _PointCloud New value to be moved in member PointCloud
 */
void lidar::msg::PointCloudMsg::PointCloud(
        std::vector<lidar::msg::PointXYZI>&& _PointCloud)
{
    m_PointCloud = std::move(_PointCloud);
}

/*!
 * @brief This function returns a constant reference to member PointCloud
 * @return Constant reference to member PointCloud
 */
const std::vector<lidar::msg::PointXYZI>& lidar::msg::PointCloudMsg::PointCloud() const
{
    return m_PointCloud;
}

/*!
 * @brief This function returns a reference to member PointCloud
 * @return Reference to member PointCloud
 */
std::vector<lidar::msg::PointXYZI>& lidar::msg::PointCloudMsg::PointCloud()
{
    return m_PointCloud;
}
/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void lidar::msg::PointCloudMsg::timestamp(
        double _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
double lidar::msg::PointCloudMsg::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
double& lidar::msg::PointCloudMsg::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void lidar::msg::PointCloudMsg::frame_id(
        const std::string& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void lidar::msg::PointCloudMsg::frame_id(
        std::string&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::string& lidar::msg::PointCloudMsg::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::string& lidar::msg::PointCloudMsg::frame_id()
{
    return m_frame_id;
}
/*!
 * @brief This function sets a value in member seq
 * @param _seq New value for member seq
 */
void lidar::msg::PointCloudMsg::seq(
        uint32_t _seq)
{
    m_seq = _seq;
}

/*!
 * @brief This function returns the value of member seq
 * @return Value of member seq
 */
uint32_t lidar::msg::PointCloudMsg::seq() const
{
    return m_seq;
}

/*!
 * @brief This function returns a reference to member seq
 * @return Reference to member seq
 */
uint32_t& lidar::msg::PointCloudMsg::seq()
{
    return m_seq;
}

/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void lidar::msg::PointCloudMsg::height(
        uint32_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
uint32_t lidar::msg::PointCloudMsg::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
uint32_t& lidar::msg::PointCloudMsg::height()
{
    return m_height;
}

/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void lidar::msg::PointCloudMsg::width(
        uint32_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
uint32_t lidar::msg::PointCloudMsg::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
uint32_t& lidar::msg::PointCloudMsg::width()
{
    return m_width;
}

/*!
 * @brief This function sets a value in member is_dense
 * @param _is_dense New value for member is_dense
 */
void lidar::msg::PointCloudMsg::is_dense(
        uint8_t _is_dense)
{
    m_is_dense = _is_dense;
}

/*!
 * @brief This function returns the value of member is_dense
 * @return Value of member is_dense
 */
uint8_t lidar::msg::PointCloudMsg::is_dense() const
{
    return m_is_dense;
}

/*!
 * @brief This function returns a reference to member is_dense
 * @return Reference to member is_dense
 */
uint8_t& lidar::msg::PointCloudMsg::is_dense()
{
    return m_is_dense;
}


size_t lidar::msg::PointCloudMsg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;










    return current_align;
}

bool lidar::msg::PointCloudMsg::isKeyDefined()
{
    return false;
}

void lidar::msg::PointCloudMsg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
           
}


