// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file pointcloud.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _LIDAR_MSG_POINTCLOUD_H_
#define _LIDAR_MSG_POINTCLOUD_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(pointcloud_SOURCE)
#define pointcloud_DllAPI __declspec( dllexport )
#else
#define pointcloud_DllAPI __declspec( dllimport )
#endif // pointcloud_SOURCE
#else
#define pointcloud_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define pointcloud_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace lidar {
    namespace msg {
        /*!
         * @brief This class represents the structure PointXYZI defined by the user in the IDL file.
         * @ingroup POINTCLOUD
         */
        class PointXYZI
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport PointXYZI();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~PointXYZI();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object lidar::msg::PointXYZI that will be copied.
             */
            eProsima_user_DllExport PointXYZI(
                    const PointXYZI& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object lidar::msg::PointXYZI that will be copied.
             */
            eProsima_user_DllExport PointXYZI(
                    PointXYZI&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object lidar::msg::PointXYZI that will be copied.
             */
            eProsima_user_DllExport PointXYZI& operator =(
                    const PointXYZI& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object lidar::msg::PointXYZI that will be copied.
             */
            eProsima_user_DllExport PointXYZI& operator =(
                    PointXYZI&& x);

            /*!
             * @brief This function sets a value in member x
             * @param _x New value for member x
             */
            eProsima_user_DllExport void x(
                    float _x);

            /*!
             * @brief This function returns the value of member x
             * @return Value of member x
             */
            eProsima_user_DllExport float x() const;

            /*!
             * @brief This function returns a reference to member x
             * @return Reference to member x
             */
            eProsima_user_DllExport float& x();

            /*!
             * @brief This function sets a value in member y
             * @param _y New value for member y
             */
            eProsima_user_DllExport void y(
                    float _y);

            /*!
             * @brief This function returns the value of member y
             * @return Value of member y
             */
            eProsima_user_DllExport float y() const;

            /*!
             * @brief This function returns a reference to member y
             * @return Reference to member y
             */
            eProsima_user_DllExport float& y();

            /*!
             * @brief This function sets a value in member z
             * @param _z New value for member z
             */
            eProsima_user_DllExport void z(
                    float _z);

            /*!
             * @brief This function returns the value of member z
             * @return Value of member z
             */
            eProsima_user_DllExport float z() const;

            /*!
             * @brief This function returns a reference to member z
             * @return Reference to member z
             */
            eProsima_user_DllExport float& z();

            /*!
             * @brief This function sets a value in member intensity
             * @param _intensity New value for member intensity
             */
            eProsima_user_DllExport void intensity(
                    float _intensity);

            /*!
             * @brief This function returns the value of member intensity
             * @return Value of member intensity
             */
            eProsima_user_DllExport float intensity() const;

            /*!
             * @brief This function returns a reference to member intensity
             * @return Reference to member intensity
             */
            eProsima_user_DllExport float& intensity();

            /*!
             * @brief This function sets a value in member timestamp
             * @param _timestamp New value for member timestamp
             */
            eProsima_user_DllExport void timestamp(
                    double _timestamp);

            /*!
             * @brief This function returns the value of member timestamp
             * @return Value of member timestamp
             */
            eProsima_user_DllExport double timestamp() const;

            /*!
             * @brief This function returns a reference to member timestamp
             * @return Reference to member timestamp
             */
            eProsima_user_DllExport double& timestamp();

            /*!
             * @brief This function sets a value in member ring
             * @param _ring New value for member ring
             */
            eProsima_user_DllExport void ring(
                    uint16_t _ring);

            /*!
             * @brief This function returns the value of member ring
             * @return Value of member ring
             */
            eProsima_user_DllExport uint16_t ring() const;

            /*!
             * @brief This function returns a reference to member ring
             * @return Reference to member ring
             */
            eProsima_user_DllExport uint16_t& ring();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const lidar::msg::PointXYZI& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            float m_x;
            float m_y;
            float m_z;
            float m_intensity;
            double m_timestamp;
            uint16_t m_ring;
        };
        /*!
         * @brief This class represents the structure PointCloudMsg defined by the user in the IDL file.
         * @ingroup POINTCLOUD
         */
        class PointCloudMsg
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport PointCloudMsg();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~PointCloudMsg();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object lidar::msg::PointCloudMsg that will be copied.
             */
            eProsima_user_DllExport PointCloudMsg(
                    const PointCloudMsg& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object lidar::msg::PointCloudMsg that will be copied.
             */
            eProsima_user_DllExport PointCloudMsg(
                    PointCloudMsg&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object lidar::msg::PointCloudMsg that will be copied.
             */
            eProsima_user_DllExport PointCloudMsg& operator =(
                    const PointCloudMsg& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object lidar::msg::PointCloudMsg that will be copied.
             */
            eProsima_user_DllExport PointCloudMsg& operator =(
                    PointCloudMsg&& x);

            /*!
             * @brief This function copies the value in member PointCloud
             * @param _PointCloud New value to be copied in member PointCloud
             */
            eProsima_user_DllExport void PointCloud(
                    const std::vector<lidar::msg::PointXYZI>& _PointCloud);

            /*!
             * @brief This function moves the value in member PointCloud
             * @param _PointCloud New value to be moved in member PointCloud
             */
            eProsima_user_DllExport void PointCloud(
                    std::vector<lidar::msg::PointXYZI>&& _PointCloud);

            /*!
             * @brief This function returns a constant reference to member PointCloud
             * @return Constant reference to member PointCloud
             */
            eProsima_user_DllExport const std::vector<lidar::msg::PointXYZI>& PointCloud() const;

            /*!
             * @brief This function returns a reference to member PointCloud
             * @return Reference to member PointCloud
             */
            eProsima_user_DllExport std::vector<lidar::msg::PointXYZI>& PointCloud();
            /*!
             * @brief This function sets a value in member timestamp
             * @param _timestamp New value for member timestamp
             */
            eProsima_user_DllExport void timestamp(
                    double _timestamp);

            /*!
             * @brief This function returns the value of member timestamp
             * @return Value of member timestamp
             */
            eProsima_user_DllExport double timestamp() const;

            /*!
             * @brief This function returns a reference to member timestamp
             * @return Reference to member timestamp
             */
            eProsima_user_DllExport double& timestamp();

            /*!
             * @brief This function copies the value in member frame_id
             * @param _frame_id New value to be copied in member frame_id
             */
            eProsima_user_DllExport void frame_id(
                    const std::string& _frame_id);

            /*!
             * @brief This function moves the value in member frame_id
             * @param _frame_id New value to be moved in member frame_id
             */
            eProsima_user_DllExport void frame_id(
                    std::string&& _frame_id);

            /*!
             * @brief This function returns a constant reference to member frame_id
             * @return Constant reference to member frame_id
             */
            eProsima_user_DllExport const std::string& frame_id() const;

            /*!
             * @brief This function returns a reference to member frame_id
             * @return Reference to member frame_id
             */
            eProsima_user_DllExport std::string& frame_id();
            /*!
             * @brief This function sets a value in member seq
             * @param _seq New value for member seq
             */
            eProsima_user_DllExport void seq(
                    uint32_t _seq);

            /*!
             * @brief This function returns the value of member seq
             * @return Value of member seq
             */
            eProsima_user_DllExport uint32_t seq() const;

            /*!
             * @brief This function returns a reference to member seq
             * @return Reference to member seq
             */
            eProsima_user_DllExport uint32_t& seq();

            /*!
             * @brief This function sets a value in member height
             * @param _height New value for member height
             */
            eProsima_user_DllExport void height(
                    uint32_t _height);

            /*!
             * @brief This function returns the value of member height
             * @return Value of member height
             */
            eProsima_user_DllExport uint32_t height() const;

            /*!
             * @brief This function returns a reference to member height
             * @return Reference to member height
             */
            eProsima_user_DllExport uint32_t& height();

            /*!
             * @brief This function sets a value in member width
             * @param _width New value for member width
             */
            eProsima_user_DllExport void width(
                    uint32_t _width);

            /*!
             * @brief This function returns the value of member width
             * @return Value of member width
             */
            eProsima_user_DllExport uint32_t width() const;

            /*!
             * @brief This function returns a reference to member width
             * @return Reference to member width
             */
            eProsima_user_DllExport uint32_t& width();

            /*!
             * @brief This function sets a value in member is_dense
             * @param _is_dense New value for member is_dense
             */
            eProsima_user_DllExport void is_dense(
                    uint8_t _is_dense);

            /*!
             * @brief This function returns the value of member is_dense
             * @return Value of member is_dense
             */
            eProsima_user_DllExport uint8_t is_dense() const;

            /*!
             * @brief This function returns a reference to member is_dense
             * @return Reference to member is_dense
             */
            eProsima_user_DllExport uint8_t& is_dense();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const lidar::msg::PointCloudMsg& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::vector<lidar::msg::PointXYZI> m_PointCloud;
            double m_timestamp;
            std::string m_frame_id;
            uint32_t m_seq;
            uint32_t m_height;
            uint32_t m_width;
            uint8_t m_is_dense;
        };
    } // namespace msg
} // namespace lidar

#endif // _LIDAR_MSG_POINTCLOUD_H_